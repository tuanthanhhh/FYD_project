
FYP_241.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082fc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08008410  08008410  00009410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008878  08008878  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008878  08008878  00009878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008880  08008880  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008880  08008880  00009880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008884  08008884  00009884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008888  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001d4  08008a5c  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08008a5c  0000a4c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001113b  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b9  00000000  00000000  0001b338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  0001d7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dfd  00000000  00000000  0001e9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194f4  00000000  00000000  0001f7b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144ab  00000000  00000000  00038ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090936  00000000  00000000  0004d154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dda8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dec  00000000  00000000  000ddad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e38bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080083f4 	.word	0x080083f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080083f4 	.word	0x080083f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000b68:	b4b0      	push	{r4, r5, r7}
 8000b6a:	b08f      	sub	sp, #60	@ 0x3c
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000b70:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000b76:	2307      	movs	r3, #7
 8000b78:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000b7c:	2307      	movs	r3, #7
 8000b7e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000b82:	2301      	movs	r3, #1
 8000b84:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000b88:	23ff      	movs	r3, #255	@ 0xff
 8000b8a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000b8e:	2364      	movs	r3, #100	@ 0x64
 8000b90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000b94:	2308      	movs	r3, #8
 8000b96:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	461d      	mov	r5, r3
 8000b9c:	f107 040c 	add.w	r4, r7, #12
 8000ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000bac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	373c      	adds	r7, #60	@ 0x3c
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bcb0      	pop	{r4, r5, r7}
 8000bb8:	4770      	bx	lr

08000bba <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 f9ff 	bl	8000fca <LoRa_read>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000bd0:	7bbb      	ldrb	r3, [r7, #14]
 8000bd2:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d107      	bne.n	8000bea <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000bda:	7bbb      	ldrb	r3, [r7, #14]
 8000bdc:	f023 0307 	bic.w	r3, r3, #7
 8000be0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	61da      	str	r2, [r3, #28]
 8000be8:	e03e      	b.n	8000c68 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d10c      	bne.n	8000c0a <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000bf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bf4:	f023 0307 	bic.w	r3, r3, #7
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2201      	movs	r2, #1
 8000c06:	61da      	str	r2, [r3, #28]
 8000c08:	e02e      	b.n	8000c68 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d10c      	bne.n	8000c2a <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000c10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c14:	f023 0307 	bic.w	r3, r3, #7
 8000c18:	b25b      	sxtb	r3, r3
 8000c1a:	f043 0303 	orr.w	r3, r3, #3
 8000c1e:	b25b      	sxtb	r3, r3
 8000c20:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2203      	movs	r2, #3
 8000c26:	61da      	str	r2, [r3, #28]
 8000c28:	e01e      	b.n	8000c68 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	2b05      	cmp	r3, #5
 8000c2e:	d10c      	bne.n	8000c4a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000c30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c34:	f023 0307 	bic.w	r3, r3, #7
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	f043 0305 	orr.w	r3, r3, #5
 8000c3e:	b25b      	sxtb	r3, r3
 8000c40:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2205      	movs	r2, #5
 8000c46:	61da      	str	r2, [r3, #28]
 8000c48:	e00e      	b.n	8000c68 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	2b06      	cmp	r3, #6
 8000c4e:	d10b      	bne.n	8000c68 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000c50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c54:	f023 0307 	bic.w	r3, r3, #7
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	f043 0306 	orr.w	r3, r3, #6
 8000c5e:	b25b      	sxtb	r3, r3
 8000c60:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2206      	movs	r2, #6
 8000c66:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f000 f9c5 	bl	8000ffe <LoRa_write>
	//HAL_Delay(10);
}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	6818      	ldr	r0, [r3, #0]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	889b      	ldrh	r3, [r3, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	4619      	mov	r1, r3
 8000c98:	f001 fc88 	bl	80025ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	6998      	ldr	r0, [r3, #24]
 8000ca0:	88fa      	ldrh	r2, [r7, #6]
 8000ca2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ca6:	68b9      	ldr	r1, [r7, #8]
 8000ca8:	f003 fb22 	bl	80042f0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000cac:	bf00      	nop
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f003 ff22 	bl	8004afc <HAL_SPI_GetState>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d1f7      	bne.n	8000cae <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	6998      	ldr	r0, [r3, #24]
 8000cc2:	8b3a      	ldrh	r2, [r7, #24]
 8000cc4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000cc8:	6839      	ldr	r1, [r7, #0]
 8000cca:	f003 fc55 	bl	8004578 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000cce:	bf00      	nop
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f003 ff11 	bl	8004afc <HAL_SPI_GetState>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d1f7      	bne.n	8000cd0 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	6818      	ldr	r0, [r3, #0]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	889b      	ldrh	r3, [r3, #4]
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4619      	mov	r1, r3
 8000cec:	f001 fc5e 	bl	80025ac <HAL_GPIO_WritePin>
}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	4613      	mov	r3, r2
 8000d06:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	6818      	ldr	r0, [r3, #0]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	889b      	ldrh	r3, [r3, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	4619      	mov	r1, r3
 8000d14:	f001 fc4a 	bl	80025ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	6998      	ldr	r0, [r3, #24]
 8000d1c:	88fa      	ldrh	r2, [r7, #6]
 8000d1e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d22:	68b9      	ldr	r1, [r7, #8]
 8000d24:	f003 fae4 	bl	80042f0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d28:	bf00      	nop
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 fee4 	bl	8004afc <HAL_SPI_GetState>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d1f7      	bne.n	8000d2a <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6998      	ldr	r0, [r3, #24]
 8000d3e:	8b3a      	ldrh	r2, [r7, #24]
 8000d40:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d44:	6839      	ldr	r1, [r7, #0]
 8000d46:	f003 fad3 	bl	80042f0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d4a:	bf00      	nop
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f003 fed3 	bl	8004afc <HAL_SPI_GetState>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d1f7      	bne.n	8000d4c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	889b      	ldrh	r3, [r3, #4]
 8000d64:	2201      	movs	r2, #1
 8000d66:	4619      	mov	r1, r3
 8000d68:	f001 fc20 	bl	80025ac <HAL_GPIO_WritePin>
}
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000d80:	2126      	movs	r1, #38	@ 0x26
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 f921 	bl	8000fca <LoRa_read>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	73bb      	strb	r3, [r7, #14]

	if(value)
 8000d8c:	78fb      	ldrb	r3, [r7, #3]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d004      	beq.n	8000d9c <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	f043 0308 	orr.w	r3, r3, #8
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	e003      	b.n	8000da4 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000d9c:	7bbb      	ldrb	r3, [r7, #14]
 8000d9e:	f023 0308 	bic.w	r3, r3, #8
 8000da2:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	461a      	mov	r2, r3
 8000da8:	2126      	movs	r1, #38	@ 0x26
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f000 f927 	bl	8000ffe <LoRa_write>
	HAL_Delay(10);
 8000db0:	200a      	movs	r0, #10
 8000db2:	f001 f945 	bl	8002040 <HAL_Delay>
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b096      	sub	sp, #88	@ 0x58
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000dc8:	4a17      	ldr	r2, [pc, #92]	@ (8000e28 <LoRa_setAutoLDO+0x68>)
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	4611      	mov	r1, r2
 8000dd0:	2250      	movs	r2, #80	@ 0x50
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f005 fac7 	bl	8006366 <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000dde:	461a      	mov	r2, r3
 8000de0:	2301      	movs	r3, #1
 8000de2:	4093      	lsls	r3, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fb0d 	bl	8000404 <__aeabi_i2d>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	3358      	adds	r3, #88	@ 0x58
 8000df4:	443b      	add	r3, r7
 8000df6:	3b50      	subs	r3, #80	@ 0x50
 8000df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfc:	f7ff fc96 	bl	800072c <__aeabi_ddiv>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4610      	mov	r0, r2
 8000e06:	4619      	mov	r1, r3
 8000e08:	f7ff fe16 	bl	8000a38 <__aeabi_d2iz>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b10      	cmp	r3, #16
 8000e10:	bfcc      	ite	gt
 8000e12:	2301      	movgt	r3, #1
 8000e14:	2300      	movle	r3, #0
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	4619      	mov	r1, r3
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffaa 	bl	8000d74 <LoRa_setLowDaraRateOptimization>
}
 8000e20:	bf00      	nop
 8000e22:	3758      	adds	r7, #88	@ 0x58
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	08008410 	.word	0x08008410

08000e2c <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	04db      	lsls	r3, r3, #19
 8000e3a:	115b      	asrs	r3, r3, #5
 8000e3c:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	0c1b      	lsrs	r3, r3, #16
 8000e42:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000e44:	7afb      	ldrb	r3, [r7, #11]
 8000e46:	461a      	mov	r2, r3
 8000e48:	2106      	movs	r1, #6
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 f8d7 	bl	8000ffe <LoRa_write>
	HAL_Delay(5);
 8000e50:	2005      	movs	r0, #5
 8000e52:	f001 f8f5 	bl	8002040 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000e5c:	7afb      	ldrb	r3, [r7, #11]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	2107      	movs	r1, #7
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 f8cb 	bl	8000ffe <LoRa_write>
	HAL_Delay(5);
 8000e68:	2005      	movs	r0, #5
 8000e6a:	f001 f8e9 	bl	8002040 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000e72:	7afb      	ldrb	r3, [r7, #11]
 8000e74:	461a      	mov	r2, r3
 8000e76:	2108      	movs	r1, #8
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f000 f8c0 	bl	8000ffe <LoRa_write>
	HAL_Delay(5);
 8000e7e:	2005      	movs	r0, #5
 8000e80:	f001 f8de 	bl	8002040 <HAL_Delay>
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	2b0c      	cmp	r3, #12
 8000e9a:	dd01      	ble.n	8000ea0 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	dc01      	bgt.n	8000eaa <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000eaa:	211e      	movs	r1, #30
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 f88c 	bl	8000fca <LoRa_read>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000eb6:	200a      	movs	r0, #10
 8000eb8:	f001 f8c2 	bl	8002040 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	011b      	lsls	r3, r3, #4
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4413      	add	r3, r2
 8000ece:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	211e      	movs	r1, #30
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 f891 	bl	8000ffe <LoRa_write>
	HAL_Delay(10);
 8000edc:	200a      	movs	r0, #10
 8000ede:	f001 f8af 	bl	8002040 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff6c 	bl	8000dc0 <LoRa_setAutoLDO>
}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000efc:	78fb      	ldrb	r3, [r7, #3]
 8000efe:	461a      	mov	r2, r3
 8000f00:	2109      	movs	r1, #9
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f87b 	bl	8000ffe <LoRa_write>
	HAL_Delay(10);
 8000f08:	200a      	movs	r0, #10
 8000f0a:	f001 f899 	bl	8002040 <HAL_Delay>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000f28:	78fb      	ldrb	r3, [r7, #3]
 8000f2a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f2c:	d801      	bhi.n	8000f32 <LoRa_setOCP+0x1a>
		current = 45;
 8000f2e:	232d      	movs	r3, #45	@ 0x2d
 8000f30:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000f32:	78fb      	ldrb	r3, [r7, #3]
 8000f34:	2bf0      	cmp	r3, #240	@ 0xf0
 8000f36:	d901      	bls.n	8000f3c <LoRa_setOCP+0x24>
		current = 240;
 8000f38:	23f0      	movs	r3, #240	@ 0xf0
 8000f3a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	2b78      	cmp	r3, #120	@ 0x78
 8000f40:	d809      	bhi.n	8000f56 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000f42:	78fb      	ldrb	r3, [r7, #3]
 8000f44:	3b2d      	subs	r3, #45	@ 0x2d
 8000f46:	4a12      	ldr	r2, [pc, #72]	@ (8000f90 <LoRa_setOCP+0x78>)
 8000f48:	fb82 1203 	smull	r1, r2, r2, r3
 8000f4c:	1052      	asrs	r2, r2, #1
 8000f4e:	17db      	asrs	r3, r3, #31
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e00b      	b.n	8000f6e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000f56:	78fb      	ldrb	r3, [r7, #3]
 8000f58:	2bf0      	cmp	r3, #240	@ 0xf0
 8000f5a:	d808      	bhi.n	8000f6e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	331e      	adds	r3, #30
 8000f60:	4a0b      	ldr	r2, [pc, #44]	@ (8000f90 <LoRa_setOCP+0x78>)
 8000f62:	fb82 1203 	smull	r1, r2, r2, r3
 8000f66:	1092      	asrs	r2, r2, #2
 8000f68:	17db      	asrs	r3, r3, #31
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	3320      	adds	r3, #32
 8000f72:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	461a      	mov	r2, r3
 8000f78:	210b      	movs	r1, #11
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f83f 	bl	8000ffe <LoRa_write>
	HAL_Delay(10);
 8000f80:	200a      	movs	r0, #10
 8000f82:	f001 f85d 	bl	8002040 <HAL_Delay>
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	66666667 	.word	0x66666667

08000f94 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000f9c:	211e      	movs	r1, #30
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f813 	bl	8000fca <LoRa_read>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	f043 0307 	orr.w	r3, r3, #7
 8000fae:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	211e      	movs	r1, #30
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f821 	bl	8000ffe <LoRa_write>
	HAL_Delay(10);
 8000fbc:	200a      	movs	r0, #10
 8000fbe:	f001 f83f 	bl	8002040 <HAL_Delay>
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af02      	add	r7, sp, #8
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000fd6:	78fb      	ldrb	r3, [r7, #3]
 8000fd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000fe0:	f107 030f 	add.w	r3, r7, #15
 8000fe4:	f107 010e 	add.w	r1, r7, #14
 8000fe8:	2201      	movs	r2, #1
 8000fea:	9200      	str	r2, [sp, #0]
 8000fec:	2201      	movs	r2, #1
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fe44 	bl	8000c7c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af02      	add	r7, sp, #8
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	460b      	mov	r3, r1
 8001008:	70fb      	strb	r3, [r7, #3]
 800100a:	4613      	mov	r3, r2
 800100c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001014:	b2db      	uxtb	r3, r3
 8001016:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001018:	78bb      	ldrb	r3, [r7, #2]
 800101a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800101c:	f107 030f 	add.w	r3, r7, #15
 8001020:	f107 010e 	add.w	r1, r7, #14
 8001024:	2201      	movs	r2, #1
 8001026:	9200      	str	r2, [sp, #0]
 8001028:	2201      	movs	r2, #1
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff fe64 	bl	8000cf8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	461a      	mov	r2, r3
 8001044:	460b      	mov	r3, r1
 8001046:	72fb      	strb	r3, [r7, #11]
 8001048:	4613      	mov	r3, r2
 800104a:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 800104c:	7afb      	ldrb	r3, [r7, #11]
 800104e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001052:	b2db      	uxtb	r3, r3
 8001054:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	889b      	ldrh	r3, [r3, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	4619      	mov	r1, r3
 8001062:	f001 faa3 	bl	80025ac <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6998      	ldr	r0, [r3, #24]
 800106a:	f107 0117 	add.w	r1, r7, #23
 800106e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001072:	2201      	movs	r2, #1
 8001074:	f003 f93c 	bl	80042f0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001078:	bf00      	nop
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	4618      	mov	r0, r3
 8001080:	f003 fd3c 	bl	8004afc <HAL_SPI_GetState>
 8001084:	4603      	mov	r3, r0
 8001086:	2b01      	cmp	r3, #1
 8001088:	d1f7      	bne.n	800107a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6998      	ldr	r0, [r3, #24]
 800108e:	7abb      	ldrb	r3, [r7, #10]
 8001090:	b29a      	uxth	r2, r3
 8001092:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f003 f92a 	bl	80042f0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800109c:	bf00      	nop
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 fd2a 	bl	8004afc <HAL_SPI_GetState>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d1f7      	bne.n	800109e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	889b      	ldrh	r3, [r3, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	4619      	mov	r1, r3
 80010ba:	f001 fa77 	bl	80025ac <HAL_GPIO_WritePin>
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]

	return 1;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	4611      	mov	r1, r2
 80010e6:	461a      	mov	r2, r3
 80010e8:	460b      	mov	r3, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80010f6:	2101      	movs	r1, #1
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f7ff fd5e 	bl	8000bba <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80010fe:	210e      	movs	r1, #14
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f7ff ff62 	bl	8000fca <LoRa_read>
 8001106:	4603      	mov	r3, r0
 8001108:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800110a:	7cfb      	ldrb	r3, [r7, #19]
 800110c:	461a      	mov	r2, r3
 800110e:	210d      	movs	r1, #13
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f7ff ff74 	bl	8000ffe <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	461a      	mov	r2, r3
 800111a:	2122      	movs	r1, #34	@ 0x22
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f7ff ff6e 	bl	8000ffe <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	2100      	movs	r1, #0
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f7ff ff85 	bl	8001038 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800112e:	2103      	movs	r1, #3
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f7ff fd42 	bl	8000bba <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001136:	2112      	movs	r1, #18
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f7ff ff46 	bl	8000fca <LoRa_read>
 800113e:	4603      	mov	r3, r0
 8001140:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001142:	7cfb      	ldrb	r3, [r7, #19]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00a      	beq.n	8001162 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800114c:	22ff      	movs	r2, #255	@ 0xff
 800114e:	2112      	movs	r1, #18
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f7ff ff54 	bl	8000ffe <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001156:	6979      	ldr	r1, [r7, #20]
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f7ff fd2e 	bl	8000bba <LoRa_gotoMode>
			return 1;
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001162:	88bb      	ldrh	r3, [r7, #4]
 8001164:	3b01      	subs	r3, #1
 8001166:	80bb      	strh	r3, [r7, #4]
 8001168:	88bb      	ldrh	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d105      	bne.n	800117a <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 800116e:	6979      	ldr	r1, [r7, #20]
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f7ff fd22 	bl	8000bba <LoRa_gotoMode>
				return 0;
 8001176:	2300      	movs	r3, #0
 8001178:	e003      	b.n	8001182 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f000 ff60 	bl	8002040 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001180:	e7d9      	b.n	8001136 <LoRa_transmit+0x5c>
	}
}
 8001182:	4618      	mov	r0, r3
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001192:	2105      	movs	r1, #5
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff fd10 	bl	8000bba <LoRa_gotoMode>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ff8b 	bl	80010c6 <LoRa_isvalid>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 8096 	beq.w	80012e4 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80011b8:	2100      	movs	r1, #0
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff fcfd 	bl	8000bba <LoRa_gotoMode>
			HAL_Delay(10);
 80011c0:	200a      	movs	r0, #10
 80011c2:	f000 ff3d 	bl	8002040 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80011c6:	2101      	movs	r1, #1
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff fefe 	bl	8000fca <LoRa_read>
 80011ce:	4603      	mov	r3, r0
 80011d0:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80011d2:	200a      	movs	r0, #10
 80011d4:	f000 ff34 	bl	8002040 <HAL_Delay>
			data = read | 0x80;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011de:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80011e0:	7bbb      	ldrb	r3, [r7, #14]
 80011e2:	461a      	mov	r2, r3
 80011e4:	2101      	movs	r1, #1
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ff09 	bl	8000ffe <LoRa_write>
			HAL_Delay(100);
 80011ec:	2064      	movs	r0, #100	@ 0x64
 80011ee:	f000 ff27 	bl	8002040 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a1b      	ldr	r3, [r3, #32]
 80011f6:	4619      	mov	r1, r3
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff fe17 	bl	8000e2c <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001204:	4619      	mov	r1, r3
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff fe72 	bl	8000ef0 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001212:	4619      	mov	r1, r3
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff fe7f 	bl	8000f18 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 800121a:	2223      	movs	r2, #35	@ 0x23
 800121c:	210c      	movs	r1, #12
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff feed 	bl	8000ffe <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff feb5 	bl	8000f94 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001230:	4619      	mov	r1, r3
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff fe2a 	bl	8000e8c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001238:	22ff      	movs	r2, #255	@ 0xff
 800123a:	211f      	movs	r1, #31
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fede 	bl	8000ffe <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	b2da      	uxtb	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4413      	add	r3, r2
 800125c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800125e:	7bbb      	ldrb	r3, [r7, #14]
 8001260:	461a      	mov	r2, r3
 8001262:	211d      	movs	r1, #29
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff feca 	bl	8000ffe <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff fda8 	bl	8000dc0 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	b29b      	uxth	r3, r3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	461a      	mov	r2, r3
 800127c:	2120      	movs	r1, #32
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff febd 	bl	8000ffe <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001288:	b2db      	uxtb	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	2121      	movs	r1, #33	@ 0x21
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff feb5 	bl	8000ffe <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001294:	2140      	movs	r1, #64	@ 0x40
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fe97 	bl	8000fca <LoRa_read>
 800129c:	4603      	mov	r3, r0
 800129e:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80012a6:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80012a8:	7bbb      	ldrb	r3, [r7, #14]
 80012aa:	461a      	mov	r2, r3
 80012ac:	2140      	movs	r1, #64	@ 0x40
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff fea5 	bl	8000ffe <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80012b4:	2101      	movs	r1, #1
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff fc7f 	bl	8000bba <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80012c2:	200a      	movs	r0, #10
 80012c4:	f000 febc 	bl	8002040 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80012c8:	2142      	movs	r1, #66	@ 0x42
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fe7d 	bl	8000fca <LoRa_read>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b12      	cmp	r3, #18
 80012d8:	d101      	bne.n	80012de <LoRa_init+0x13c>
				return LORA_OK;
 80012da:	23c8      	movs	r3, #200	@ 0xc8
 80012dc:	e004      	b.n	80012e8 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 80012de:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80012e2:	e001      	b.n	80012e8 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 80012e4:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <__io_putchar>:

float wind_speed = 0;
uint32_t wind_count = 0;
extern check;
int __io_putchar(int ch)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint8_t temp = ch;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart1, &temp, 1, HAL_MAX_DELAY);
 80012fe:	f107 010f 	add.w	r1, r7, #15
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	2201      	movs	r2, #1
 8001308:	4803      	ldr	r0, [pc, #12]	@ (8001318 <__io_putchar+0x28>)
 800130a:	f004 f823 	bl	8005354 <HAL_UART_Transmit>
  return ch;
 800130e:	687b      	ldr	r3, [r7, #4]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200002e4 	.word	0x200002e4
 800131c:	00000000 	.word	0x00000000

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b5b0      	push	{r4, r5, r7, lr}
 8001322:	b0d4      	sub	sp, #336	@ 0x150
 8001324:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001326:	f000 fe29 	bl	8001f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132a:	f000 f92f 	bl	800158c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132e:	f000 fa47 	bl	80017c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001332:	f000 fa1b 	bl	800176c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001336:	f000 f993 	bl	8001660 <MX_SPI1_Init>
  MX_I2C1_Init();
 800133a:	f000 f963 	bl	8001604 <MX_I2C1_Init>
  MX_TIM1_Init();
 800133e:	f000 f9c5 	bl	80016cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001342:	4881      	ldr	r0, [pc, #516]	@ (8001548 <main+0x228>)
 8001344:	f003 fd42 	bl	8004dcc <HAL_TIM_Base_Start>
  hdc1080_init(&hi2c1,Temperature_Resolution_14_bit,Humidity_Resolution_14_bit);
 8001348:	2200      	movs	r2, #0
 800134a:	2100      	movs	r1, #0
 800134c:	487f      	ldr	r0, [pc, #508]	@ (800154c <main+0x22c>)
 800134e:	f000 fd58 	bl	8001e02 <hdc1080_init>
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, 1);
 8001352:	2201      	movs	r2, #1
 8001354:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001358:	487d      	ldr	r0, [pc, #500]	@ (8001550 <main+0x230>)
 800135a:	f001 f927 	bl	80025ac <HAL_GPIO_WritePin>
  myLoRa = newLoRa();
 800135e:	4c7d      	ldr	r4, [pc, #500]	@ (8001554 <main+0x234>)
 8001360:	463b      	mov	r3, r7
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fc00 	bl	8000b68 <newLoRa>
 8001368:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800136c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001370:	461d      	mov	r5, r3
 8001372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800137e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 8001382:	4b74      	ldr	r3, [pc, #464]	@ (8001554 <main+0x234>)
 8001384:	4a74      	ldr	r2, [pc, #464]	@ (8001558 <main+0x238>)
 8001386:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 8001388:	4b72      	ldr	r3, [pc, #456]	@ (8001554 <main+0x234>)
 800138a:	2201      	movs	r2, #1
 800138c:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 800138e:	4b71      	ldr	r3, [pc, #452]	@ (8001554 <main+0x234>)
 8001390:	4a71      	ldr	r2, [pc, #452]	@ (8001558 <main+0x238>)
 8001392:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8001394:	4b6f      	ldr	r3, [pc, #444]	@ (8001554 <main+0x234>)
 8001396:	2202      	movs	r2, #2
 8001398:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 800139a:	4b6e      	ldr	r3, [pc, #440]	@ (8001554 <main+0x234>)
 800139c:	4a6f      	ldr	r2, [pc, #444]	@ (800155c <main+0x23c>)
 800139e:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 80013a0:	4b6c      	ldr	r3, [pc, #432]	@ (8001554 <main+0x234>)
 80013a2:	2210      	movs	r2, #16
 80013a4:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 80013a6:	4b6b      	ldr	r3, [pc, #428]	@ (8001554 <main+0x234>)
 80013a8:	4a6d      	ldr	r2, [pc, #436]	@ (8001560 <main+0x240>)
 80013aa:	619a      	str	r2, [r3, #24]


  myLoRa.frequency             = 433;             // default = 433 MHz
 80013ac:	4b69      	ldr	r3, [pc, #420]	@ (8001554 <main+0x234>)
 80013ae:	f240 12b1 	movw	r2, #433	@ 0x1b1
 80013b2:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 80013b4:	4b67      	ldr	r3, [pc, #412]	@ (8001554 <main+0x234>)
 80013b6:	2207      	movs	r2, #7
 80013b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 80013bc:	4b65      	ldr	r3, [pc, #404]	@ (8001554 <main+0x234>)
 80013be:	2207      	movs	r2, #7
 80013c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 80013c4:	4b63      	ldr	r3, [pc, #396]	@ (8001554 <main+0x234>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 80013cc:	4b61      	ldr	r3, [pc, #388]	@ (8001554 <main+0x234>)
 80013ce:	22ff      	movs	r2, #255	@ 0xff
 80013d0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 100;             // default = 100 mA
 80013d4:	4b5f      	ldr	r3, [pc, #380]	@ (8001554 <main+0x234>)
 80013d6:	2264      	movs	r2, #100	@ 0x64
 80013d8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 8;              // default = 8;
 80013dc:	4b5d      	ldr	r3, [pc, #372]	@ (8001554 <main+0x234>)
 80013de:	2208      	movs	r2, #8
 80013e0:	851a      	strh	r2, [r3, #40]	@ 0x28


  if(LoRa_init(&myLoRa)==LORA_OK){
 80013e2:	485c      	ldr	r0, [pc, #368]	@ (8001554 <main+0x234>)
 80013e4:	f7ff fedd 	bl	80011a2 <LoRa_init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2bc8      	cmp	r3, #200	@ 0xc8
 80013ec:	d108      	bne.n	8001400 <main+0xe0>
	  LoRa_stat = 1;
 80013ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001564 <main+0x244>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013fa:	4855      	ldr	r0, [pc, #340]	@ (8001550 <main+0x230>)
 80013fc:	f001 f8d6 	bl	80025ac <HAL_GPIO_WritePin>
  }

  LoRa_startReceiving(&myLoRa);
 8001400:	4854      	ldr	r0, [pc, #336]	@ (8001554 <main+0x234>)
 8001402:	f7ff fec2 	bl	800118a <LoRa_startReceiving>

  uint8_t TxBuffer[128];
  TxBuffer[0] = '2';
 8001406:	2332      	movs	r3, #50	@ 0x32
 8001408:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0
  TxBuffer[1] = '5';
 800140c:	2335      	movs	r3, #53	@ 0x35
 800140e:	f887 30b1 	strb.w	r3, [r7, #177]	@ 0xb1
  TxBuffer[2] = '&';
 8001412:	2326      	movs	r3, #38	@ 0x26
 8001414:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
  TxBuffer[3] = '6';
 8001418:	2336      	movs	r3, #54	@ 0x36
 800141a:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
  TxBuffer[4] = '7';
 800141e:	2337      	movs	r3, #55	@ 0x37
 8001420:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4


  uint8_t TxBuffer_1[128];
  TxBuffer_1[0] = 'H';
 8001424:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001428:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800142c:	2248      	movs	r2, #72	@ 0x48
 800142e:	701a      	strb	r2, [r3, #0]
  TxBuffer_1[1] = 'E';
 8001430:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001434:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001438:	2245      	movs	r2, #69	@ 0x45
 800143a:	705a      	strb	r2, [r3, #1]
  TxBuffer_1[2] = 'L';
 800143c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001440:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001444:	224c      	movs	r2, #76	@ 0x4c
 8001446:	709a      	strb	r2, [r3, #2]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(check == 1)
 8001448:	4b47      	ldr	r3, [pc, #284]	@ (8001568 <main+0x248>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d1fb      	bne.n	8001448 <main+0x128>
		{
			wind_speed = 0.48*wind_count;
 8001450:	4b46      	ldr	r3, [pc, #280]	@ (800156c <main+0x24c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe ffc5 	bl	80003e4 <__aeabi_ui2d>
 800145a:	a339      	add	r3, pc, #228	@ (adr r3, 8001540 <main+0x220>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f83a 	bl	80004d8 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff fb2c 	bl	8000ac8 <__aeabi_d2f>
 8001470:	4603      	mov	r3, r0
 8001472:	4a3f      	ldr	r2, [pc, #252]	@ (8001570 <main+0x250>)
 8001474:	6013      	str	r3, [r2, #0]
			check = 0;
 8001476:	4b3c      	ldr	r3, [pc, #240]	@ (8001568 <main+0x248>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
			wind_count = 0;
 800147c:	4b3b      	ldr	r3, [pc, #236]	@ (800156c <main+0x24c>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
			hdc1080_start_measurement(&hi2c1,(float*)&temp,(uint8_t*)&humi);
 8001482:	4a3c      	ldr	r2, [pc, #240]	@ (8001574 <main+0x254>)
 8001484:	493c      	ldr	r1, [pc, #240]	@ (8001578 <main+0x258>)
 8001486:	4831      	ldr	r0, [pc, #196]	@ (800154c <main+0x22c>)
 8001488:	f000 fcfa 	bl	8001e80 <hdc1080_start_measurement>
			snprintf(TxBuffer,sizeof(TxBuffer),"Toc do gio: %.2f, Luong mua: %d\r\nNhiet do: %.2f, Do am: %d\r\n",wind_speed,23,temp,humi);
 800148c:	4b38      	ldr	r3, [pc, #224]	@ (8001570 <main+0x250>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7fe ffc9 	bl	8000428 <__aeabi_f2d>
 8001496:	4604      	mov	r4, r0
 8001498:	460d      	mov	r5, r1
 800149a:	4b37      	ldr	r3, [pc, #220]	@ (8001578 <main+0x258>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7fe ffc2 	bl	8000428 <__aeabi_f2d>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4932      	ldr	r1, [pc, #200]	@ (8001574 <main+0x254>)
 80014aa:	7809      	ldrb	r1, [r1, #0]
 80014ac:	b2c9      	uxtb	r1, r1
 80014ae:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 80014b2:	9106      	str	r1, [sp, #24]
 80014b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80014b8:	2317      	movs	r3, #23
 80014ba:	9302      	str	r3, [sp, #8]
 80014bc:	e9cd 4500 	strd	r4, r5, [sp]
 80014c0:	4a2e      	ldr	r2, [pc, #184]	@ (800157c <main+0x25c>)
 80014c2:	2180      	movs	r1, #128	@ 0x80
 80014c4:	f004 fe4a 	bl	800615c <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 80014c8:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe fe3f 	bl	8000150 <strlen>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	4828      	ldr	r0, [pc, #160]	@ (8001580 <main+0x260>)
 80014e0:	f003 ff38 	bl	8005354 <HAL_UART_Transmit>
			LoRa_transmit(&myLoRa, TxBuffer, strlen(TxBuffer), 1000);
 80014e4:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe fe31 	bl	8000150 <strlen>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 80014f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014fa:	4816      	ldr	r0, [pc, #88]	@ (8001554 <main+0x234>)
 80014fc:	f7ff fded 	bl	80010da <LoRa_transmit>
			printf("Toc do gio: %.2f, Luong mua: %d\n",wind_speed,23);
 8001500:	4b1b      	ldr	r3, [pc, #108]	@ (8001570 <main+0x250>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe ff8f 	bl	8000428 <__aeabi_f2d>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	2117      	movs	r1, #23
 8001510:	9100      	str	r1, [sp, #0]
 8001512:	481c      	ldr	r0, [pc, #112]	@ (8001584 <main+0x264>)
 8001514:	f004 fe10 	bl	8006138 <iprintf>
			printf("Nhiet do: %.2f, Do am: %d\n",temp,humi);
 8001518:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <main+0x258>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe ff83 	bl	8000428 <__aeabi_f2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4913      	ldr	r1, [pc, #76]	@ (8001574 <main+0x254>)
 8001528:	7809      	ldrb	r1, [r1, #0]
 800152a:	b2c9      	uxtb	r1, r1
 800152c:	9100      	str	r1, [sp, #0]
 800152e:	4816      	ldr	r0, [pc, #88]	@ (8001588 <main+0x268>)
 8001530:	f004 fe02 	bl	8006138 <iprintf>
			HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
 8001534:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001538:	4805      	ldr	r0, [pc, #20]	@ (8001550 <main+0x230>)
 800153a:	f001 f84f 	bl	80025dc <HAL_GPIO_TogglePin>
		if(check == 1)
 800153e:	e783      	b.n	8001448 <main+0x128>
 8001540:	eb851eb8 	.word	0xeb851eb8
 8001544:	3fdeb851 	.word	0x3fdeb851
 8001548:	2000029c 	.word	0x2000029c
 800154c:	200001f0 	.word	0x200001f0
 8001550:	40011000 	.word	0x40011000
 8001554:	2000032c 	.word	0x2000032c
 8001558:	40010c00 	.word	0x40010c00
 800155c:	40010800 	.word	0x40010800
 8001560:	20000244 	.word	0x20000244
 8001564:	20000358 	.word	0x20000358
 8001568:	20000370 	.word	0x20000370
 800156c:	20000360 	.word	0x20000360
 8001570:	2000035c 	.word	0x2000035c
 8001574:	20000368 	.word	0x20000368
 8001578:	20000364 	.word	0x20000364
 800157c:	08008460 	.word	0x08008460
 8001580:	200002e4 	.word	0x200002e4
 8001584:	080084a0 	.word	0x080084a0
 8001588:	080084c4 	.word	0x080084c4

0800158c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b090      	sub	sp, #64	@ 0x40
 8001590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	f107 0318 	add.w	r3, r7, #24
 8001596:	2228      	movs	r2, #40	@ 0x28
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f004 fe55 	bl	800624a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b2:	2301      	movs	r3, #1
 80015b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b6:	2310      	movs	r3, #16
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015be:	f107 0318 	add.w	r3, r7, #24
 80015c2:	4618      	mov	r0, r3
 80015c4:	f002 fa00 	bl	80039c8 <HAL_RCC_OscConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015ce:	f000 f9b3 	bl	8001938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d2:	230f      	movs	r3, #15
 80015d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f002 fc6e 	bl	8003ecc <HAL_RCC_ClockConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015f6:	f000 f99f 	bl	8001938 <Error_Handler>
  }
}
 80015fa:	bf00      	nop
 80015fc:	3740      	adds	r7, #64	@ 0x40
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001608:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <MX_I2C1_Init+0x50>)
 800160a:	4a13      	ldr	r2, [pc, #76]	@ (8001658 <MX_I2C1_Init+0x54>)
 800160c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800160e:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <MX_I2C1_Init+0x50>)
 8001610:	4a12      	ldr	r2, [pc, #72]	@ (800165c <MX_I2C1_Init+0x58>)
 8001612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001614:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <MX_I2C1_Init+0x50>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800161a:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <MX_I2C1_Init+0x50>)
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <MX_I2C1_Init+0x50>)
 8001622:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001626:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001628:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <MX_I2C1_Init+0x50>)
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <MX_I2C1_Init+0x50>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001634:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <MX_I2C1_Init+0x50>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <MX_I2C1_Init+0x50>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	@ (8001654 <MX_I2C1_Init+0x50>)
 8001642:	f000 fffd 	bl	8002640 <HAL_I2C_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800164c:	f000 f974 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200001f0 	.word	0x200001f0
 8001658:	40005400 	.word	0x40005400
 800165c:	000186a0 	.word	0x000186a0

08001660 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001664:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <MX_SPI1_Init+0x64>)
 8001666:	4a18      	ldr	r2, [pc, #96]	@ (80016c8 <MX_SPI1_Init+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800166a:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <MX_SPI1_Init+0x64>)
 800166c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001670:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001672:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <MX_SPI1_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001678:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <MX_SPI1_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167e:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <MX_SPI1_Init+0x64>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001684:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <MX_SPI1_Init+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <MX_SPI1_Init+0x64>)
 800168c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001690:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001692:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <MX_SPI1_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001698:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <MX_SPI1_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <MX_SPI1_Init+0x64>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a4:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <MX_SPI1_Init+0x64>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <MX_SPI1_Init+0x64>)
 80016ac:	220a      	movs	r2, #10
 80016ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016b0:	4804      	ldr	r0, [pc, #16]	@ (80016c4 <MX_SPI1_Init+0x64>)
 80016b2:	f002 fd99 	bl	80041e8 <HAL_SPI_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016bc:	f000 f93c 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000244 	.word	0x20000244
 80016c8:	40013000 	.word	0x40013000

080016cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	463b      	mov	r3, r7
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001764 <MX_TIM1_Init+0x98>)
 80016ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001768 <MX_TIM1_Init+0x9c>)
 80016ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <MX_TIM1_Init+0x98>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <MX_TIM1_Init+0x98>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <MX_TIM1_Init+0x98>)
 80016fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001700:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001702:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <MX_TIM1_Init+0x98>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001708:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <MX_TIM1_Init+0x98>)
 800170a:	2200      	movs	r2, #0
 800170c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <MX_TIM1_Init+0x98>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001714:	4813      	ldr	r0, [pc, #76]	@ (8001764 <MX_TIM1_Init+0x98>)
 8001716:	f003 fb0a 	bl	8004d2e <HAL_TIM_Base_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001720:	f000 f90a 	bl	8001938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001728:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	4619      	mov	r1, r3
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <MX_TIM1_Init+0x98>)
 8001732:	f003 fb95 	bl	8004e60 <HAL_TIM_ConfigClockSource>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800173c:	f000 f8fc 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001748:	463b      	mov	r3, r7
 800174a:	4619      	mov	r1, r3
 800174c:	4805      	ldr	r0, [pc, #20]	@ (8001764 <MX_TIM1_Init+0x98>)
 800174e:	f003 fd53 	bl	80051f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001758:	f000 f8ee 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	2000029c 	.word	0x2000029c
 8001768:	40012c00 	.word	0x40012c00

0800176c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001772:	4a12      	ldr	r2, [pc, #72]	@ (80017bc <MX_USART1_UART_Init+0x50>)
 8001774:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001778:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800177c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800178a:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001790:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001792:	220c      	movs	r2, #12
 8001794:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001796:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017a2:	4805      	ldr	r0, [pc, #20]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 80017a4:	f003 fd86 	bl	80052b4 <HAL_UART_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017ae:	f000 f8c3 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200002e4 	.word	0x200002e4
 80017bc:	40013800 	.word	0x40013800

080017c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c6:	f107 0310 	add.w	r3, r7, #16
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d4:	4b42      	ldr	r3, [pc, #264]	@ (80018e0 <MX_GPIO_Init+0x120>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a41      	ldr	r2, [pc, #260]	@ (80018e0 <MX_GPIO_Init+0x120>)
 80017da:	f043 0310 	orr.w	r3, r3, #16
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b3f      	ldr	r3, [pc, #252]	@ (80018e0 <MX_GPIO_Init+0x120>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ec:	4b3c      	ldr	r3, [pc, #240]	@ (80018e0 <MX_GPIO_Init+0x120>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a3b      	ldr	r2, [pc, #236]	@ (80018e0 <MX_GPIO_Init+0x120>)
 80017f2:	f043 0320 	orr.w	r3, r3, #32
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b39      	ldr	r3, [pc, #228]	@ (80018e0 <MX_GPIO_Init+0x120>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0320 	and.w	r3, r3, #32
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	4b36      	ldr	r3, [pc, #216]	@ (80018e0 <MX_GPIO_Init+0x120>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a35      	ldr	r2, [pc, #212]	@ (80018e0 <MX_GPIO_Init+0x120>)
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b33      	ldr	r3, [pc, #204]	@ (80018e0 <MX_GPIO_Init+0x120>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181c:	4b30      	ldr	r3, [pc, #192]	@ (80018e0 <MX_GPIO_Init+0x120>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a2f      	ldr	r2, [pc, #188]	@ (80018e0 <MX_GPIO_Init+0x120>)
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <MX_GPIO_Init+0x120>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800183a:	482a      	ldr	r0, [pc, #168]	@ (80018e4 <MX_GPIO_Init+0x124>)
 800183c:	f000 feb6 	bl	80025ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8001840:	2201      	movs	r2, #1
 8001842:	2103      	movs	r1, #3
 8001844:	4828      	ldr	r0, [pc, #160]	@ (80018e8 <MX_GPIO_Init+0x128>)
 8001846:	f000 feb1 	bl	80025ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 800184a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800184e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2302      	movs	r3, #2
 800185a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	4619      	mov	r1, r3
 8001862:	4820      	ldr	r0, [pc, #128]	@ (80018e4 <MX_GPIO_Init+0x124>)
 8001864:	f000 fd1e 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001868:	2310      	movs	r3, #16
 800186a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800186c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ec <MX_GPIO_Init+0x12c>)
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	4619      	mov	r1, r3
 800187a:	481d      	ldr	r0, [pc, #116]	@ (80018f0 <MX_GPIO_Init+0x130>)
 800187c:	f000 fd12 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 8001880:	2303      	movs	r3, #3
 8001882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2302      	movs	r3, #2
 800188e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4619      	mov	r1, r3
 8001896:	4814      	ldr	r0, [pc, #80]	@ (80018e8 <MX_GPIO_Init+0x128>)
 8001898:	f000 fd04 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Wind_Pin */
  GPIO_InitStruct.Pin = Wind_Pin;
 800189c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018a2:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <MX_GPIO_Init+0x12c>)
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Wind_GPIO_Port, &GPIO_InitStruct);
 80018aa:	f107 0310 	add.w	r3, r7, #16
 80018ae:	4619      	mov	r1, r3
 80018b0:	480d      	ldr	r0, [pc, #52]	@ (80018e8 <MX_GPIO_Init+0x128>)
 80018b2:	f000 fcf7 	bl	80022a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	200a      	movs	r0, #10
 80018bc:	f000 fcbb 	bl	8002236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80018c0:	200a      	movs	r0, #10
 80018c2:	f000 fcd4 	bl	800226e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2028      	movs	r0, #40	@ 0x28
 80018cc:	f000 fcb3 	bl	8002236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018d0:	2028      	movs	r0, #40	@ 0x28
 80018d2:	f000 fccc 	bl	800226e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018d6:	bf00      	nop
 80018d8:	3720      	adds	r7, #32
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40011000 	.word	0x40011000
 80018e8:	40010c00 	.word	0x40010c00
 80018ec:	10110000 	.word	0x10110000
 80018f0:	40010800 	.word	0x40010800

080018f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == myLoRa.DIO0_pin){
 80018fe:	4b0b      	ldr	r3, [pc, #44]	@ (800192c <HAL_GPIO_EXTI_Callback+0x38>)
 8001900:	8a9b      	ldrh	r3, [r3, #20]
 8001902:	88fa      	ldrh	r2, [r7, #6]
 8001904:	429a      	cmp	r2, r3
 8001906:	d104      	bne.n	8001912 <HAL_GPIO_EXTI_Callback+0x1e>
		HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
 8001908:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800190c:	4808      	ldr	r0, [pc, #32]	@ (8001930 <HAL_GPIO_EXTI_Callback+0x3c>)
 800190e:	f000 fe65 	bl	80025dc <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == Wind_Pin)
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001918:	d104      	bne.n	8001924 <HAL_GPIO_EXTI_Callback+0x30>
	{
	//	HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
		wind_count++;
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_GPIO_EXTI_Callback+0x40>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	3301      	adds	r3, #1
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <HAL_GPIO_EXTI_Callback+0x40>)
 8001922:	6013      	str	r3, [r2, #0]
		//printf("%d\n",wind_count);

	}
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	2000032c 	.word	0x2000032c
 8001930:	40011000 	.word	0x40011000
 8001934:	20000360 	.word	0x20000360

08001938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800193c:	b672      	cpsid	i
}
 800193e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <Error_Handler+0x8>

08001944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <HAL_MspInit+0x5c>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	4a14      	ldr	r2, [pc, #80]	@ (80019a0 <HAL_MspInit+0x5c>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6193      	str	r3, [r2, #24]
 8001956:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <HAL_MspInit+0x5c>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <HAL_MspInit+0x5c>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4a0e      	ldr	r2, [pc, #56]	@ (80019a0 <HAL_MspInit+0x5c>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800196c:	61d3      	str	r3, [r2, #28]
 800196e:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <HAL_MspInit+0x5c>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800197a:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <HAL_MspInit+0x60>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <HAL_MspInit+0x60>)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010000 	.word	0x40010000

080019a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a15      	ldr	r2, [pc, #84]	@ (8001a18 <HAL_I2C_MspInit+0x70>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d123      	bne.n	8001a10 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c8:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <HAL_I2C_MspInit+0x74>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a13      	ldr	r2, [pc, #76]	@ (8001a1c <HAL_I2C_MspInit+0x74>)
 80019ce:	f043 0308 	orr.w	r3, r3, #8
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <HAL_I2C_MspInit+0x74>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019e0:	23c0      	movs	r3, #192	@ 0xc0
 80019e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e4:	2312      	movs	r3, #18
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	4619      	mov	r1, r3
 80019f2:	480b      	ldr	r0, [pc, #44]	@ (8001a20 <HAL_I2C_MspInit+0x78>)
 80019f4:	f000 fc56 	bl	80022a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f8:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <HAL_I2C_MspInit+0x74>)
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	4a07      	ldr	r2, [pc, #28]	@ (8001a1c <HAL_I2C_MspInit+0x74>)
 80019fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a02:	61d3      	str	r3, [r2, #28]
 8001a04:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <HAL_I2C_MspInit+0x74>)
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a10:	bf00      	nop
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40005400 	.word	0x40005400
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010c00 	.word	0x40010c00

08001a24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001aac <HAL_SPI_MspInit+0x88>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d12f      	bne.n	8001aa4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a44:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <HAL_SPI_MspInit+0x8c>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a19      	ldr	r2, [pc, #100]	@ (8001ab0 <HAL_SPI_MspInit+0x8c>)
 8001a4a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <HAL_SPI_MspInit+0x8c>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <HAL_SPI_MspInit+0x8c>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a13      	ldr	r2, [pc, #76]	@ (8001ab0 <HAL_SPI_MspInit+0x8c>)
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <HAL_SPI_MspInit+0x8c>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a74:	23a0      	movs	r3, #160	@ 0xa0
 8001a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	4619      	mov	r1, r3
 8001a86:	480b      	ldr	r0, [pc, #44]	@ (8001ab4 <HAL_SPI_MspInit+0x90>)
 8001a88:	f000 fc0c 	bl	80022a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a8c:	2340      	movs	r3, #64	@ 0x40
 8001a8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <HAL_SPI_MspInit+0x90>)
 8001aa0:	f000 fc00 	bl	80022a4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001aa4:	bf00      	nop
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40013000 	.word	0x40013000
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010800 	.word	0x40010800

08001ab8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a09      	ldr	r2, [pc, #36]	@ (8001aec <HAL_TIM_Base_MspInit+0x34>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d10b      	bne.n	8001ae2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <HAL_TIM_Base_MspInit+0x38>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	4a08      	ldr	r2, [pc, #32]	@ (8001af0 <HAL_TIM_Base_MspInit+0x38>)
 8001ad0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ad4:	6193      	str	r3, [r2, #24]
 8001ad6:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <HAL_TIM_Base_MspInit+0x38>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	40012c00 	.word	0x40012c00
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0310 	add.w	r3, r7, #16
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8001b80 <HAL_UART_MspInit+0x8c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d131      	bne.n	8001b78 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b14:	4b1b      	ldr	r3, [pc, #108]	@ (8001b84 <HAL_UART_MspInit+0x90>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a1a      	ldr	r2, [pc, #104]	@ (8001b84 <HAL_UART_MspInit+0x90>)
 8001b1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <HAL_UART_MspInit+0x90>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2c:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <HAL_UART_MspInit+0x90>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a14      	ldr	r2, [pc, #80]	@ (8001b84 <HAL_UART_MspInit+0x90>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <HAL_UART_MspInit+0x90>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b52:	f107 0310 	add.w	r3, r7, #16
 8001b56:	4619      	mov	r1, r3
 8001b58:	480b      	ldr	r0, [pc, #44]	@ (8001b88 <HAL_UART_MspInit+0x94>)
 8001b5a:	f000 fba3 	bl	80022a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	4619      	mov	r1, r3
 8001b72:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <HAL_UART_MspInit+0x94>)
 8001b74:	f000 fb96 	bl	80022a4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40013800 	.word	0x40013800
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010800 	.word	0x40010800

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <NMI_Handler+0x4>

08001b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <HardFault_Handler+0x4>

08001b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <MemManage_Handler+0x4>

08001ba4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <BusFault_Handler+0x4>

08001bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <UsageFault_Handler+0x4>

08001bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bdc:	f000 fa14 	bl	8002008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  count++;
 8001be0:	4b08      	ldr	r3, [pc, #32]	@ (8001c04 <SysTick_Handler+0x2c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3301      	adds	r3, #1
 8001be6:	4a07      	ldr	r2, [pc, #28]	@ (8001c04 <SysTick_Handler+0x2c>)
 8001be8:	6013      	str	r3, [r2, #0]

  if(count == 2000)
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <SysTick_Handler+0x2c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001bf2:	d105      	bne.n	8001c00 <SysTick_Handler+0x28>
  {
	  check = 1;
 8001bf4:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <SysTick_Handler+0x30>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	701a      	strb	r2, [r3, #0]
	  count = 0;
 8001bfa:	4b02      	ldr	r3, [pc, #8]	@ (8001c04 <SysTick_Handler+0x2c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2000036c 	.word	0x2000036c
 8001c08:	20000370 	.word	0x20000370

08001c0c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001c10:	2010      	movs	r0, #16
 8001c12:	f000 fcfd 	bl	8002610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Wind_Pin);
 8001c1e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001c22:	f000 fcf5 	bl	8002610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  return 1;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <_kill>:

int _kill(int pid, int sig)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c42:	f004 fb55 	bl	80062f0 <__errno>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2216      	movs	r2, #22
 8001c4a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_exit>:

void _exit (int status)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ffe7 	bl	8001c38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c6a:	bf00      	nop
 8001c6c:	e7fd      	b.n	8001c6a <_exit+0x12>

08001c6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	e00a      	b.n	8001c96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c80:	f3af 8000 	nop.w
 8001c84:	4601      	mov	r1, r0
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	60ba      	str	r2, [r7, #8]
 8001c8c:	b2ca      	uxtb	r2, r1
 8001c8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	3301      	adds	r3, #1
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	dbf0      	blt.n	8001c80 <_read+0x12>
  }

  return len;
 8001c9e:	687b      	ldr	r3, [r7, #4]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	e009      	b.n	8001cce <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	60ba      	str	r2, [r7, #8]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fb14 	bl	80012f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	dbf1      	blt.n	8001cba <_write+0x12>
  }
  return len;
 8001cd6:	687b      	ldr	r3, [r7, #4]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_close>:

int _close(int file)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d06:	605a      	str	r2, [r3, #4]
  return 0;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <_isatty>:

int _isatty(int file)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d48:	4a14      	ldr	r2, [pc, #80]	@ (8001d9c <_sbrk+0x5c>)
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <_sbrk+0x60>)
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d54:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <_sbrk+0x64>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	@ (8001da8 <_sbrk+0x68>)
 8001d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d62:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d207      	bcs.n	8001d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d70:	f004 fabe 	bl	80062f0 <__errno>
 8001d74:	4603      	mov	r3, r0
 8001d76:	220c      	movs	r2, #12
 8001d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	e009      	b.n	8001d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d80:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d86:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <_sbrk+0x64>)
 8001d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d92:	68fb      	ldr	r3, [r7, #12]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20005000 	.word	0x20005000
 8001da0:	00000400 	.word	0x00000400
 8001da4:	20000374 	.word	0x20000374
 8001da8:	200004c8 	.word	0x200004c8

08001dac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001db8:	f7ff fff8 	bl	8001dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dbc:	480b      	ldr	r0, [pc, #44]	@ (8001dec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dbe:	490c      	ldr	r1, [pc, #48]	@ (8001df0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001df4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a09      	ldr	r2, [pc, #36]	@ (8001df8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001dd4:	4c09      	ldr	r4, [pc, #36]	@ (8001dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001de2:	f004 fa8b 	bl	80062fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001de6:	f7ff fa9b 	bl	8001320 <main>
  bx lr
 8001dea:	4770      	bx	lr
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001df4:	08008888 	.word	0x08008888
  ldr r2, =_sbss
 8001df8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001dfc:	200004c8 	.word	0x200004c8

08001e00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC1_2_IRQHandler>

08001e02 <hdc1080_init>:
#include "hdc1080.h"
#include "stm32f1xx_hal_i2c.h"

void hdc1080_init(I2C_HandleTypeDef* hi2c_x,Temp_Reso Temperature_Resolution_x_bit,Humi_Reso Humidity_Resolution_x_bit)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b088      	sub	sp, #32
 8001e06:	af04      	add	r7, sp, #16
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	70fb      	strb	r3, [r7, #3]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	70bb      	strb	r3, [r7, #2]
	 * Default:   Temperature resolution = 14 bit,
	 *            Humidity resolution = 14 bit
	 */

	/* Set the acquisition mode to measure both temperature and humidity by setting Bit[12] to 1 */
	uint16_t config_reg_value=0x1000;
 8001e12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e16:	81fb      	strh	r3, [r7, #14]
	uint8_t data_send[2];

	if(Temperature_Resolution_x_bit == Temperature_Resolution_11_bit)
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d103      	bne.n	8001e26 <hdc1080_init+0x24>
	{
		config_reg_value |= (1<<10); //11 bit
 8001e1e:	89fb      	ldrh	r3, [r7, #14]
 8001e20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e24:	81fb      	strh	r3, [r7, #14]
	}

	switch(Humidity_Resolution_x_bit)
 8001e26:	78bb      	ldrb	r3, [r7, #2]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d002      	beq.n	8001e32 <hdc1080_init+0x30>
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d005      	beq.n	8001e3c <hdc1080_init+0x3a>
 8001e30:	e009      	b.n	8001e46 <hdc1080_init+0x44>
	{
	case Humidity_Resolution_11_bit:
		config_reg_value|= (1<<8);
 8001e32:	89fb      	ldrh	r3, [r7, #14]
 8001e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e38:	81fb      	strh	r3, [r7, #14]
		break;
 8001e3a:	e004      	b.n	8001e46 <hdc1080_init+0x44>
	case Humidity_Resolution_8_bit:
		config_reg_value|= (1<<9);
 8001e3c:	89fb      	ldrh	r3, [r7, #14]
 8001e3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e42:	81fb      	strh	r3, [r7, #14]
		break;
 8001e44:	bf00      	nop
	}

	data_send[0]= (config_reg_value>>8);
 8001e46:	89fb      	ldrh	r3, [r7, #14]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	733b      	strb	r3, [r7, #12]
	data_send[1]= (config_reg_value&0x00ff);
 8001e50:	89fb      	ldrh	r3, [r7, #14]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write(hi2c_x,HDC_1080_ADD<<1,Configuration_register_add,I2C_MEMADD_SIZE_8BIT,data_send,2,1000);
 8001e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e5a:	9302      	str	r3, [sp, #8]
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	2301      	movs	r3, #1
 8001e68:	2202      	movs	r2, #2
 8001e6a:	2180      	movs	r1, #128	@ 0x80
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f001 f895 	bl	8002f9c <HAL_I2C_Mem_Write>
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	0000      	movs	r0, r0
 8001e7c:	0000      	movs	r0, r0
	...

08001e80 <hdc1080_start_measurement>:


uint8_t hdc1080_start_measurement(I2C_HandleTypeDef* hi2c_x,float* temperature, uint8_t* humidity)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	@ 0x28
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
	uint8_t receive_data[4];
	uint16_t temp_x,humi_x;
	uint8_t send_data = Temperature_register_add;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	75fb      	strb	r3, [r7, #23]

	HAL_I2C_Master_Transmit(hi2c_x,HDC_1080_ADD<<1,&send_data,1,1000);
 8001e90:	f107 0217 	add.w	r2, r7, #23
 8001e94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	2180      	movs	r1, #128	@ 0x80
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 fd12 	bl	80028c8 <HAL_I2C_Master_Transmit>

	/* Delay here 15ms for conversion compelete.
	 * Note: datasheet say maximum is 7ms, but when delay=7ms, the read value is not correct
	 */
	HAL_Delay(15);
 8001ea4:	200f      	movs	r0, #15
 8001ea6:	f000 f8cb 	bl	8002040 <HAL_Delay>

	/* Read temperature and humidity */
	HAL_I2C_Master_Receive(hi2c_x,HDC_1080_ADD<<1,receive_data,4,1000);
 8001eaa:	f107 0218 	add.w	r2, r7, #24
 8001eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	2180      	movs	r1, #128	@ 0x80
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 fe03 	bl	8002ac4 <HAL_I2C_Master_Receive>


	temp_x =((receive_data[0]<<8)|receive_data[1]);
 8001ebe:	7e3b      	ldrb	r3, [r7, #24]
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	b21a      	sxth	r2, r3
 8001ec4:	7e7b      	ldrb	r3, [r7, #25]
 8001ec6:	b21b      	sxth	r3, r3
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	b21b      	sxth	r3, r3
 8001ecc:	83fb      	strh	r3, [r7, #30]
	humi_x =((receive_data[2]<<8)|receive_data[3]);
 8001ece:	7ebb      	ldrb	r3, [r7, #26]
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	b21a      	sxth	r2, r3
 8001ed4:	7efb      	ldrb	r3, [r7, #27]
 8001ed6:	b21b      	sxth	r3, r3
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	b21b      	sxth	r3, r3
 8001edc:	83bb      	strh	r3, [r7, #28]

	*temperature=((temp_x/65536.0)*165.0)-40.0;
 8001ede:	8bfb      	ldrh	r3, [r7, #30]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fa8f 	bl	8000404 <__aeabi_i2d>
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	4b21      	ldr	r3, [pc, #132]	@ (8001f70 <hdc1080_start_measurement+0xf0>)
 8001eec:	f7fe fc1e 	bl	800072c <__aeabi_ddiv>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	a31b      	add	r3, pc, #108	@ (adr r3, 8001f68 <hdc1080_start_measurement+0xe8>)
 8001efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efe:	f7fe faeb 	bl	80004d8 <__aeabi_dmul>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <hdc1080_start_measurement+0xf4>)
 8001f10:	f7fe f92a 	bl	8000168 <__aeabi_dsub>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7fe fdd4 	bl	8000ac8 <__aeabi_d2f>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	601a      	str	r2, [r3, #0]
	*humidity=(uint8_t)((humi_x/65536.0)*100.0);
 8001f26:	8bbb      	ldrh	r3, [r7, #28]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fa6b 	bl	8000404 <__aeabi_i2d>
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <hdc1080_start_measurement+0xf0>)
 8001f34:	f7fe fbfa 	bl	800072c <__aeabi_ddiv>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <hdc1080_start_measurement+0xf8>)
 8001f46:	f7fe fac7 	bl	80004d8 <__aeabi_dmul>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f7fe fd99 	bl	8000a88 <__aeabi_d2uiz>
 8001f56:	4603      	mov	r3, r0
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	701a      	strb	r2, [r3, #0]

	return 0;
 8001f5e:	2300      	movs	r3, #0

}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3720      	adds	r7, #32
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	00000000 	.word	0x00000000
 8001f6c:	4064a000 	.word	0x4064a000
 8001f70:	40f00000 	.word	0x40f00000
 8001f74:	40440000 	.word	0x40440000
 8001f78:	40590000 	.word	0x40590000

08001f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f80:	4b08      	ldr	r3, [pc, #32]	@ (8001fa4 <HAL_Init+0x28>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a07      	ldr	r2, [pc, #28]	@ (8001fa4 <HAL_Init+0x28>)
 8001f86:	f043 0310 	orr.w	r3, r3, #16
 8001f8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f000 f947 	bl	8002220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f92:	200f      	movs	r0, #15
 8001f94:	f000 f808 	bl	8001fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f98:	f7ff fcd4 	bl	8001944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40022000 	.word	0x40022000

08001fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb0:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_InitTick+0x54>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <HAL_InitTick+0x58>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f95f 	bl	800228a <HAL_SYSTICK_Config>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00e      	b.n	8001ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b0f      	cmp	r3, #15
 8001fda:	d80a      	bhi.n	8001ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f000 f927 	bl	8002236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe8:	4a06      	ldr	r2, [pc, #24]	@ (8002004 <HAL_InitTick+0x5c>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e000      	b.n	8001ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000000 	.word	0x20000000
 8002000:	20000008 	.word	0x20000008
 8002004:	20000004 	.word	0x20000004

08002008 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800200c:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <HAL_IncTick+0x1c>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <HAL_IncTick+0x20>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4413      	add	r3, r2
 8002018:	4a03      	ldr	r2, [pc, #12]	@ (8002028 <HAL_IncTick+0x20>)
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	20000008 	.word	0x20000008
 8002028:	20000378 	.word	0x20000378

0800202c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return uwTick;
 8002030:	4b02      	ldr	r3, [pc, #8]	@ (800203c <HAL_GetTick+0x10>)
 8002032:	681b      	ldr	r3, [r3, #0]
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	20000378 	.word	0x20000378

08002040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff fff0 	bl	800202c <HAL_GetTick>
 800204c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002058:	d005      	beq.n	8002066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800205a:	4b0a      	ldr	r3, [pc, #40]	@ (8002084 <HAL_Delay+0x44>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002066:	bf00      	nop
 8002068:	f7ff ffe0 	bl	800202c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	429a      	cmp	r2, r3
 8002076:	d8f7      	bhi.n	8002068 <HAL_Delay+0x28>
  {
  }
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000008 	.word	0x20000008

08002088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002098:	4b0c      	ldr	r3, [pc, #48]	@ (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020a4:	4013      	ands	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ba:	4a04      	ldr	r2, [pc, #16]	@ (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	60d3      	str	r3, [r2, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d4:	4b04      	ldr	r3, [pc, #16]	@ (80020e8 <__NVIC_GetPriorityGrouping+0x18>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	f003 0307 	and.w	r3, r3, #7
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	db0b      	blt.n	8002116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	4906      	ldr	r1, [pc, #24]	@ (8002120 <__NVIC_EnableIRQ+0x34>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	2001      	movs	r0, #1
 800210e:	fa00 f202 	lsl.w	r2, r0, r2
 8002112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	e000e100 	.word	0xe000e100

08002124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	6039      	str	r1, [r7, #0]
 800212e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002134:	2b00      	cmp	r3, #0
 8002136:	db0a      	blt.n	800214e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	490c      	ldr	r1, [pc, #48]	@ (8002170 <__NVIC_SetPriority+0x4c>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	0112      	lsls	r2, r2, #4
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	440b      	add	r3, r1
 8002148:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800214c:	e00a      	b.n	8002164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4908      	ldr	r1, [pc, #32]	@ (8002174 <__NVIC_SetPriority+0x50>)
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	3b04      	subs	r3, #4
 800215c:	0112      	lsls	r2, r2, #4
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	440b      	add	r3, r1
 8002162:	761a      	strb	r2, [r3, #24]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000e100 	.word	0xe000e100
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	@ 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f1c3 0307 	rsb	r3, r3, #7
 8002192:	2b04      	cmp	r3, #4
 8002194:	bf28      	it	cs
 8002196:	2304      	movcs	r3, #4
 8002198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3304      	adds	r3, #4
 800219e:	2b06      	cmp	r3, #6
 80021a0:	d902      	bls.n	80021a8 <NVIC_EncodePriority+0x30>
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3b03      	subs	r3, #3
 80021a6:	e000      	b.n	80021aa <NVIC_EncodePriority+0x32>
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ac:	f04f 32ff 	mov.w	r2, #4294967295
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43da      	mvns	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	401a      	ands	r2, r3
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c0:	f04f 31ff 	mov.w	r1, #4294967295
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	43d9      	mvns	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	4313      	orrs	r3, r2
         );
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3724      	adds	r7, #36	@ 0x24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021ec:	d301      	bcc.n	80021f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ee:	2301      	movs	r3, #1
 80021f0:	e00f      	b.n	8002212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f2:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <SysTick_Config+0x40>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021fa:	210f      	movs	r1, #15
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	f7ff ff90 	bl	8002124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <SysTick_Config+0x40>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220a:	4b04      	ldr	r3, [pc, #16]	@ (800221c <SysTick_Config+0x40>)
 800220c:	2207      	movs	r2, #7
 800220e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	e000e010 	.word	0xe000e010

08002220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ff2d 	bl	8002088 <__NVIC_SetPriorityGrouping>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002248:	f7ff ff42 	bl	80020d0 <__NVIC_GetPriorityGrouping>
 800224c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	6978      	ldr	r0, [r7, #20]
 8002254:	f7ff ff90 	bl	8002178 <NVIC_EncodePriority>
 8002258:	4602      	mov	r2, r0
 800225a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff5f 	bl	8002124 <__NVIC_SetPriority>
}
 8002266:	bf00      	nop
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff35 	bl	80020ec <__NVIC_EnableIRQ>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ffa2 	bl	80021dc <SysTick_Config>
 8002298:	4603      	mov	r3, r0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b08b      	sub	sp, #44	@ 0x2c
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b6:	e169      	b.n	800258c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022b8:	2201      	movs	r2, #1
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f040 8158 	bne.w	8002586 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4a9a      	ldr	r2, [pc, #616]	@ (8002544 <HAL_GPIO_Init+0x2a0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d05e      	beq.n	800239e <HAL_GPIO_Init+0xfa>
 80022e0:	4a98      	ldr	r2, [pc, #608]	@ (8002544 <HAL_GPIO_Init+0x2a0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d875      	bhi.n	80023d2 <HAL_GPIO_Init+0x12e>
 80022e6:	4a98      	ldr	r2, [pc, #608]	@ (8002548 <HAL_GPIO_Init+0x2a4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d058      	beq.n	800239e <HAL_GPIO_Init+0xfa>
 80022ec:	4a96      	ldr	r2, [pc, #600]	@ (8002548 <HAL_GPIO_Init+0x2a4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d86f      	bhi.n	80023d2 <HAL_GPIO_Init+0x12e>
 80022f2:	4a96      	ldr	r2, [pc, #600]	@ (800254c <HAL_GPIO_Init+0x2a8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d052      	beq.n	800239e <HAL_GPIO_Init+0xfa>
 80022f8:	4a94      	ldr	r2, [pc, #592]	@ (800254c <HAL_GPIO_Init+0x2a8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d869      	bhi.n	80023d2 <HAL_GPIO_Init+0x12e>
 80022fe:	4a94      	ldr	r2, [pc, #592]	@ (8002550 <HAL_GPIO_Init+0x2ac>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d04c      	beq.n	800239e <HAL_GPIO_Init+0xfa>
 8002304:	4a92      	ldr	r2, [pc, #584]	@ (8002550 <HAL_GPIO_Init+0x2ac>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d863      	bhi.n	80023d2 <HAL_GPIO_Init+0x12e>
 800230a:	4a92      	ldr	r2, [pc, #584]	@ (8002554 <HAL_GPIO_Init+0x2b0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d046      	beq.n	800239e <HAL_GPIO_Init+0xfa>
 8002310:	4a90      	ldr	r2, [pc, #576]	@ (8002554 <HAL_GPIO_Init+0x2b0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d85d      	bhi.n	80023d2 <HAL_GPIO_Init+0x12e>
 8002316:	2b12      	cmp	r3, #18
 8002318:	d82a      	bhi.n	8002370 <HAL_GPIO_Init+0xcc>
 800231a:	2b12      	cmp	r3, #18
 800231c:	d859      	bhi.n	80023d2 <HAL_GPIO_Init+0x12e>
 800231e:	a201      	add	r2, pc, #4	@ (adr r2, 8002324 <HAL_GPIO_Init+0x80>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	0800239f 	.word	0x0800239f
 8002328:	08002379 	.word	0x08002379
 800232c:	0800238b 	.word	0x0800238b
 8002330:	080023cd 	.word	0x080023cd
 8002334:	080023d3 	.word	0x080023d3
 8002338:	080023d3 	.word	0x080023d3
 800233c:	080023d3 	.word	0x080023d3
 8002340:	080023d3 	.word	0x080023d3
 8002344:	080023d3 	.word	0x080023d3
 8002348:	080023d3 	.word	0x080023d3
 800234c:	080023d3 	.word	0x080023d3
 8002350:	080023d3 	.word	0x080023d3
 8002354:	080023d3 	.word	0x080023d3
 8002358:	080023d3 	.word	0x080023d3
 800235c:	080023d3 	.word	0x080023d3
 8002360:	080023d3 	.word	0x080023d3
 8002364:	080023d3 	.word	0x080023d3
 8002368:	08002381 	.word	0x08002381
 800236c:	08002395 	.word	0x08002395
 8002370:	4a79      	ldr	r2, [pc, #484]	@ (8002558 <HAL_GPIO_Init+0x2b4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002376:	e02c      	b.n	80023d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	623b      	str	r3, [r7, #32]
          break;
 800237e:	e029      	b.n	80023d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	3304      	adds	r3, #4
 8002386:	623b      	str	r3, [r7, #32]
          break;
 8002388:	e024      	b.n	80023d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	3308      	adds	r3, #8
 8002390:	623b      	str	r3, [r7, #32]
          break;
 8002392:	e01f      	b.n	80023d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	330c      	adds	r3, #12
 800239a:	623b      	str	r3, [r7, #32]
          break;
 800239c:	e01a      	b.n	80023d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d102      	bne.n	80023ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023a6:	2304      	movs	r3, #4
 80023a8:	623b      	str	r3, [r7, #32]
          break;
 80023aa:	e013      	b.n	80023d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d105      	bne.n	80023c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023b4:	2308      	movs	r3, #8
 80023b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	611a      	str	r2, [r3, #16]
          break;
 80023be:	e009      	b.n	80023d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023c0:	2308      	movs	r3, #8
 80023c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	615a      	str	r2, [r3, #20]
          break;
 80023ca:	e003      	b.n	80023d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023cc:	2300      	movs	r3, #0
 80023ce:	623b      	str	r3, [r7, #32]
          break;
 80023d0:	e000      	b.n	80023d4 <HAL_GPIO_Init+0x130>
          break;
 80023d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	2bff      	cmp	r3, #255	@ 0xff
 80023d8:	d801      	bhi.n	80023de <HAL_GPIO_Init+0x13a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	e001      	b.n	80023e2 <HAL_GPIO_Init+0x13e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3304      	adds	r3, #4
 80023e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	2bff      	cmp	r3, #255	@ 0xff
 80023e8:	d802      	bhi.n	80023f0 <HAL_GPIO_Init+0x14c>
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	e002      	b.n	80023f6 <HAL_GPIO_Init+0x152>
 80023f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f2:	3b08      	subs	r3, #8
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	210f      	movs	r1, #15
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	401a      	ands	r2, r3
 8002408:	6a39      	ldr	r1, [r7, #32]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	431a      	orrs	r2, r3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80b1 	beq.w	8002586 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002424:	4b4d      	ldr	r3, [pc, #308]	@ (800255c <HAL_GPIO_Init+0x2b8>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	4a4c      	ldr	r2, [pc, #304]	@ (800255c <HAL_GPIO_Init+0x2b8>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6193      	str	r3, [r2, #24]
 8002430:	4b4a      	ldr	r3, [pc, #296]	@ (800255c <HAL_GPIO_Init+0x2b8>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800243c:	4a48      	ldr	r2, [pc, #288]	@ (8002560 <HAL_GPIO_Init+0x2bc>)
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	3302      	adds	r3, #2
 8002444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002448:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	220f      	movs	r2, #15
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4013      	ands	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a40      	ldr	r2, [pc, #256]	@ (8002564 <HAL_GPIO_Init+0x2c0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d013      	beq.n	8002490 <HAL_GPIO_Init+0x1ec>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a3f      	ldr	r2, [pc, #252]	@ (8002568 <HAL_GPIO_Init+0x2c4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00d      	beq.n	800248c <HAL_GPIO_Init+0x1e8>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a3e      	ldr	r2, [pc, #248]	@ (800256c <HAL_GPIO_Init+0x2c8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d007      	beq.n	8002488 <HAL_GPIO_Init+0x1e4>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a3d      	ldr	r2, [pc, #244]	@ (8002570 <HAL_GPIO_Init+0x2cc>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d101      	bne.n	8002484 <HAL_GPIO_Init+0x1e0>
 8002480:	2303      	movs	r3, #3
 8002482:	e006      	b.n	8002492 <HAL_GPIO_Init+0x1ee>
 8002484:	2304      	movs	r3, #4
 8002486:	e004      	b.n	8002492 <HAL_GPIO_Init+0x1ee>
 8002488:	2302      	movs	r3, #2
 800248a:	e002      	b.n	8002492 <HAL_GPIO_Init+0x1ee>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <HAL_GPIO_Init+0x1ee>
 8002490:	2300      	movs	r3, #0
 8002492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002494:	f002 0203 	and.w	r2, r2, #3
 8002498:	0092      	lsls	r2, r2, #2
 800249a:	4093      	lsls	r3, r2
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024a2:	492f      	ldr	r1, [pc, #188]	@ (8002560 <HAL_GPIO_Init+0x2bc>)
 80024a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	3302      	adds	r3, #2
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d006      	beq.n	80024ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	492c      	ldr	r1, [pc, #176]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	608b      	str	r3, [r1, #8]
 80024c8:	e006      	b.n	80024d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	4928      	ldr	r1, [pc, #160]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d006      	beq.n	80024f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024e4:	4b23      	ldr	r3, [pc, #140]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	4922      	ldr	r1, [pc, #136]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60cb      	str	r3, [r1, #12]
 80024f0:	e006      	b.n	8002500 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024f2:	4b20      	ldr	r3, [pc, #128]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	491e      	ldr	r1, [pc, #120]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d006      	beq.n	800251a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800250c:	4b19      	ldr	r3, [pc, #100]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	4918      	ldr	r1, [pc, #96]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800251a:	4b16      	ldr	r3, [pc, #88]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	43db      	mvns	r3, r3
 8002522:	4914      	ldr	r1, [pc, #80]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 8002524:	4013      	ands	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d021      	beq.n	8002578 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002534:	4b0f      	ldr	r3, [pc, #60]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	490e      	ldr	r1, [pc, #56]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]
 8002540:	e021      	b.n	8002586 <HAL_GPIO_Init+0x2e2>
 8002542:	bf00      	nop
 8002544:	10320000 	.word	0x10320000
 8002548:	10310000 	.word	0x10310000
 800254c:	10220000 	.word	0x10220000
 8002550:	10210000 	.word	0x10210000
 8002554:	10120000 	.word	0x10120000
 8002558:	10110000 	.word	0x10110000
 800255c:	40021000 	.word	0x40021000
 8002560:	40010000 	.word	0x40010000
 8002564:	40010800 	.word	0x40010800
 8002568:	40010c00 	.word	0x40010c00
 800256c:	40011000 	.word	0x40011000
 8002570:	40011400 	.word	0x40011400
 8002574:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <HAL_GPIO_Init+0x304>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	43db      	mvns	r3, r3
 8002580:	4909      	ldr	r1, [pc, #36]	@ (80025a8 <HAL_GPIO_Init+0x304>)
 8002582:	4013      	ands	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	3301      	adds	r3, #1
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	fa22 f303 	lsr.w	r3, r2, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	f47f ae8e 	bne.w	80022b8 <HAL_GPIO_Init+0x14>
  }
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	372c      	adds	r7, #44	@ 0x2c
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	40010400 	.word	0x40010400

080025ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	807b      	strh	r3, [r7, #2]
 80025b8:	4613      	mov	r3, r2
 80025ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025bc:	787b      	ldrb	r3, [r7, #1]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025c8:	e003      	b.n	80025d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025ca:	887b      	ldrh	r3, [r7, #2]
 80025cc:	041a      	lsls	r2, r3, #16
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	611a      	str	r2, [r3, #16]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4013      	ands	r3, r2
 80025f4:	041a      	lsls	r2, r3, #16
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	43d9      	mvns	r1, r3
 80025fa:	887b      	ldrh	r3, [r7, #2]
 80025fc:	400b      	ands	r3, r1
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	611a      	str	r2, [r3, #16]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
	...

08002610 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800261a:	4b08      	ldr	r3, [pc, #32]	@ (800263c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	4013      	ands	r3, r2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d006      	beq.n	8002634 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002626:	4a05      	ldr	r2, [pc, #20]	@ (800263c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff f960 	bl	80018f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40010400 	.word	0x40010400

08002640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e12b      	b.n	80028aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff f99e 	bl	80019a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2224      	movs	r2, #36	@ 0x24
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002692:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026a4:	f001 fd5a 	bl	800415c <HAL_RCC_GetPCLK1Freq>
 80026a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4a81      	ldr	r2, [pc, #516]	@ (80028b4 <HAL_I2C_Init+0x274>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d807      	bhi.n	80026c4 <HAL_I2C_Init+0x84>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4a80      	ldr	r2, [pc, #512]	@ (80028b8 <HAL_I2C_Init+0x278>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	bf94      	ite	ls
 80026bc:	2301      	movls	r3, #1
 80026be:	2300      	movhi	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	e006      	b.n	80026d2 <HAL_I2C_Init+0x92>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a7d      	ldr	r2, [pc, #500]	@ (80028bc <HAL_I2C_Init+0x27c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	bf94      	ite	ls
 80026cc:	2301      	movls	r3, #1
 80026ce:	2300      	movhi	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e0e7      	b.n	80028aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4a78      	ldr	r2, [pc, #480]	@ (80028c0 <HAL_I2C_Init+0x280>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0c9b      	lsrs	r3, r3, #18
 80026e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a6a      	ldr	r2, [pc, #424]	@ (80028b4 <HAL_I2C_Init+0x274>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d802      	bhi.n	8002714 <HAL_I2C_Init+0xd4>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3301      	adds	r3, #1
 8002712:	e009      	b.n	8002728 <HAL_I2C_Init+0xe8>
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	4a69      	ldr	r2, [pc, #420]	@ (80028c4 <HAL_I2C_Init+0x284>)
 8002720:	fba2 2303 	umull	r2, r3, r2, r3
 8002724:	099b      	lsrs	r3, r3, #6
 8002726:	3301      	adds	r3, #1
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	430b      	orrs	r3, r1
 800272e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800273a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	495c      	ldr	r1, [pc, #368]	@ (80028b4 <HAL_I2C_Init+0x274>)
 8002744:	428b      	cmp	r3, r1
 8002746:	d819      	bhi.n	800277c <HAL_I2C_Init+0x13c>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1e59      	subs	r1, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	fbb1 f3f3 	udiv	r3, r1, r3
 8002756:	1c59      	adds	r1, r3, #1
 8002758:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800275c:	400b      	ands	r3, r1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_I2C_Init+0x138>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1e59      	subs	r1, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002770:	3301      	adds	r3, #1
 8002772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002776:	e051      	b.n	800281c <HAL_I2C_Init+0x1dc>
 8002778:	2304      	movs	r3, #4
 800277a:	e04f      	b.n	800281c <HAL_I2C_Init+0x1dc>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d111      	bne.n	80027a8 <HAL_I2C_Init+0x168>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1e58      	subs	r0, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	440b      	add	r3, r1
 8002792:	fbb0 f3f3 	udiv	r3, r0, r3
 8002796:	3301      	adds	r3, #1
 8002798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf0c      	ite	eq
 80027a0:	2301      	moveq	r3, #1
 80027a2:	2300      	movne	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e012      	b.n	80027ce <HAL_I2C_Init+0x18e>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1e58      	subs	r0, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	0099      	lsls	r1, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80027be:	3301      	adds	r3, #1
 80027c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Init+0x196>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e022      	b.n	800281c <HAL_I2C_Init+0x1dc>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10e      	bne.n	80027fc <HAL_I2C_Init+0x1bc>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1e58      	subs	r0, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6859      	ldr	r1, [r3, #4]
 80027e6:	460b      	mov	r3, r1
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	440b      	add	r3, r1
 80027ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f0:	3301      	adds	r3, #1
 80027f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027fa:	e00f      	b.n	800281c <HAL_I2C_Init+0x1dc>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1e58      	subs	r0, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	0099      	lsls	r1, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002812:	3301      	adds	r3, #1
 8002814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002818:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	6809      	ldr	r1, [r1, #0]
 8002820:	4313      	orrs	r3, r2
 8002822:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800284a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6911      	ldr	r1, [r2, #16]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68d2      	ldr	r2, [r2, #12]
 8002856:	4311      	orrs	r1, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	430b      	orrs	r3, r1
 800285e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	000186a0 	.word	0x000186a0
 80028b8:	001e847f 	.word	0x001e847f
 80028bc:	003d08ff 	.word	0x003d08ff
 80028c0:	431bde83 	.word	0x431bde83
 80028c4:	10624dd3 	.word	0x10624dd3

080028c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	461a      	mov	r2, r3
 80028d4:	460b      	mov	r3, r1
 80028d6:	817b      	strh	r3, [r7, #10]
 80028d8:	4613      	mov	r3, r2
 80028da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff fba6 	bl	800202c <HAL_GetTick>
 80028e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	f040 80e0 	bne.w	8002ab0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2319      	movs	r3, #25
 80028f6:	2201      	movs	r2, #1
 80028f8:	4970      	ldr	r1, [pc, #448]	@ (8002abc <HAL_I2C_Master_Transmit+0x1f4>)
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fe2e 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002906:	2302      	movs	r3, #2
 8002908:	e0d3      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_I2C_Master_Transmit+0x50>
 8002914:	2302      	movs	r3, #2
 8002916:	e0cc      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	d007      	beq.n	800293e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800294c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2221      	movs	r2, #33	@ 0x21
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2210      	movs	r2, #16
 800295a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	893a      	ldrh	r2, [r7, #8]
 800296e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a50      	ldr	r2, [pc, #320]	@ (8002ac0 <HAL_I2C_Master_Transmit+0x1f8>)
 800297e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002980:	8979      	ldrh	r1, [r7, #10]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	6a3a      	ldr	r2, [r7, #32]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fc02 	bl	8003190 <I2C_MasterRequestWrite>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e08d      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029ac:	e066      	b.n	8002a7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	6a39      	ldr	r1, [r7, #32]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 feec 	bl	8003790 <I2C_WaitOnTXEFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00d      	beq.n	80029da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d107      	bne.n	80029d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e06b      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	781a      	ldrb	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d11b      	bne.n	8002a50 <HAL_I2C_Master_Transmit+0x188>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d017      	beq.n	8002a50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	781a      	ldrb	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	6a39      	ldr	r1, [r7, #32]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 fee3 	bl	8003820 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00d      	beq.n	8002a7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d107      	bne.n	8002a78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e01a      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d194      	bne.n	80029ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e000      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	00100002 	.word	0x00100002
 8002ac0:	ffff0000 	.word	0xffff0000

08002ac4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08c      	sub	sp, #48	@ 0x30
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	817b      	strh	r3, [r7, #10]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002adc:	f7ff faa6 	bl	800202c <HAL_GetTick>
 8002ae0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b20      	cmp	r3, #32
 8002aec:	f040 824b 	bne.w	8002f86 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	2319      	movs	r3, #25
 8002af6:	2201      	movs	r2, #1
 8002af8:	497f      	ldr	r1, [pc, #508]	@ (8002cf8 <HAL_I2C_Master_Receive+0x234>)
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 fd2e 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
 8002b08:	e23e      	b.n	8002f88 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_I2C_Master_Receive+0x54>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e237      	b.n	8002f88 <HAL_I2C_Master_Receive+0x4c4>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d007      	beq.n	8002b3e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 0201 	orr.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2222      	movs	r2, #34	@ 0x22
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2210      	movs	r2, #16
 8002b5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	893a      	ldrh	r2, [r7, #8]
 8002b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4a5f      	ldr	r2, [pc, #380]	@ (8002cfc <HAL_I2C_Master_Receive+0x238>)
 8002b7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b80:	8979      	ldrh	r1, [r7, #10]
 8002b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 fb84 	bl	8003294 <I2C_MasterRequestRead>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e1f8      	b.n	8002f88 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d113      	bne.n	8002bc6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	e1cc      	b.n	8002f60 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d11e      	bne.n	8002c0c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bdc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bde:	b672      	cpsid	i
}
 8002be0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c08:	b662      	cpsie	i
}
 8002c0a:	e035      	b.n	8002c78 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d11e      	bne.n	8002c52 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c24:	b672      	cpsid	i
}
 8002c26:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c4e:	b662      	cpsie	i
}
 8002c50:	e012      	b.n	8002c78 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c78:	e172      	b.n	8002f60 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	f200 811f 	bhi.w	8002ec2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d123      	bne.n	8002cd4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fe0d 	bl	80038b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e173      	b.n	8002f88 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cd2:	e145      	b.n	8002f60 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d152      	bne.n	8002d82 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	4906      	ldr	r1, [pc, #24]	@ (8002d00 <HAL_I2C_Master_Receive+0x23c>)
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 fc38 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e148      	b.n	8002f88 <HAL_I2C_Master_Receive+0x4c4>
 8002cf6:	bf00      	nop
 8002cf8:	00100002 	.word	0x00100002
 8002cfc:	ffff0000 	.word	0xffff0000
 8002d00:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002d04:	b672      	cpsid	i
}
 8002d06:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d4a:	b662      	cpsie	i
}
 8002d4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d80:	e0ee      	b.n	8002f60 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d88:	2200      	movs	r2, #0
 8002d8a:	4981      	ldr	r1, [pc, #516]	@ (8002f90 <HAL_I2C_Master_Receive+0x4cc>)
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fbe5 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0f5      	b.n	8002f88 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002daa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dac:	b672      	cpsid	i
}
 8002dae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002de2:	4b6c      	ldr	r3, [pc, #432]	@ (8002f94 <HAL_I2C_Master_Receive+0x4d0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	08db      	lsrs	r3, r3, #3
 8002de8:	4a6b      	ldr	r2, [pc, #428]	@ (8002f98 <HAL_I2C_Master_Receive+0x4d4>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	0a1a      	lsrs	r2, r3, #8
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00da      	lsls	r2, r3, #3
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d118      	bne.n	8002e3a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	f043 0220 	orr.w	r2, r3, #32
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002e2a:	b662      	cpsie	i
}
 8002e2c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e0a6      	b.n	8002f88 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d1d9      	bne.n	8002dfc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e8a:	b662      	cpsie	i
}
 8002e8c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ec0:	e04e      	b.n	8002f60 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 fcf2 	bl	80038b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e058      	b.n	8002f88 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d124      	bne.n	8002f60 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d107      	bne.n	8002f2e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f2c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f47f ae88 	bne.w	8002c7a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e000      	b.n	8002f88 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
  }
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3728      	adds	r7, #40	@ 0x28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	00010004 	.word	0x00010004
 8002f94:	20000000 	.word	0x20000000
 8002f98:	14f8b589 	.word	0x14f8b589

08002f9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	4608      	mov	r0, r1
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4603      	mov	r3, r0
 8002fac:	817b      	strh	r3, [r7, #10]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	813b      	strh	r3, [r7, #8]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fb6:	f7ff f839 	bl	800202c <HAL_GetTick>
 8002fba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	f040 80d9 	bne.w	800317c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	2319      	movs	r3, #25
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	496d      	ldr	r1, [pc, #436]	@ (8003188 <HAL_I2C_Mem_Write+0x1ec>)
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 fac1 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e0cc      	b.n	800317e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_I2C_Mem_Write+0x56>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e0c5      	b.n	800317e <HAL_I2C_Mem_Write+0x1e2>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d007      	beq.n	8003018 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003026:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2221      	movs	r2, #33	@ 0x21
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2240      	movs	r2, #64	@ 0x40
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a3a      	ldr	r2, [r7, #32]
 8003042:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003048:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4a4d      	ldr	r2, [pc, #308]	@ (800318c <HAL_I2C_Mem_Write+0x1f0>)
 8003058:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800305a:	88f8      	ldrh	r0, [r7, #6]
 800305c:	893a      	ldrh	r2, [r7, #8]
 800305e:	8979      	ldrh	r1, [r7, #10]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	9301      	str	r3, [sp, #4]
 8003064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	4603      	mov	r3, r0
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f9e0 	bl	8003430 <I2C_RequestMemoryWrite>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d052      	beq.n	800311c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e081      	b.n	800317e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fb86 	bl	8003790 <I2C_WaitOnTXEFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	2b04      	cmp	r3, #4
 8003090:	d107      	bne.n	80030a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e06b      	b.n	800317e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d11b      	bne.n	800311c <HAL_I2C_Mem_Write+0x180>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d017      	beq.n	800311c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f0:	781a      	ldrb	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1aa      	bne.n	800307a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fb79 	bl	8003820 <I2C_WaitOnBTFFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00d      	beq.n	8003150 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	2b04      	cmp	r3, #4
 800313a:	d107      	bne.n	800314c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800314a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e016      	b.n	800317e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800315e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	e000      	b.n	800317e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800317c:	2302      	movs	r3, #2
  }
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	00100002 	.word	0x00100002
 800318c:	ffff0000 	.word	0xffff0000

08003190 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	460b      	mov	r3, r1
 800319e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d006      	beq.n	80031ba <I2C_MasterRequestWrite+0x2a>
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d003      	beq.n	80031ba <I2C_MasterRequestWrite+0x2a>
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031b8:	d108      	bne.n	80031cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	e00b      	b.n	80031e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d0:	2b12      	cmp	r3, #18
 80031d2:	d107      	bne.n	80031e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f9b3 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00d      	beq.n	8003218 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800320a:	d103      	bne.n	8003214 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003212:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e035      	b.n	8003284 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003220:	d108      	bne.n	8003234 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003222:	897b      	ldrh	r3, [r7, #10]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	461a      	mov	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003230:	611a      	str	r2, [r3, #16]
 8003232:	e01b      	b.n	800326c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003234:	897b      	ldrh	r3, [r7, #10]
 8003236:	11db      	asrs	r3, r3, #7
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f003 0306 	and.w	r3, r3, #6
 800323e:	b2db      	uxtb	r3, r3
 8003240:	f063 030f 	orn	r3, r3, #15
 8003244:	b2da      	uxtb	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	490e      	ldr	r1, [pc, #56]	@ (800328c <I2C_MasterRequestWrite+0xfc>)
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f9fc 	bl	8003650 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e010      	b.n	8003284 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003262:	897b      	ldrh	r3, [r7, #10]
 8003264:	b2da      	uxtb	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4907      	ldr	r1, [pc, #28]	@ (8003290 <I2C_MasterRequestWrite+0x100>)
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f9ec 	bl	8003650 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	00010008 	.word	0x00010008
 8003290:	00010002 	.word	0x00010002

08003294 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	460b      	mov	r3, r1
 80032a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d006      	beq.n	80032ce <I2C_MasterRequestRead+0x3a>
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d003      	beq.n	80032ce <I2C_MasterRequestRead+0x3a>
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032cc:	d108      	bne.n	80032e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	e00b      	b.n	80032f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	2b11      	cmp	r3, #17
 80032e6:	d107      	bne.n	80032f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f929 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00d      	beq.n	800332c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800331a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800331e:	d103      	bne.n	8003328 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003326:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e079      	b.n	8003420 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003334:	d108      	bne.n	8003348 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003336:	897b      	ldrh	r3, [r7, #10]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	b2da      	uxtb	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	611a      	str	r2, [r3, #16]
 8003346:	e05f      	b.n	8003408 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003348:	897b      	ldrh	r3, [r7, #10]
 800334a:	11db      	asrs	r3, r3, #7
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f003 0306 	and.w	r3, r3, #6
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f063 030f 	orn	r3, r3, #15
 8003358:	b2da      	uxtb	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4930      	ldr	r1, [pc, #192]	@ (8003428 <I2C_MasterRequestRead+0x194>)
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f972 	bl	8003650 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e054      	b.n	8003420 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003376:	897b      	ldrh	r3, [r7, #10]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	4929      	ldr	r1, [pc, #164]	@ (800342c <I2C_MasterRequestRead+0x198>)
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f962 	bl	8003650 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e044      	b.n	8003420 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f8c7 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00d      	beq.n	80033f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033e2:	d103      	bne.n	80033ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033ea:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e017      	b.n	8003420 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80033f0:	897b      	ldrh	r3, [r7, #10]
 80033f2:	11db      	asrs	r3, r3, #7
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f003 0306 	and.w	r3, r3, #6
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f063 030e 	orn	r3, r3, #14
 8003400:	b2da      	uxtb	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	4907      	ldr	r1, [pc, #28]	@ (800342c <I2C_MasterRequestRead+0x198>)
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f91e 	bl	8003650 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	00010008 	.word	0x00010008
 800342c:	00010002 	.word	0x00010002

08003430 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	4608      	mov	r0, r1
 800343a:	4611      	mov	r1, r2
 800343c:	461a      	mov	r2, r3
 800343e:	4603      	mov	r3, r0
 8003440:	817b      	strh	r3, [r7, #10]
 8003442:	460b      	mov	r3, r1
 8003444:	813b      	strh	r3, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003458:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800345a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	2200      	movs	r2, #0
 8003462:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f878 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00d      	beq.n	800348e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003480:	d103      	bne.n	800348a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003488:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e05f      	b.n	800354e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800348e:	897b      	ldrh	r3, [r7, #10]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800349c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800349e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a0:	6a3a      	ldr	r2, [r7, #32]
 80034a2:	492d      	ldr	r1, [pc, #180]	@ (8003558 <I2C_RequestMemoryWrite+0x128>)
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f8d3 	bl	8003650 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e04c      	b.n	800354e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034cc:	6a39      	ldr	r1, [r7, #32]
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f95e 	bl	8003790 <I2C_WaitOnTXEFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00d      	beq.n	80034f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d107      	bne.n	80034f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e02b      	b.n	800354e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034f6:	88fb      	ldrh	r3, [r7, #6]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d105      	bne.n	8003508 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034fc:	893b      	ldrh	r3, [r7, #8]
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	611a      	str	r2, [r3, #16]
 8003506:	e021      	b.n	800354c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003508:	893b      	ldrh	r3, [r7, #8]
 800350a:	0a1b      	lsrs	r3, r3, #8
 800350c:	b29b      	uxth	r3, r3
 800350e:	b2da      	uxtb	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003518:	6a39      	ldr	r1, [r7, #32]
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f938 	bl	8003790 <I2C_WaitOnTXEFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00d      	beq.n	8003542 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	2b04      	cmp	r3, #4
 800352c:	d107      	bne.n	800353e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800353c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e005      	b.n	800354e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003542:	893b      	ldrh	r3, [r7, #8]
 8003544:	b2da      	uxtb	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	00010002 	.word	0x00010002

0800355c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	4613      	mov	r3, r2
 800356a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800356c:	e048      	b.n	8003600 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003574:	d044      	beq.n	8003600 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003576:	f7fe fd59 	bl	800202c <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d302      	bcc.n	800358c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d139      	bne.n	8003600 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	0c1b      	lsrs	r3, r3, #16
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b01      	cmp	r3, #1
 8003594:	d10d      	bne.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	43da      	mvns	r2, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	4013      	ands	r3, r2
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf0c      	ite	eq
 80035a8:	2301      	moveq	r3, #1
 80035aa:	2300      	movne	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	461a      	mov	r2, r3
 80035b0:	e00c      	b.n	80035cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	43da      	mvns	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4013      	ands	r3, r2
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d116      	bne.n	8003600 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ec:	f043 0220 	orr.w	r2, r3, #32
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e023      	b.n	8003648 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	0c1b      	lsrs	r3, r3, #16
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b01      	cmp	r3, #1
 8003608:	d10d      	bne.n	8003626 <I2C_WaitOnFlagUntilTimeout+0xca>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	43da      	mvns	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4013      	ands	r3, r2
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf0c      	ite	eq
 800361c:	2301      	moveq	r3, #1
 800361e:	2300      	movne	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	e00c      	b.n	8003640 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	43da      	mvns	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4013      	ands	r3, r2
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	429a      	cmp	r2, r3
 8003644:	d093      	beq.n	800356e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800365e:	e071      	b.n	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800366a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800366e:	d123      	bne.n	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800367e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003688:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a4:	f043 0204 	orr.w	r2, r3, #4
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e067      	b.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036be:	d041      	beq.n	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c0:	f7fe fcb4 	bl	800202c <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d302      	bcc.n	80036d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d136      	bne.n	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	0c1b      	lsrs	r3, r3, #16
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d10c      	bne.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	43da      	mvns	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4013      	ands	r3, r2
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	bf14      	ite	ne
 80036f2:	2301      	movne	r3, #1
 80036f4:	2300      	moveq	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	e00b      	b.n	8003712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	43da      	mvns	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4013      	ands	r3, r2
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d016      	beq.n	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003730:	f043 0220 	orr.w	r2, r3, #32
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e021      	b.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	0c1b      	lsrs	r3, r3, #16
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b01      	cmp	r3, #1
 800374c:	d10c      	bne.n	8003768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	43da      	mvns	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4013      	ands	r3, r2
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	bf14      	ite	ne
 8003760:	2301      	movne	r3, #1
 8003762:	2300      	moveq	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	e00b      	b.n	8003780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	43da      	mvns	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4013      	ands	r3, r2
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	bf14      	ite	ne
 800377a:	2301      	movne	r3, #1
 800377c:	2300      	moveq	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	f47f af6d 	bne.w	8003660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800379c:	e034      	b.n	8003808 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f8e3 	bl	800396a <I2C_IsAcknowledgeFailed>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e034      	b.n	8003818 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d028      	beq.n	8003808 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b6:	f7fe fc39 	bl	800202c <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d302      	bcc.n	80037cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d11d      	bne.n	8003808 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d6:	2b80      	cmp	r3, #128	@ 0x80
 80037d8:	d016      	beq.n	8003808 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f4:	f043 0220 	orr.w	r2, r3, #32
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e007      	b.n	8003818 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003812:	2b80      	cmp	r3, #128	@ 0x80
 8003814:	d1c3      	bne.n	800379e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800382c:	e034      	b.n	8003898 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f89b 	bl	800396a <I2C_IsAcknowledgeFailed>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e034      	b.n	80038a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003844:	d028      	beq.n	8003898 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003846:	f7fe fbf1 	bl	800202c <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	429a      	cmp	r2, r3
 8003854:	d302      	bcc.n	800385c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d11d      	bne.n	8003898 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b04      	cmp	r3, #4
 8003868:	d016      	beq.n	8003898 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	f043 0220 	orr.w	r2, r3, #32
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e007      	b.n	80038a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d1c3      	bne.n	800382e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038bc:	e049      	b.n	8003952 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b10      	cmp	r3, #16
 80038ca:	d119      	bne.n	8003900 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0210 	mvn.w	r2, #16
 80038d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e030      	b.n	8003962 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003900:	f7fe fb94 	bl	800202c <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	429a      	cmp	r2, r3
 800390e:	d302      	bcc.n	8003916 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d11d      	bne.n	8003952 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003920:	2b40      	cmp	r3, #64	@ 0x40
 8003922:	d016      	beq.n	8003952 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	f043 0220 	orr.w	r2, r3, #32
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e007      	b.n	8003962 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395c:	2b40      	cmp	r3, #64	@ 0x40
 800395e:	d1ae      	bne.n	80038be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800397c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003980:	d11b      	bne.n	80039ba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800398a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	f043 0204 	orr.w	r2, r3, #4
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr
	...

080039c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e272      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8087 	beq.w	8003af6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039e8:	4b92      	ldr	r3, [pc, #584]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d00c      	beq.n	8003a0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039f4:	4b8f      	ldr	r3, [pc, #572]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 030c 	and.w	r3, r3, #12
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d112      	bne.n	8003a26 <HAL_RCC_OscConfig+0x5e>
 8003a00:	4b8c      	ldr	r3, [pc, #560]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a0c:	d10b      	bne.n	8003a26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a0e:	4b89      	ldr	r3, [pc, #548]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d06c      	beq.n	8003af4 <HAL_RCC_OscConfig+0x12c>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d168      	bne.n	8003af4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e24c      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a2e:	d106      	bne.n	8003a3e <HAL_RCC_OscConfig+0x76>
 8003a30:	4b80      	ldr	r3, [pc, #512]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a7f      	ldr	r2, [pc, #508]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	e02e      	b.n	8003a9c <HAL_RCC_OscConfig+0xd4>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x98>
 8003a46:	4b7b      	ldr	r3, [pc, #492]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a7a      	ldr	r2, [pc, #488]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	4b78      	ldr	r3, [pc, #480]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a77      	ldr	r2, [pc, #476]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003a58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e01d      	b.n	8003a9c <HAL_RCC_OscConfig+0xd4>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0xbc>
 8003a6a:	4b72      	ldr	r3, [pc, #456]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a71      	ldr	r2, [pc, #452]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b6f      	ldr	r3, [pc, #444]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a6e      	ldr	r2, [pc, #440]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e00b      	b.n	8003a9c <HAL_RCC_OscConfig+0xd4>
 8003a84:	4b6b      	ldr	r3, [pc, #428]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a6a      	ldr	r2, [pc, #424]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b68      	ldr	r3, [pc, #416]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a67      	ldr	r2, [pc, #412]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d013      	beq.n	8003acc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7fe fac2 	bl	800202c <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aac:	f7fe fabe 	bl	800202c <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	@ 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e200      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	4b5d      	ldr	r3, [pc, #372]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0xe4>
 8003aca:	e014      	b.n	8003af6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003acc:	f7fe faae 	bl	800202c <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad4:	f7fe faaa 	bl	800202c <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	@ 0x64
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e1ec      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae6:	4b53      	ldr	r3, [pc, #332]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x10c>
 8003af2:	e000      	b.n	8003af6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d063      	beq.n	8003bca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b02:	4b4c      	ldr	r3, [pc, #304]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00b      	beq.n	8003b26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b0e:	4b49      	ldr	r3, [pc, #292]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d11c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x18c>
 8003b1a:	4b46      	ldr	r3, [pc, #280]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d116      	bne.n	8003b54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b26:	4b43      	ldr	r3, [pc, #268]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d005      	beq.n	8003b3e <HAL_RCC_OscConfig+0x176>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d001      	beq.n	8003b3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e1c0      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4939      	ldr	r1, [pc, #228]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b52:	e03a      	b.n	8003bca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d020      	beq.n	8003b9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b5c:	4b36      	ldr	r3, [pc, #216]	@ (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b62:	f7fe fa63 	bl	800202c <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b6a:	f7fe fa5f 	bl	800202c <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e1a1      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b88:	4b2a      	ldr	r3, [pc, #168]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4927      	ldr	r1, [pc, #156]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]
 8003b9c:	e015      	b.n	8003bca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b9e:	4b26      	ldr	r3, [pc, #152]	@ (8003c38 <HAL_RCC_OscConfig+0x270>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fe fa42 	bl	800202c <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bac:	f7fe fa3e 	bl	800202c <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e180      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d03a      	beq.n	8003c4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d019      	beq.n	8003c12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bde:	4b17      	ldr	r3, [pc, #92]	@ (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be4:	f7fe fa22 	bl	800202c <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bec:	f7fe fa1e 	bl	800202c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e160      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8003c34 <HAL_RCC_OscConfig+0x26c>)
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	f000 face 	bl	80041ac <RCC_Delay>
 8003c10:	e01c      	b.n	8003c4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c12:	4b0a      	ldr	r3, [pc, #40]	@ (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c18:	f7fe fa08 	bl	800202c <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c1e:	e00f      	b.n	8003c40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c20:	f7fe fa04 	bl	800202c <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d908      	bls.n	8003c40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e146      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4f8>
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000
 8003c38:	42420000 	.word	0x42420000
 8003c3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c40:	4b92      	ldr	r3, [pc, #584]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e9      	bne.n	8003c20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80a6 	beq.w	8003da6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c5e:	4b8b      	ldr	r3, [pc, #556]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10d      	bne.n	8003c86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c6a:	4b88      	ldr	r3, [pc, #544]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	4a87      	ldr	r2, [pc, #540]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c74:	61d3      	str	r3, [r2, #28]
 8003c76:	4b85      	ldr	r3, [pc, #532]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7e:	60bb      	str	r3, [r7, #8]
 8003c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c82:	2301      	movs	r3, #1
 8003c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c86:	4b82      	ldr	r3, [pc, #520]	@ (8003e90 <HAL_RCC_OscConfig+0x4c8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d118      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c92:	4b7f      	ldr	r3, [pc, #508]	@ (8003e90 <HAL_RCC_OscConfig+0x4c8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a7e      	ldr	r2, [pc, #504]	@ (8003e90 <HAL_RCC_OscConfig+0x4c8>)
 8003c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c9e:	f7fe f9c5 	bl	800202c <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca6:	f7fe f9c1 	bl	800202c <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b64      	cmp	r3, #100	@ 0x64
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e103      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb8:	4b75      	ldr	r3, [pc, #468]	@ (8003e90 <HAL_RCC_OscConfig+0x4c8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d106      	bne.n	8003cda <HAL_RCC_OscConfig+0x312>
 8003ccc:	4b6f      	ldr	r3, [pc, #444]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	4a6e      	ldr	r2, [pc, #440]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	6213      	str	r3, [r2, #32]
 8003cd8:	e02d      	b.n	8003d36 <HAL_RCC_OscConfig+0x36e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x334>
 8003ce2:	4b6a      	ldr	r3, [pc, #424]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	4a69      	ldr	r2, [pc, #420]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	6213      	str	r3, [r2, #32]
 8003cee:	4b67      	ldr	r3, [pc, #412]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	4a66      	ldr	r2, [pc, #408]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003cf4:	f023 0304 	bic.w	r3, r3, #4
 8003cf8:	6213      	str	r3, [r2, #32]
 8003cfa:	e01c      	b.n	8003d36 <HAL_RCC_OscConfig+0x36e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	2b05      	cmp	r3, #5
 8003d02:	d10c      	bne.n	8003d1e <HAL_RCC_OscConfig+0x356>
 8003d04:	4b61      	ldr	r3, [pc, #388]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	4a60      	ldr	r2, [pc, #384]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d0a:	f043 0304 	orr.w	r3, r3, #4
 8003d0e:	6213      	str	r3, [r2, #32]
 8003d10:	4b5e      	ldr	r3, [pc, #376]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	4a5d      	ldr	r2, [pc, #372]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	6213      	str	r3, [r2, #32]
 8003d1c:	e00b      	b.n	8003d36 <HAL_RCC_OscConfig+0x36e>
 8003d1e:	4b5b      	ldr	r3, [pc, #364]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	4a5a      	ldr	r2, [pc, #360]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	6213      	str	r3, [r2, #32]
 8003d2a:	4b58      	ldr	r3, [pc, #352]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	4a57      	ldr	r2, [pc, #348]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d30:	f023 0304 	bic.w	r3, r3, #4
 8003d34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d015      	beq.n	8003d6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3e:	f7fe f975 	bl	800202c <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d44:	e00a      	b.n	8003d5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d46:	f7fe f971 	bl	800202c <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e0b1      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0ee      	beq.n	8003d46 <HAL_RCC_OscConfig+0x37e>
 8003d68:	e014      	b.n	8003d94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6a:	f7fe f95f 	bl	800202c <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d70:	e00a      	b.n	8003d88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d72:	f7fe f95b 	bl	800202c <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e09b      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d88:	4b40      	ldr	r3, [pc, #256]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1ee      	bne.n	8003d72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d105      	bne.n	8003da6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	4a3b      	ldr	r2, [pc, #236]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003da4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 8087 	beq.w	8003ebe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003db0:	4b36      	ldr	r3, [pc, #216]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 030c 	and.w	r3, r3, #12
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d061      	beq.n	8003e80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d146      	bne.n	8003e52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc4:	4b33      	ldr	r3, [pc, #204]	@ (8003e94 <HAL_RCC_OscConfig+0x4cc>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dca:	f7fe f92f 	bl	800202c <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd2:	f7fe f92b 	bl	800202c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e06d      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de4:	4b29      	ldr	r3, [pc, #164]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f0      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003df8:	d108      	bne.n	8003e0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dfa:	4b24      	ldr	r3, [pc, #144]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	4921      	ldr	r1, [pc, #132]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a19      	ldr	r1, [r3, #32]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	491b      	ldr	r1, [pc, #108]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e24:	4b1b      	ldr	r3, [pc, #108]	@ (8003e94 <HAL_RCC_OscConfig+0x4cc>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2a:	f7fe f8ff 	bl	800202c <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e32:	f7fe f8fb 	bl	800202c <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e03d      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e44:	4b11      	ldr	r3, [pc, #68]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0x46a>
 8003e50:	e035      	b.n	8003ebe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e52:	4b10      	ldr	r3, [pc, #64]	@ (8003e94 <HAL_RCC_OscConfig+0x4cc>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e58:	f7fe f8e8 	bl	800202c <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e60:	f7fe f8e4 	bl	800202c <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e026      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e72:	4b06      	ldr	r3, [pc, #24]	@ (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f0      	bne.n	8003e60 <HAL_RCC_OscConfig+0x498>
 8003e7e:	e01e      	b.n	8003ebe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d107      	bne.n	8003e98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e019      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4f8>
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40007000 	.word	0x40007000
 8003e94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec8 <HAL_RCC_OscConfig+0x500>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d106      	bne.n	8003eba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d001      	beq.n	8003ebe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000

08003ecc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0d0      	b.n	8004082 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee0:	4b6a      	ldr	r3, [pc, #424]	@ (800408c <HAL_RCC_ClockConfig+0x1c0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d910      	bls.n	8003f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eee:	4b67      	ldr	r3, [pc, #412]	@ (800408c <HAL_RCC_ClockConfig+0x1c0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 0207 	bic.w	r2, r3, #7
 8003ef6:	4965      	ldr	r1, [pc, #404]	@ (800408c <HAL_RCC_ClockConfig+0x1c0>)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b63      	ldr	r3, [pc, #396]	@ (800408c <HAL_RCC_ClockConfig+0x1c0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0b8      	b.n	8004082 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f28:	4b59      	ldr	r3, [pc, #356]	@ (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	4a58      	ldr	r2, [pc, #352]	@ (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f40:	4b53      	ldr	r3, [pc, #332]	@ (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4a52      	ldr	r2, [pc, #328]	@ (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003f46:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003f4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4c:	4b50      	ldr	r3, [pc, #320]	@ (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	494d      	ldr	r1, [pc, #308]	@ (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d040      	beq.n	8003fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f72:	4b47      	ldr	r3, [pc, #284]	@ (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d115      	bne.n	8003faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e07f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d107      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8a:	4b41      	ldr	r3, [pc, #260]	@ (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d109      	bne.n	8003faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e073      	b.n	8004082 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e06b      	b.n	8004082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003faa:	4b39      	ldr	r3, [pc, #228]	@ (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f023 0203 	bic.w	r2, r3, #3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	4936      	ldr	r1, [pc, #216]	@ (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fbc:	f7fe f836 	bl	800202c <HAL_GetTick>
 8003fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc2:	e00a      	b.n	8003fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc4:	f7fe f832 	bl	800202c <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e053      	b.n	8004082 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fda:	4b2d      	ldr	r3, [pc, #180]	@ (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 020c 	and.w	r2, r3, #12
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d1eb      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fec:	4b27      	ldr	r3, [pc, #156]	@ (800408c <HAL_RCC_ClockConfig+0x1c0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d210      	bcs.n	800401c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffa:	4b24      	ldr	r3, [pc, #144]	@ (800408c <HAL_RCC_ClockConfig+0x1c0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 0207 	bic.w	r2, r3, #7
 8004002:	4922      	ldr	r1, [pc, #136]	@ (800408c <HAL_RCC_ClockConfig+0x1c0>)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b20      	ldr	r3, [pc, #128]	@ (800408c <HAL_RCC_ClockConfig+0x1c0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e032      	b.n	8004082 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004028:	4b19      	ldr	r3, [pc, #100]	@ (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4916      	ldr	r1, [pc, #88]	@ (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8004036:	4313      	orrs	r3, r2
 8004038:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004046:	4b12      	ldr	r3, [pc, #72]	@ (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	490e      	ldr	r1, [pc, #56]	@ (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8004056:	4313      	orrs	r3, r2
 8004058:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800405a:	f000 f821 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 800405e:	4602      	mov	r2, r0
 8004060:	4b0b      	ldr	r3, [pc, #44]	@ (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	490a      	ldr	r1, [pc, #40]	@ (8004094 <HAL_RCC_ClockConfig+0x1c8>)
 800406c:	5ccb      	ldrb	r3, [r1, r3]
 800406e:	fa22 f303 	lsr.w	r3, r2, r3
 8004072:	4a09      	ldr	r2, [pc, #36]	@ (8004098 <HAL_RCC_ClockConfig+0x1cc>)
 8004074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <HAL_RCC_ClockConfig+0x1d0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7fd ff94 	bl	8001fa8 <HAL_InitTick>

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40022000 	.word	0x40022000
 8004090:	40021000 	.word	0x40021000
 8004094:	080084e0 	.word	0x080084e0
 8004098:	20000000 	.word	0x20000000
 800409c:	20000004 	.word	0x20000004

080040a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	2300      	movs	r3, #0
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	2300      	movs	r3, #0
 80040b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x94>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d002      	beq.n	80040d0 <HAL_RCC_GetSysClockFreq+0x30>
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d003      	beq.n	80040d6 <HAL_RCC_GetSysClockFreq+0x36>
 80040ce:	e027      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040d0:	4b19      	ldr	r3, [pc, #100]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x98>)
 80040d2:	613b      	str	r3, [r7, #16]
      break;
 80040d4:	e027      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	0c9b      	lsrs	r3, r3, #18
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	4a17      	ldr	r2, [pc, #92]	@ (800413c <HAL_RCC_GetSysClockFreq+0x9c>)
 80040e0:	5cd3      	ldrb	r3, [r2, r3]
 80040e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d010      	beq.n	8004110 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040ee:	4b11      	ldr	r3, [pc, #68]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x94>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	0c5b      	lsrs	r3, r3, #17
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	4a11      	ldr	r2, [pc, #68]	@ (8004140 <HAL_RCC_GetSysClockFreq+0xa0>)
 80040fa:	5cd3      	ldrb	r3, [r2, r3]
 80040fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a0d      	ldr	r2, [pc, #52]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x98>)
 8004102:	fb03 f202 	mul.w	r2, r3, r2
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	e004      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a0c      	ldr	r2, [pc, #48]	@ (8004144 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004114:	fb02 f303 	mul.w	r3, r2, r3
 8004118:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	613b      	str	r3, [r7, #16]
      break;
 800411e:	e002      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004120:	4b05      	ldr	r3, [pc, #20]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x98>)
 8004122:	613b      	str	r3, [r7, #16]
      break;
 8004124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004126:	693b      	ldr	r3, [r7, #16]
}
 8004128:	4618      	mov	r0, r3
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40021000 	.word	0x40021000
 8004138:	007a1200 	.word	0x007a1200
 800413c:	080084f8 	.word	0x080084f8
 8004140:	08008508 	.word	0x08008508
 8004144:	003d0900 	.word	0x003d0900

08004148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800414c:	4b02      	ldr	r3, [pc, #8]	@ (8004158 <HAL_RCC_GetHCLKFreq+0x10>)
 800414e:	681b      	ldr	r3, [r3, #0]
}
 8004150:	4618      	mov	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr
 8004158:	20000000 	.word	0x20000000

0800415c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004160:	f7ff fff2 	bl	8004148 <HAL_RCC_GetHCLKFreq>
 8004164:	4602      	mov	r2, r0
 8004166:	4b05      	ldr	r3, [pc, #20]	@ (800417c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	0a1b      	lsrs	r3, r3, #8
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	4903      	ldr	r1, [pc, #12]	@ (8004180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004172:	5ccb      	ldrb	r3, [r1, r3]
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004178:	4618      	mov	r0, r3
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000
 8004180:	080084f0 	.word	0x080084f0

08004184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004188:	f7ff ffde 	bl	8004148 <HAL_RCC_GetHCLKFreq>
 800418c:	4602      	mov	r2, r0
 800418e:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	0adb      	lsrs	r3, r3, #11
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	4903      	ldr	r1, [pc, #12]	@ (80041a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800419a:	5ccb      	ldrb	r3, [r1, r3]
 800419c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40021000 	.word	0x40021000
 80041a8:	080084f0 	.word	0x080084f0

080041ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041b4:	4b0a      	ldr	r3, [pc, #40]	@ (80041e0 <RCC_Delay+0x34>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a0a      	ldr	r2, [pc, #40]	@ (80041e4 <RCC_Delay+0x38>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	0a5b      	lsrs	r3, r3, #9
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	fb02 f303 	mul.w	r3, r2, r3
 80041c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041c8:	bf00      	nop
  }
  while (Delay --);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1e5a      	subs	r2, r3, #1
 80041ce:	60fa      	str	r2, [r7, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1f9      	bne.n	80041c8 <RCC_Delay+0x1c>
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr
 80041e0:	20000000 	.word	0x20000000
 80041e4:	10624dd3 	.word	0x10624dd3

080041e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e076      	b.n	80042e8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d108      	bne.n	8004214 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800420a:	d009      	beq.n	8004220 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	61da      	str	r2, [r3, #28]
 8004212:	e005      	b.n	8004220 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fd fbf2 	bl	8001a24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004256:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a4:	ea42 0103 	orr.w	r1, r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	0c1a      	lsrs	r2, r3, #16
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f002 0204 	and.w	r2, r2, #4
 80042c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	69da      	ldr	r2, [r3, #28]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004300:	f7fd fe94 	bl	800202c <HAL_GetTick>
 8004304:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004306:	88fb      	ldrh	r3, [r7, #6]
 8004308:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b01      	cmp	r3, #1
 8004314:	d001      	beq.n	800431a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004316:	2302      	movs	r3, #2
 8004318:	e12a      	b.n	8004570 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <HAL_SPI_Transmit+0x36>
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e122      	b.n	8004570 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_SPI_Transmit+0x48>
 8004334:	2302      	movs	r3, #2
 8004336:	e11b      	b.n	8004570 <HAL_SPI_Transmit+0x280>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2203      	movs	r2, #3
 8004344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	88fa      	ldrh	r2, [r7, #6]
 8004358:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	88fa      	ldrh	r2, [r7, #6]
 800435e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004386:	d10f      	bne.n	80043a8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004396:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b2:	2b40      	cmp	r3, #64	@ 0x40
 80043b4:	d007      	beq.n	80043c6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043ce:	d152      	bne.n	8004476 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d002      	beq.n	80043de <HAL_SPI_Transmit+0xee>
 80043d8:	8b7b      	ldrh	r3, [r7, #26]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d145      	bne.n	800446a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e2:	881a      	ldrh	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	1c9a      	adds	r2, r3, #2
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004402:	e032      	b.n	800446a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b02      	cmp	r3, #2
 8004410:	d112      	bne.n	8004438 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004416:	881a      	ldrh	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004422:	1c9a      	adds	r2, r3, #2
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800442c:	b29b      	uxth	r3, r3
 800442e:	3b01      	subs	r3, #1
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004436:	e018      	b.n	800446a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004438:	f7fd fdf8 	bl	800202c <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d803      	bhi.n	8004450 <HAL_SPI_Transmit+0x160>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444e:	d102      	bne.n	8004456 <HAL_SPI_Transmit+0x166>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d109      	bne.n	800446a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e082      	b.n	8004570 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1c7      	bne.n	8004404 <HAL_SPI_Transmit+0x114>
 8004474:	e053      	b.n	800451e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_SPI_Transmit+0x194>
 800447e:	8b7b      	ldrh	r3, [r7, #26]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d147      	bne.n	8004514 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	330c      	adds	r3, #12
 800448e:	7812      	ldrb	r2, [r2, #0]
 8004490:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044aa:	e033      	b.n	8004514 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d113      	bne.n	80044e2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	330c      	adds	r3, #12
 80044c4:	7812      	ldrb	r2, [r2, #0]
 80044c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	86da      	strh	r2, [r3, #54]	@ 0x36
 80044e0:	e018      	b.n	8004514 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044e2:	f7fd fda3 	bl	800202c <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d803      	bhi.n	80044fa <HAL_SPI_Transmit+0x20a>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f8:	d102      	bne.n	8004500 <HAL_SPI_Transmit+0x210>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d109      	bne.n	8004514 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e02d      	b.n	8004570 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1c6      	bne.n	80044ac <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	6839      	ldr	r1, [r7, #0]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fbd2 	bl	8004ccc <SPI_EndRxTxTransaction>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800456e:	2300      	movs	r3, #0
  }
}
 8004570:	4618      	mov	r0, r3
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af02      	add	r7, sp, #8
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	4613      	mov	r3, r2
 8004586:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	d001      	beq.n	8004598 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004594:	2302      	movs	r3, #2
 8004596:	e104      	b.n	80047a2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045a0:	d112      	bne.n	80045c8 <HAL_SPI_Receive+0x50>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10e      	bne.n	80045c8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2204      	movs	r2, #4
 80045ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045b2:	88fa      	ldrh	r2, [r7, #6]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	4613      	mov	r3, r2
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 f8f3 	bl	80047aa <HAL_SPI_TransmitReceive>
 80045c4:	4603      	mov	r3, r0
 80045c6:	e0ec      	b.n	80047a2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045c8:	f7fd fd30 	bl	800202c <HAL_GetTick>
 80045cc:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_SPI_Receive+0x62>
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e0e1      	b.n	80047a2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_SPI_Receive+0x74>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e0da      	b.n	80047a2 <HAL_SPI_Receive+0x22a>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2204      	movs	r2, #4
 80045f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	88fa      	ldrh	r2, [r7, #6]
 800460c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	88fa      	ldrh	r2, [r7, #6]
 8004612:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800463a:	d10f      	bne.n	800465c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800464a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800465a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004666:	2b40      	cmp	r3, #64	@ 0x40
 8004668:	d007      	beq.n	800467a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004678:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d170      	bne.n	8004764 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004682:	e035      	b.n	80046f0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b01      	cmp	r3, #1
 8004690:	d115      	bne.n	80046be <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f103 020c 	add.w	r2, r3, #12
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469e:	7812      	ldrb	r2, [r2, #0]
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046bc:	e018      	b.n	80046f0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046be:	f7fd fcb5 	bl	800202c <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d803      	bhi.n	80046d6 <HAL_SPI_Receive+0x15e>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d102      	bne.n	80046dc <HAL_SPI_Receive+0x164>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e058      	b.n	80047a2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1c4      	bne.n	8004684 <HAL_SPI_Receive+0x10c>
 80046fa:	e038      	b.n	800476e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b01      	cmp	r3, #1
 8004708:	d113      	bne.n	8004732 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004714:	b292      	uxth	r2, r2
 8004716:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471c:	1c9a      	adds	r2, r3, #2
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004730:	e018      	b.n	8004764 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004732:	f7fd fc7b 	bl	800202c <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d803      	bhi.n	800474a <HAL_SPI_Receive+0x1d2>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d102      	bne.n	8004750 <HAL_SPI_Receive+0x1d8>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d109      	bne.n	8004764 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e01e      	b.n	80047a2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1c6      	bne.n	80046fc <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	6839      	ldr	r1, [r7, #0]
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fa58 	bl	8004c28 <SPI_EndRxTransaction>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2220      	movs	r2, #32
 8004782:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80047a0:	2300      	movs	r3, #0
  }
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b08a      	sub	sp, #40	@ 0x28
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047b8:	2301      	movs	r3, #1
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047bc:	f7fd fc36 	bl	800202c <HAL_GetTick>
 80047c0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047c8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80047d0:	887b      	ldrh	r3, [r7, #2]
 80047d2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047d4:	7ffb      	ldrb	r3, [r7, #31]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d00c      	beq.n	80047f4 <HAL_SPI_TransmitReceive+0x4a>
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047e0:	d106      	bne.n	80047f0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d102      	bne.n	80047f0 <HAL_SPI_TransmitReceive+0x46>
 80047ea:	7ffb      	ldrb	r3, [r7, #31]
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d001      	beq.n	80047f4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80047f0:	2302      	movs	r3, #2
 80047f2:	e17f      	b.n	8004af4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d005      	beq.n	8004806 <HAL_SPI_TransmitReceive+0x5c>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <HAL_SPI_TransmitReceive+0x5c>
 8004800:	887b      	ldrh	r3, [r7, #2]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e174      	b.n	8004af4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_SPI_TransmitReceive+0x6e>
 8004814:	2302      	movs	r3, #2
 8004816:	e16d      	b.n	8004af4 <HAL_SPI_TransmitReceive+0x34a>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b04      	cmp	r3, #4
 800482a:	d003      	beq.n	8004834 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2205      	movs	r2, #5
 8004830:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	887a      	ldrh	r2, [r7, #2]
 8004844:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	887a      	ldrh	r2, [r7, #2]
 800484a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	887a      	ldrh	r2, [r7, #2]
 8004856:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	887a      	ldrh	r2, [r7, #2]
 800485c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004874:	2b40      	cmp	r3, #64	@ 0x40
 8004876:	d007      	beq.n	8004888 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004886:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004890:	d17e      	bne.n	8004990 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_SPI_TransmitReceive+0xf6>
 800489a:	8afb      	ldrh	r3, [r7, #22]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d16c      	bne.n	800497a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a4:	881a      	ldrh	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b0:	1c9a      	adds	r2, r3, #2
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048c4:	e059      	b.n	800497a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d11b      	bne.n	800490c <HAL_SPI_TransmitReceive+0x162>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d016      	beq.n	800490c <HAL_SPI_TransmitReceive+0x162>
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d113      	bne.n	800490c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e8:	881a      	ldrh	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f4:	1c9a      	adds	r2, r3, #2
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b01      	cmp	r3, #1
 8004918:	d119      	bne.n	800494e <HAL_SPI_TransmitReceive+0x1a4>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d014      	beq.n	800494e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492e:	b292      	uxth	r2, r2
 8004930:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004936:	1c9a      	adds	r2, r3, #2
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800494a:	2301      	movs	r3, #1
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800494e:	f7fd fb6d 	bl	800202c <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800495a:	429a      	cmp	r2, r3
 800495c:	d80d      	bhi.n	800497a <HAL_SPI_TransmitReceive+0x1d0>
 800495e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004964:	d009      	beq.n	800497a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e0bc      	b.n	8004af4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1a0      	bne.n	80048c6 <HAL_SPI_TransmitReceive+0x11c>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d19b      	bne.n	80048c6 <HAL_SPI_TransmitReceive+0x11c>
 800498e:	e082      	b.n	8004a96 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <HAL_SPI_TransmitReceive+0x1f4>
 8004998:	8afb      	ldrh	r3, [r7, #22]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d171      	bne.n	8004a82 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	7812      	ldrb	r2, [r2, #0]
 80049aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049c4:	e05d      	b.n	8004a82 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d11c      	bne.n	8004a0e <HAL_SPI_TransmitReceive+0x264>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d017      	beq.n	8004a0e <HAL_SPI_TransmitReceive+0x264>
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d114      	bne.n	8004a0e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	330c      	adds	r3, #12
 80049ee:	7812      	ldrb	r2, [r2, #0]
 80049f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d119      	bne.n	8004a50 <HAL_SPI_TransmitReceive+0x2a6>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d014      	beq.n	8004a50 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a50:	f7fd faec 	bl	800202c <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d803      	bhi.n	8004a68 <HAL_SPI_TransmitReceive+0x2be>
 8004a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a66:	d102      	bne.n	8004a6e <HAL_SPI_TransmitReceive+0x2c4>
 8004a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e038      	b.n	8004af4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d19c      	bne.n	80049c6 <HAL_SPI_TransmitReceive+0x21c>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d197      	bne.n	80049c6 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a96:	6a3a      	ldr	r2, [r7, #32]
 8004a98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 f916 	bl	8004ccc <SPI_EndRxTxTransaction>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d008      	beq.n	8004ab8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e01d      	b.n	8004af4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	613b      	str	r3, [r7, #16]
 8004ad4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004af2:	2300      	movs	r3, #0
  }
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3728      	adds	r7, #40	@ 0x28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b0a:	b2db      	uxtb	r3, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr
	...

08004b18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	4613      	mov	r3, r2
 8004b26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b28:	f7fd fa80 	bl	800202c <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	4413      	add	r3, r2
 8004b36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b38:	f7fd fa78 	bl	800202c <HAL_GetTick>
 8004b3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b3e:	4b39      	ldr	r3, [pc, #228]	@ (8004c24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	015b      	lsls	r3, r3, #5
 8004b44:	0d1b      	lsrs	r3, r3, #20
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	fb02 f303 	mul.w	r3, r2, r3
 8004b4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b4e:	e054      	b.n	8004bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	d050      	beq.n	8004bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b58:	f7fd fa68 	bl	800202c <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d902      	bls.n	8004b6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d13d      	bne.n	8004bea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b86:	d111      	bne.n	8004bac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b90:	d004      	beq.n	8004b9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b9a:	d107      	bne.n	8004bac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004baa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bb4:	d10f      	bne.n	8004bd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e017      	b.n	8004c1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4013      	ands	r3, r2
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	bf0c      	ite	eq
 8004c0a:	2301      	moveq	r3, #1
 8004c0c:	2300      	movne	r3, #0
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	461a      	mov	r2, r3
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d19b      	bne.n	8004b50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3720      	adds	r7, #32
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000000 	.word	0x20000000

08004c28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c3c:	d111      	bne.n	8004c62 <SPI_EndRxTransaction+0x3a>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c46:	d004      	beq.n	8004c52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c50:	d107      	bne.n	8004c62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c60:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c6a:	d117      	bne.n	8004c9c <SPI_EndRxTransaction+0x74>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c74:	d112      	bne.n	8004c9c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2101      	movs	r1, #1
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7ff ff49 	bl	8004b18 <SPI_WaitFlagStateUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01a      	beq.n	8004cc2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c90:	f043 0220 	orr.w	r2, r3, #32
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e013      	b.n	8004cc4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2180      	movs	r1, #128	@ 0x80
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f7ff ff36 	bl	8004b18 <SPI_WaitFlagStateUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d007      	beq.n	8004cc2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb6:	f043 0220 	orr.w	r2, r3, #32
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e000      	b.n	8004cc4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	2102      	movs	r1, #2
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f7ff ff18 	bl	8004b18 <SPI_WaitFlagStateUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf2:	f043 0220 	orr.w	r2, r3, #32
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e013      	b.n	8004d26 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2200      	movs	r2, #0
 8004d06:	2180      	movs	r1, #128	@ 0x80
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff ff05 	bl	8004b18 <SPI_WaitFlagStateUntilTimeout>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d18:	f043 0220 	orr.w	r2, r3, #32
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e000      	b.n	8004d26 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e041      	b.n	8004dc4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7fc feaf 	bl	8001ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	f000 f93f 	bl	8004ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d001      	beq.n	8004de4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e032      	b.n	8004e4a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a18      	ldr	r2, [pc, #96]	@ (8004e54 <HAL_TIM_Base_Start+0x88>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00e      	beq.n	8004e14 <HAL_TIM_Base_Start+0x48>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dfe:	d009      	beq.n	8004e14 <HAL_TIM_Base_Start+0x48>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a14      	ldr	r2, [pc, #80]	@ (8004e58 <HAL_TIM_Base_Start+0x8c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <HAL_TIM_Base_Start+0x48>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a13      	ldr	r2, [pc, #76]	@ (8004e5c <HAL_TIM_Base_Start+0x90>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d111      	bne.n	8004e38 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b06      	cmp	r3, #6
 8004e24:	d010      	beq.n	8004e48 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0201 	orr.w	r2, r2, #1
 8004e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e36:	e007      	b.n	8004e48 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc80      	pop	{r7}
 8004e52:	4770      	bx	lr
 8004e54:	40012c00 	.word	0x40012c00
 8004e58:	40000400 	.word	0x40000400
 8004e5c:	40000800 	.word	0x40000800

08004e60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d101      	bne.n	8004e7c <HAL_TIM_ConfigClockSource+0x1c>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e0b4      	b.n	8004fe6 <HAL_TIM_ConfigClockSource+0x186>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ea2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eb4:	d03e      	beq.n	8004f34 <HAL_TIM_ConfigClockSource+0xd4>
 8004eb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eba:	f200 8087 	bhi.w	8004fcc <HAL_TIM_ConfigClockSource+0x16c>
 8004ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ec2:	f000 8086 	beq.w	8004fd2 <HAL_TIM_ConfigClockSource+0x172>
 8004ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eca:	d87f      	bhi.n	8004fcc <HAL_TIM_ConfigClockSource+0x16c>
 8004ecc:	2b70      	cmp	r3, #112	@ 0x70
 8004ece:	d01a      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0xa6>
 8004ed0:	2b70      	cmp	r3, #112	@ 0x70
 8004ed2:	d87b      	bhi.n	8004fcc <HAL_TIM_ConfigClockSource+0x16c>
 8004ed4:	2b60      	cmp	r3, #96	@ 0x60
 8004ed6:	d050      	beq.n	8004f7a <HAL_TIM_ConfigClockSource+0x11a>
 8004ed8:	2b60      	cmp	r3, #96	@ 0x60
 8004eda:	d877      	bhi.n	8004fcc <HAL_TIM_ConfigClockSource+0x16c>
 8004edc:	2b50      	cmp	r3, #80	@ 0x50
 8004ede:	d03c      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0xfa>
 8004ee0:	2b50      	cmp	r3, #80	@ 0x50
 8004ee2:	d873      	bhi.n	8004fcc <HAL_TIM_ConfigClockSource+0x16c>
 8004ee4:	2b40      	cmp	r3, #64	@ 0x40
 8004ee6:	d058      	beq.n	8004f9a <HAL_TIM_ConfigClockSource+0x13a>
 8004ee8:	2b40      	cmp	r3, #64	@ 0x40
 8004eea:	d86f      	bhi.n	8004fcc <HAL_TIM_ConfigClockSource+0x16c>
 8004eec:	2b30      	cmp	r3, #48	@ 0x30
 8004eee:	d064      	beq.n	8004fba <HAL_TIM_ConfigClockSource+0x15a>
 8004ef0:	2b30      	cmp	r3, #48	@ 0x30
 8004ef2:	d86b      	bhi.n	8004fcc <HAL_TIM_ConfigClockSource+0x16c>
 8004ef4:	2b20      	cmp	r3, #32
 8004ef6:	d060      	beq.n	8004fba <HAL_TIM_ConfigClockSource+0x15a>
 8004ef8:	2b20      	cmp	r3, #32
 8004efa:	d867      	bhi.n	8004fcc <HAL_TIM_ConfigClockSource+0x16c>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d05c      	beq.n	8004fba <HAL_TIM_ConfigClockSource+0x15a>
 8004f00:	2b10      	cmp	r3, #16
 8004f02:	d05a      	beq.n	8004fba <HAL_TIM_ConfigClockSource+0x15a>
 8004f04:	e062      	b.n	8004fcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f16:	f000 f950 	bl	80051ba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	609a      	str	r2, [r3, #8]
      break;
 8004f32:	e04f      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f44:	f000 f939 	bl	80051ba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f56:	609a      	str	r2, [r3, #8]
      break;
 8004f58:	e03c      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f66:	461a      	mov	r2, r3
 8004f68:	f000 f8b0 	bl	80050cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2150      	movs	r1, #80	@ 0x50
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 f907 	bl	8005186 <TIM_ITRx_SetConfig>
      break;
 8004f78:	e02c      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f86:	461a      	mov	r2, r3
 8004f88:	f000 f8ce 	bl	8005128 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2160      	movs	r1, #96	@ 0x60
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 f8f7 	bl	8005186 <TIM_ITRx_SetConfig>
      break;
 8004f98:	e01c      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f000 f890 	bl	80050cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2140      	movs	r1, #64	@ 0x40
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 f8e7 	bl	8005186 <TIM_ITRx_SetConfig>
      break;
 8004fb8:	e00c      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	f000 f8de 	bl	8005186 <TIM_ITRx_SetConfig>
      break;
 8004fca:	e003      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd0:	e000      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a2f      	ldr	r2, [pc, #188]	@ (80050c0 <TIM_Base_SetConfig+0xd0>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00b      	beq.n	8005020 <TIM_Base_SetConfig+0x30>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800500e:	d007      	beq.n	8005020 <TIM_Base_SetConfig+0x30>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a2c      	ldr	r2, [pc, #176]	@ (80050c4 <TIM_Base_SetConfig+0xd4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d003      	beq.n	8005020 <TIM_Base_SetConfig+0x30>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a2b      	ldr	r2, [pc, #172]	@ (80050c8 <TIM_Base_SetConfig+0xd8>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d108      	bne.n	8005032 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a22      	ldr	r2, [pc, #136]	@ (80050c0 <TIM_Base_SetConfig+0xd0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00b      	beq.n	8005052 <TIM_Base_SetConfig+0x62>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005040:	d007      	beq.n	8005052 <TIM_Base_SetConfig+0x62>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a1f      	ldr	r2, [pc, #124]	@ (80050c4 <TIM_Base_SetConfig+0xd4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d003      	beq.n	8005052 <TIM_Base_SetConfig+0x62>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a1e      	ldr	r2, [pc, #120]	@ (80050c8 <TIM_Base_SetConfig+0xd8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d108      	bne.n	8005064 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a0d      	ldr	r2, [pc, #52]	@ (80050c0 <TIM_Base_SetConfig+0xd0>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d103      	bne.n	8005098 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f023 0201 	bic.w	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	611a      	str	r2, [r3, #16]
  }
}
 80050b6:	bf00      	nop
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bc80      	pop	{r7}
 80050be:	4770      	bx	lr
 80050c0:	40012c00 	.word	0x40012c00
 80050c4:	40000400 	.word	0x40000400
 80050c8:	40000800 	.word	0x40000800

080050cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	f023 0201 	bic.w	r2, r3, #1
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f023 030a 	bic.w	r3, r3, #10
 8005108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	621a      	str	r2, [r3, #32]
}
 800511e:	bf00      	nop
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr

08005128 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	f023 0210 	bic.w	r2, r3, #16
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	031b      	lsls	r3, r3, #12
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005164:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4313      	orrs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	621a      	str	r2, [r3, #32]
}
 800517c:	bf00      	nop
 800517e:	371c      	adds	r7, #28
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr

08005186 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005186:	b480      	push	{r7}
 8005188:	b085      	sub	sp, #20
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800519c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f043 0307 	orr.w	r3, r3, #7
 80051a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	609a      	str	r2, [r3, #8]
}
 80051b0:	bf00      	nop
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr

080051ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b087      	sub	sp, #28
 80051be:	af00      	add	r7, sp, #0
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	607a      	str	r2, [r7, #4]
 80051c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	021a      	lsls	r2, r3, #8
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	431a      	orrs	r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	609a      	str	r2, [r3, #8]
}
 80051ee:	bf00      	nop
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bc80      	pop	{r7}
 80051f6:	4770      	bx	lr

080051f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800520c:	2302      	movs	r3, #2
 800520e:	e046      	b.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a16      	ldr	r2, [pc, #88]	@ (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00e      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800525c:	d009      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a12      	ldr	r2, [pc, #72]	@ (80052ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a10      	ldr	r2, [pc, #64]	@ (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d10c      	bne.n	800528c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	4313      	orrs	r3, r2
 8005282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40000400 	.word	0x40000400
 80052b0:	40000800 	.word	0x40000800

080052b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e042      	b.n	800534c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fc fc0a 	bl	8001af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2224      	movs	r2, #36	@ 0x24
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f971 	bl	80055e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800530c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695a      	ldr	r2, [r3, #20]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800531c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800532c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08a      	sub	sp, #40	@ 0x28
 8005358:	af02      	add	r7, sp, #8
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	4613      	mov	r3, r2
 8005362:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b20      	cmp	r3, #32
 8005372:	d175      	bne.n	8005460 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <HAL_UART_Transmit+0x2c>
 800537a:	88fb      	ldrh	r3, [r7, #6]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e06e      	b.n	8005462 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2221      	movs	r2, #33	@ 0x21
 800538e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005392:	f7fc fe4b 	bl	800202c <HAL_GetTick>
 8005396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	88fa      	ldrh	r2, [r7, #6]
 800539c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	88fa      	ldrh	r2, [r7, #6]
 80053a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ac:	d108      	bne.n	80053c0 <HAL_UART_Transmit+0x6c>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d104      	bne.n	80053c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	e003      	b.n	80053c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053c8:	e02e      	b.n	8005428 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2200      	movs	r2, #0
 80053d2:	2180      	movs	r1, #128	@ 0x80
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f848 	bl	800546a <UART_WaitOnFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e03a      	b.n	8005462 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10b      	bne.n	800540a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005400:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	3302      	adds	r3, #2
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	e007      	b.n	800541a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	781a      	ldrb	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	3301      	adds	r3, #1
 8005418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1cb      	bne.n	80053ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2200      	movs	r2, #0
 800543a:	2140      	movs	r1, #64	@ 0x40
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 f814 	bl	800546a <UART_WaitOnFlagUntilTimeout>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e006      	b.n	8005462 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	e000      	b.n	8005462 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005460:	2302      	movs	r3, #2
  }
}
 8005462:	4618      	mov	r0, r3
 8005464:	3720      	adds	r7, #32
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b086      	sub	sp, #24
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	603b      	str	r3, [r7, #0]
 8005476:	4613      	mov	r3, r2
 8005478:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800547a:	e03b      	b.n	80054f4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005482:	d037      	beq.n	80054f4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005484:	f7fc fdd2 	bl	800202c <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	6a3a      	ldr	r2, [r7, #32]
 8005490:	429a      	cmp	r2, r3
 8005492:	d302      	bcc.n	800549a <UART_WaitOnFlagUntilTimeout+0x30>
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e03a      	b.n	8005514 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d023      	beq.n	80054f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b80      	cmp	r3, #128	@ 0x80
 80054b0:	d020      	beq.n	80054f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b40      	cmp	r3, #64	@ 0x40
 80054b6:	d01d      	beq.n	80054f4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	d116      	bne.n	80054f4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80054c6:	2300      	movs	r3, #0
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f81d 	bl	800551c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2208      	movs	r2, #8
 80054e6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e00f      	b.n	8005514 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	4013      	ands	r3, r2
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	429a      	cmp	r2, r3
 8005502:	bf0c      	ite	eq
 8005504:	2301      	moveq	r3, #1
 8005506:	2300      	movne	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	461a      	mov	r2, r3
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	429a      	cmp	r2, r3
 8005510:	d0b4      	beq.n	800547c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800551c:	b480      	push	{r7}
 800551e:	b095      	sub	sp, #84	@ 0x54
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	330c      	adds	r3, #12
 800552a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005536:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800553a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	330c      	adds	r3, #12
 8005542:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005544:	643a      	str	r2, [r7, #64]	@ 0x40
 8005546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800554a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e5      	bne.n	8005524 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3314      	adds	r3, #20
 800555e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	61fb      	str	r3, [r7, #28]
   return(result);
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	f023 0301 	bic.w	r3, r3, #1
 800556e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	3314      	adds	r3, #20
 8005576:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005578:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800557a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800557e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005580:	e841 2300 	strex	r3, r2, [r1]
 8005584:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e5      	bne.n	8005558 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005590:	2b01      	cmp	r3, #1
 8005592:	d119      	bne.n	80055c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	330c      	adds	r3, #12
 800559a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f023 0310 	bic.w	r3, r3, #16
 80055aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	330c      	adds	r3, #12
 80055b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055b4:	61ba      	str	r2, [r7, #24]
 80055b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6979      	ldr	r1, [r7, #20]
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	613b      	str	r3, [r7, #16]
   return(result);
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e5      	bne.n	8005594 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055d6:	bf00      	nop
 80055d8:	3754      	adds	r7, #84	@ 0x54
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr

080055e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689a      	ldr	r2, [r3, #8]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	4313      	orrs	r3, r2
 800560e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800561a:	f023 030c 	bic.w	r3, r3, #12
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	430b      	orrs	r3, r1
 8005626:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699a      	ldr	r2, [r3, #24]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a2c      	ldr	r2, [pc, #176]	@ (80056f4 <UART_SetConfig+0x114>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d103      	bne.n	8005650 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005648:	f7fe fd9c 	bl	8004184 <HAL_RCC_GetPCLK2Freq>
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	e002      	b.n	8005656 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005650:	f7fe fd84 	bl	800415c <HAL_RCC_GetPCLK1Freq>
 8005654:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	009a      	lsls	r2, r3, #2
 8005660:	441a      	add	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	fbb2 f3f3 	udiv	r3, r2, r3
 800566c:	4a22      	ldr	r2, [pc, #136]	@ (80056f8 <UART_SetConfig+0x118>)
 800566e:	fba2 2303 	umull	r2, r3, r2, r3
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	0119      	lsls	r1, r3, #4
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	009a      	lsls	r2, r3, #2
 8005680:	441a      	add	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	fbb2 f2f3 	udiv	r2, r2, r3
 800568c:	4b1a      	ldr	r3, [pc, #104]	@ (80056f8 <UART_SetConfig+0x118>)
 800568e:	fba3 0302 	umull	r0, r3, r3, r2
 8005692:	095b      	lsrs	r3, r3, #5
 8005694:	2064      	movs	r0, #100	@ 0x64
 8005696:	fb00 f303 	mul.w	r3, r0, r3
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	3332      	adds	r3, #50	@ 0x32
 80056a0:	4a15      	ldr	r2, [pc, #84]	@ (80056f8 <UART_SetConfig+0x118>)
 80056a2:	fba2 2303 	umull	r2, r3, r2, r3
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056ac:	4419      	add	r1, r3
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4613      	mov	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	009a      	lsls	r2, r3, #2
 80056b8:	441a      	add	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80056c4:	4b0c      	ldr	r3, [pc, #48]	@ (80056f8 <UART_SetConfig+0x118>)
 80056c6:	fba3 0302 	umull	r0, r3, r3, r2
 80056ca:	095b      	lsrs	r3, r3, #5
 80056cc:	2064      	movs	r0, #100	@ 0x64
 80056ce:	fb00 f303 	mul.w	r3, r0, r3
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	3332      	adds	r3, #50	@ 0x32
 80056d8:	4a07      	ldr	r2, [pc, #28]	@ (80056f8 <UART_SetConfig+0x118>)
 80056da:	fba2 2303 	umull	r2, r3, r2, r3
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	f003 020f 	and.w	r2, r3, #15
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	440a      	add	r2, r1
 80056ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80056ec:	bf00      	nop
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40013800 	.word	0x40013800
 80056f8:	51eb851f 	.word	0x51eb851f

080056fc <__cvt>:
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005702:	461d      	mov	r5, r3
 8005704:	bfbb      	ittet	lt
 8005706:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800570a:	461d      	movlt	r5, r3
 800570c:	2300      	movge	r3, #0
 800570e:	232d      	movlt	r3, #45	@ 0x2d
 8005710:	b088      	sub	sp, #32
 8005712:	4614      	mov	r4, r2
 8005714:	bfb8      	it	lt
 8005716:	4614      	movlt	r4, r2
 8005718:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800571a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800571c:	7013      	strb	r3, [r2, #0]
 800571e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005720:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005724:	f023 0820 	bic.w	r8, r3, #32
 8005728:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800572c:	d005      	beq.n	800573a <__cvt+0x3e>
 800572e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005732:	d100      	bne.n	8005736 <__cvt+0x3a>
 8005734:	3601      	adds	r6, #1
 8005736:	2302      	movs	r3, #2
 8005738:	e000      	b.n	800573c <__cvt+0x40>
 800573a:	2303      	movs	r3, #3
 800573c:	aa07      	add	r2, sp, #28
 800573e:	9204      	str	r2, [sp, #16]
 8005740:	aa06      	add	r2, sp, #24
 8005742:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005746:	e9cd 3600 	strd	r3, r6, [sp]
 800574a:	4622      	mov	r2, r4
 800574c:	462b      	mov	r3, r5
 800574e:	f000 fea3 	bl	8006498 <_dtoa_r>
 8005752:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005756:	4607      	mov	r7, r0
 8005758:	d119      	bne.n	800578e <__cvt+0x92>
 800575a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800575c:	07db      	lsls	r3, r3, #31
 800575e:	d50e      	bpl.n	800577e <__cvt+0x82>
 8005760:	eb00 0906 	add.w	r9, r0, r6
 8005764:	2200      	movs	r2, #0
 8005766:	2300      	movs	r3, #0
 8005768:	4620      	mov	r0, r4
 800576a:	4629      	mov	r1, r5
 800576c:	f7fb f91c 	bl	80009a8 <__aeabi_dcmpeq>
 8005770:	b108      	cbz	r0, 8005776 <__cvt+0x7a>
 8005772:	f8cd 901c 	str.w	r9, [sp, #28]
 8005776:	2230      	movs	r2, #48	@ 0x30
 8005778:	9b07      	ldr	r3, [sp, #28]
 800577a:	454b      	cmp	r3, r9
 800577c:	d31e      	bcc.n	80057bc <__cvt+0xc0>
 800577e:	4638      	mov	r0, r7
 8005780:	9b07      	ldr	r3, [sp, #28]
 8005782:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005784:	1bdb      	subs	r3, r3, r7
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	b008      	add	sp, #32
 800578a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005792:	eb00 0906 	add.w	r9, r0, r6
 8005796:	d1e5      	bne.n	8005764 <__cvt+0x68>
 8005798:	7803      	ldrb	r3, [r0, #0]
 800579a:	2b30      	cmp	r3, #48	@ 0x30
 800579c:	d10a      	bne.n	80057b4 <__cvt+0xb8>
 800579e:	2200      	movs	r2, #0
 80057a0:	2300      	movs	r3, #0
 80057a2:	4620      	mov	r0, r4
 80057a4:	4629      	mov	r1, r5
 80057a6:	f7fb f8ff 	bl	80009a8 <__aeabi_dcmpeq>
 80057aa:	b918      	cbnz	r0, 80057b4 <__cvt+0xb8>
 80057ac:	f1c6 0601 	rsb	r6, r6, #1
 80057b0:	f8ca 6000 	str.w	r6, [sl]
 80057b4:	f8da 3000 	ldr.w	r3, [sl]
 80057b8:	4499      	add	r9, r3
 80057ba:	e7d3      	b.n	8005764 <__cvt+0x68>
 80057bc:	1c59      	adds	r1, r3, #1
 80057be:	9107      	str	r1, [sp, #28]
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	e7d9      	b.n	8005778 <__cvt+0x7c>

080057c4 <__exponent>:
 80057c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057c6:	2900      	cmp	r1, #0
 80057c8:	bfb6      	itet	lt
 80057ca:	232d      	movlt	r3, #45	@ 0x2d
 80057cc:	232b      	movge	r3, #43	@ 0x2b
 80057ce:	4249      	neglt	r1, r1
 80057d0:	2909      	cmp	r1, #9
 80057d2:	7002      	strb	r2, [r0, #0]
 80057d4:	7043      	strb	r3, [r0, #1]
 80057d6:	dd29      	ble.n	800582c <__exponent+0x68>
 80057d8:	f10d 0307 	add.w	r3, sp, #7
 80057dc:	461d      	mov	r5, r3
 80057de:	270a      	movs	r7, #10
 80057e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80057e4:	461a      	mov	r2, r3
 80057e6:	fb07 1416 	mls	r4, r7, r6, r1
 80057ea:	3430      	adds	r4, #48	@ 0x30
 80057ec:	f802 4c01 	strb.w	r4, [r2, #-1]
 80057f0:	460c      	mov	r4, r1
 80057f2:	2c63      	cmp	r4, #99	@ 0x63
 80057f4:	4631      	mov	r1, r6
 80057f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80057fa:	dcf1      	bgt.n	80057e0 <__exponent+0x1c>
 80057fc:	3130      	adds	r1, #48	@ 0x30
 80057fe:	1e94      	subs	r4, r2, #2
 8005800:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005804:	4623      	mov	r3, r4
 8005806:	1c41      	adds	r1, r0, #1
 8005808:	42ab      	cmp	r3, r5
 800580a:	d30a      	bcc.n	8005822 <__exponent+0x5e>
 800580c:	f10d 0309 	add.w	r3, sp, #9
 8005810:	1a9b      	subs	r3, r3, r2
 8005812:	42ac      	cmp	r4, r5
 8005814:	bf88      	it	hi
 8005816:	2300      	movhi	r3, #0
 8005818:	3302      	adds	r3, #2
 800581a:	4403      	add	r3, r0
 800581c:	1a18      	subs	r0, r3, r0
 800581e:	b003      	add	sp, #12
 8005820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005822:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005826:	f801 6f01 	strb.w	r6, [r1, #1]!
 800582a:	e7ed      	b.n	8005808 <__exponent+0x44>
 800582c:	2330      	movs	r3, #48	@ 0x30
 800582e:	3130      	adds	r1, #48	@ 0x30
 8005830:	7083      	strb	r3, [r0, #2]
 8005832:	70c1      	strb	r1, [r0, #3]
 8005834:	1d03      	adds	r3, r0, #4
 8005836:	e7f1      	b.n	800581c <__exponent+0x58>

08005838 <_printf_float>:
 8005838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583c:	b091      	sub	sp, #68	@ 0x44
 800583e:	460c      	mov	r4, r1
 8005840:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005844:	4616      	mov	r6, r2
 8005846:	461f      	mov	r7, r3
 8005848:	4605      	mov	r5, r0
 800584a:	f000 fd07 	bl	800625c <_localeconv_r>
 800584e:	6803      	ldr	r3, [r0, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	9308      	str	r3, [sp, #32]
 8005854:	f7fa fc7c 	bl	8000150 <strlen>
 8005858:	2300      	movs	r3, #0
 800585a:	930e      	str	r3, [sp, #56]	@ 0x38
 800585c:	f8d8 3000 	ldr.w	r3, [r8]
 8005860:	9009      	str	r0, [sp, #36]	@ 0x24
 8005862:	3307      	adds	r3, #7
 8005864:	f023 0307 	bic.w	r3, r3, #7
 8005868:	f103 0208 	add.w	r2, r3, #8
 800586c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005870:	f8d4 b000 	ldr.w	fp, [r4]
 8005874:	f8c8 2000 	str.w	r2, [r8]
 8005878:	e9d3 8900 	ldrd	r8, r9, [r3]
 800587c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005880:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005882:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005886:	f04f 32ff 	mov.w	r2, #4294967295
 800588a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800588e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005892:	4b9c      	ldr	r3, [pc, #624]	@ (8005b04 <_printf_float+0x2cc>)
 8005894:	f7fb f8ba 	bl	8000a0c <__aeabi_dcmpun>
 8005898:	bb70      	cbnz	r0, 80058f8 <_printf_float+0xc0>
 800589a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800589e:	f04f 32ff 	mov.w	r2, #4294967295
 80058a2:	4b98      	ldr	r3, [pc, #608]	@ (8005b04 <_printf_float+0x2cc>)
 80058a4:	f7fb f894 	bl	80009d0 <__aeabi_dcmple>
 80058a8:	bb30      	cbnz	r0, 80058f8 <_printf_float+0xc0>
 80058aa:	2200      	movs	r2, #0
 80058ac:	2300      	movs	r3, #0
 80058ae:	4640      	mov	r0, r8
 80058b0:	4649      	mov	r1, r9
 80058b2:	f7fb f883 	bl	80009bc <__aeabi_dcmplt>
 80058b6:	b110      	cbz	r0, 80058be <_printf_float+0x86>
 80058b8:	232d      	movs	r3, #45	@ 0x2d
 80058ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058be:	4a92      	ldr	r2, [pc, #584]	@ (8005b08 <_printf_float+0x2d0>)
 80058c0:	4b92      	ldr	r3, [pc, #584]	@ (8005b0c <_printf_float+0x2d4>)
 80058c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80058c6:	bf94      	ite	ls
 80058c8:	4690      	movls	r8, r2
 80058ca:	4698      	movhi	r8, r3
 80058cc:	2303      	movs	r3, #3
 80058ce:	f04f 0900 	mov.w	r9, #0
 80058d2:	6123      	str	r3, [r4, #16]
 80058d4:	f02b 0304 	bic.w	r3, fp, #4
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	4633      	mov	r3, r6
 80058dc:	4621      	mov	r1, r4
 80058de:	4628      	mov	r0, r5
 80058e0:	9700      	str	r7, [sp, #0]
 80058e2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80058e4:	f000 f9d4 	bl	8005c90 <_printf_common>
 80058e8:	3001      	adds	r0, #1
 80058ea:	f040 8090 	bne.w	8005a0e <_printf_float+0x1d6>
 80058ee:	f04f 30ff 	mov.w	r0, #4294967295
 80058f2:	b011      	add	sp, #68	@ 0x44
 80058f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058f8:	4642      	mov	r2, r8
 80058fa:	464b      	mov	r3, r9
 80058fc:	4640      	mov	r0, r8
 80058fe:	4649      	mov	r1, r9
 8005900:	f7fb f884 	bl	8000a0c <__aeabi_dcmpun>
 8005904:	b148      	cbz	r0, 800591a <_printf_float+0xe2>
 8005906:	464b      	mov	r3, r9
 8005908:	2b00      	cmp	r3, #0
 800590a:	bfb8      	it	lt
 800590c:	232d      	movlt	r3, #45	@ 0x2d
 800590e:	4a80      	ldr	r2, [pc, #512]	@ (8005b10 <_printf_float+0x2d8>)
 8005910:	bfb8      	it	lt
 8005912:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005916:	4b7f      	ldr	r3, [pc, #508]	@ (8005b14 <_printf_float+0x2dc>)
 8005918:	e7d3      	b.n	80058c2 <_printf_float+0x8a>
 800591a:	6863      	ldr	r3, [r4, #4]
 800591c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	d13f      	bne.n	80059a4 <_printf_float+0x16c>
 8005924:	2306      	movs	r3, #6
 8005926:	6063      	str	r3, [r4, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800592e:	6023      	str	r3, [r4, #0]
 8005930:	9206      	str	r2, [sp, #24]
 8005932:	aa0e      	add	r2, sp, #56	@ 0x38
 8005934:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005938:	aa0d      	add	r2, sp, #52	@ 0x34
 800593a:	9203      	str	r2, [sp, #12]
 800593c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005940:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005944:	6863      	ldr	r3, [r4, #4]
 8005946:	4642      	mov	r2, r8
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	4628      	mov	r0, r5
 800594c:	464b      	mov	r3, r9
 800594e:	910a      	str	r1, [sp, #40]	@ 0x28
 8005950:	f7ff fed4 	bl	80056fc <__cvt>
 8005954:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005956:	4680      	mov	r8, r0
 8005958:	2947      	cmp	r1, #71	@ 0x47
 800595a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800595c:	d128      	bne.n	80059b0 <_printf_float+0x178>
 800595e:	1cc8      	adds	r0, r1, #3
 8005960:	db02      	blt.n	8005968 <_printf_float+0x130>
 8005962:	6863      	ldr	r3, [r4, #4]
 8005964:	4299      	cmp	r1, r3
 8005966:	dd40      	ble.n	80059ea <_printf_float+0x1b2>
 8005968:	f1aa 0a02 	sub.w	sl, sl, #2
 800596c:	fa5f fa8a 	uxtb.w	sl, sl
 8005970:	4652      	mov	r2, sl
 8005972:	3901      	subs	r1, #1
 8005974:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005978:	910d      	str	r1, [sp, #52]	@ 0x34
 800597a:	f7ff ff23 	bl	80057c4 <__exponent>
 800597e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005980:	4681      	mov	r9, r0
 8005982:	1813      	adds	r3, r2, r0
 8005984:	2a01      	cmp	r2, #1
 8005986:	6123      	str	r3, [r4, #16]
 8005988:	dc02      	bgt.n	8005990 <_printf_float+0x158>
 800598a:	6822      	ldr	r2, [r4, #0]
 800598c:	07d2      	lsls	r2, r2, #31
 800598e:	d501      	bpl.n	8005994 <_printf_float+0x15c>
 8005990:	3301      	adds	r3, #1
 8005992:	6123      	str	r3, [r4, #16]
 8005994:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005998:	2b00      	cmp	r3, #0
 800599a:	d09e      	beq.n	80058da <_printf_float+0xa2>
 800599c:	232d      	movs	r3, #45	@ 0x2d
 800599e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059a2:	e79a      	b.n	80058da <_printf_float+0xa2>
 80059a4:	2947      	cmp	r1, #71	@ 0x47
 80059a6:	d1bf      	bne.n	8005928 <_printf_float+0xf0>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1bd      	bne.n	8005928 <_printf_float+0xf0>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e7ba      	b.n	8005926 <_printf_float+0xee>
 80059b0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059b4:	d9dc      	bls.n	8005970 <_printf_float+0x138>
 80059b6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80059ba:	d118      	bne.n	80059ee <_printf_float+0x1b6>
 80059bc:	2900      	cmp	r1, #0
 80059be:	6863      	ldr	r3, [r4, #4]
 80059c0:	dd0b      	ble.n	80059da <_printf_float+0x1a2>
 80059c2:	6121      	str	r1, [r4, #16]
 80059c4:	b913      	cbnz	r3, 80059cc <_printf_float+0x194>
 80059c6:	6822      	ldr	r2, [r4, #0]
 80059c8:	07d0      	lsls	r0, r2, #31
 80059ca:	d502      	bpl.n	80059d2 <_printf_float+0x19a>
 80059cc:	3301      	adds	r3, #1
 80059ce:	440b      	add	r3, r1
 80059d0:	6123      	str	r3, [r4, #16]
 80059d2:	f04f 0900 	mov.w	r9, #0
 80059d6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80059d8:	e7dc      	b.n	8005994 <_printf_float+0x15c>
 80059da:	b913      	cbnz	r3, 80059e2 <_printf_float+0x1aa>
 80059dc:	6822      	ldr	r2, [r4, #0]
 80059de:	07d2      	lsls	r2, r2, #31
 80059e0:	d501      	bpl.n	80059e6 <_printf_float+0x1ae>
 80059e2:	3302      	adds	r3, #2
 80059e4:	e7f4      	b.n	80059d0 <_printf_float+0x198>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e7f2      	b.n	80059d0 <_printf_float+0x198>
 80059ea:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80059ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059f0:	4299      	cmp	r1, r3
 80059f2:	db05      	blt.n	8005a00 <_printf_float+0x1c8>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	6121      	str	r1, [r4, #16]
 80059f8:	07d8      	lsls	r0, r3, #31
 80059fa:	d5ea      	bpl.n	80059d2 <_printf_float+0x19a>
 80059fc:	1c4b      	adds	r3, r1, #1
 80059fe:	e7e7      	b.n	80059d0 <_printf_float+0x198>
 8005a00:	2900      	cmp	r1, #0
 8005a02:	bfcc      	ite	gt
 8005a04:	2201      	movgt	r2, #1
 8005a06:	f1c1 0202 	rsble	r2, r1, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	e7e0      	b.n	80059d0 <_printf_float+0x198>
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	055a      	lsls	r2, r3, #21
 8005a12:	d407      	bmi.n	8005a24 <_printf_float+0x1ec>
 8005a14:	6923      	ldr	r3, [r4, #16]
 8005a16:	4642      	mov	r2, r8
 8005a18:	4631      	mov	r1, r6
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	47b8      	blx	r7
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d12b      	bne.n	8005a7a <_printf_float+0x242>
 8005a22:	e764      	b.n	80058ee <_printf_float+0xb6>
 8005a24:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a28:	f240 80dc 	bls.w	8005be4 <_printf_float+0x3ac>
 8005a2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a30:	2200      	movs	r2, #0
 8005a32:	2300      	movs	r3, #0
 8005a34:	f7fa ffb8 	bl	80009a8 <__aeabi_dcmpeq>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d033      	beq.n	8005aa4 <_printf_float+0x26c>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	4631      	mov	r1, r6
 8005a40:	4628      	mov	r0, r5
 8005a42:	4a35      	ldr	r2, [pc, #212]	@ (8005b18 <_printf_float+0x2e0>)
 8005a44:	47b8      	blx	r7
 8005a46:	3001      	adds	r0, #1
 8005a48:	f43f af51 	beq.w	80058ee <_printf_float+0xb6>
 8005a4c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005a50:	4543      	cmp	r3, r8
 8005a52:	db02      	blt.n	8005a5a <_printf_float+0x222>
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	07d8      	lsls	r0, r3, #31
 8005a58:	d50f      	bpl.n	8005a7a <_printf_float+0x242>
 8005a5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a5e:	4631      	mov	r1, r6
 8005a60:	4628      	mov	r0, r5
 8005a62:	47b8      	blx	r7
 8005a64:	3001      	adds	r0, #1
 8005a66:	f43f af42 	beq.w	80058ee <_printf_float+0xb6>
 8005a6a:	f04f 0900 	mov.w	r9, #0
 8005a6e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a72:	f104 0a1a 	add.w	sl, r4, #26
 8005a76:	45c8      	cmp	r8, r9
 8005a78:	dc09      	bgt.n	8005a8e <_printf_float+0x256>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	079b      	lsls	r3, r3, #30
 8005a7e:	f100 8102 	bmi.w	8005c86 <_printf_float+0x44e>
 8005a82:	68e0      	ldr	r0, [r4, #12]
 8005a84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a86:	4298      	cmp	r0, r3
 8005a88:	bfb8      	it	lt
 8005a8a:	4618      	movlt	r0, r3
 8005a8c:	e731      	b.n	80058f2 <_printf_float+0xba>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	4652      	mov	r2, sl
 8005a92:	4631      	mov	r1, r6
 8005a94:	4628      	mov	r0, r5
 8005a96:	47b8      	blx	r7
 8005a98:	3001      	adds	r0, #1
 8005a9a:	f43f af28 	beq.w	80058ee <_printf_float+0xb6>
 8005a9e:	f109 0901 	add.w	r9, r9, #1
 8005aa2:	e7e8      	b.n	8005a76 <_printf_float+0x23e>
 8005aa4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	dc38      	bgt.n	8005b1c <_printf_float+0x2e4>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	4631      	mov	r1, r6
 8005aae:	4628      	mov	r0, r5
 8005ab0:	4a19      	ldr	r2, [pc, #100]	@ (8005b18 <_printf_float+0x2e0>)
 8005ab2:	47b8      	blx	r7
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	f43f af1a 	beq.w	80058ee <_printf_float+0xb6>
 8005aba:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005abe:	ea59 0303 	orrs.w	r3, r9, r3
 8005ac2:	d102      	bne.n	8005aca <_printf_float+0x292>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	07d9      	lsls	r1, r3, #31
 8005ac8:	d5d7      	bpl.n	8005a7a <_printf_float+0x242>
 8005aca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ace:	4631      	mov	r1, r6
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	47b8      	blx	r7
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	f43f af0a 	beq.w	80058ee <_printf_float+0xb6>
 8005ada:	f04f 0a00 	mov.w	sl, #0
 8005ade:	f104 0b1a 	add.w	fp, r4, #26
 8005ae2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ae4:	425b      	negs	r3, r3
 8005ae6:	4553      	cmp	r3, sl
 8005ae8:	dc01      	bgt.n	8005aee <_printf_float+0x2b6>
 8005aea:	464b      	mov	r3, r9
 8005aec:	e793      	b.n	8005a16 <_printf_float+0x1de>
 8005aee:	2301      	movs	r3, #1
 8005af0:	465a      	mov	r2, fp
 8005af2:	4631      	mov	r1, r6
 8005af4:	4628      	mov	r0, r5
 8005af6:	47b8      	blx	r7
 8005af8:	3001      	adds	r0, #1
 8005afa:	f43f aef8 	beq.w	80058ee <_printf_float+0xb6>
 8005afe:	f10a 0a01 	add.w	sl, sl, #1
 8005b02:	e7ee      	b.n	8005ae2 <_printf_float+0x2aa>
 8005b04:	7fefffff 	.word	0x7fefffff
 8005b08:	0800850a 	.word	0x0800850a
 8005b0c:	0800850e 	.word	0x0800850e
 8005b10:	08008512 	.word	0x08008512
 8005b14:	08008516 	.word	0x08008516
 8005b18:	0800851a 	.word	0x0800851a
 8005b1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b1e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005b22:	4553      	cmp	r3, sl
 8005b24:	bfa8      	it	ge
 8005b26:	4653      	movge	r3, sl
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	4699      	mov	r9, r3
 8005b2c:	dc36      	bgt.n	8005b9c <_printf_float+0x364>
 8005b2e:	f04f 0b00 	mov.w	fp, #0
 8005b32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b36:	f104 021a 	add.w	r2, r4, #26
 8005b3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b3e:	eba3 0309 	sub.w	r3, r3, r9
 8005b42:	455b      	cmp	r3, fp
 8005b44:	dc31      	bgt.n	8005baa <_printf_float+0x372>
 8005b46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b48:	459a      	cmp	sl, r3
 8005b4a:	dc3a      	bgt.n	8005bc2 <_printf_float+0x38a>
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	07da      	lsls	r2, r3, #31
 8005b50:	d437      	bmi.n	8005bc2 <_printf_float+0x38a>
 8005b52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b54:	ebaa 0903 	sub.w	r9, sl, r3
 8005b58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b5a:	ebaa 0303 	sub.w	r3, sl, r3
 8005b5e:	4599      	cmp	r9, r3
 8005b60:	bfa8      	it	ge
 8005b62:	4699      	movge	r9, r3
 8005b64:	f1b9 0f00 	cmp.w	r9, #0
 8005b68:	dc33      	bgt.n	8005bd2 <_printf_float+0x39a>
 8005b6a:	f04f 0800 	mov.w	r8, #0
 8005b6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b72:	f104 0b1a 	add.w	fp, r4, #26
 8005b76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b78:	ebaa 0303 	sub.w	r3, sl, r3
 8005b7c:	eba3 0309 	sub.w	r3, r3, r9
 8005b80:	4543      	cmp	r3, r8
 8005b82:	f77f af7a 	ble.w	8005a7a <_printf_float+0x242>
 8005b86:	2301      	movs	r3, #1
 8005b88:	465a      	mov	r2, fp
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	47b8      	blx	r7
 8005b90:	3001      	adds	r0, #1
 8005b92:	f43f aeac 	beq.w	80058ee <_printf_float+0xb6>
 8005b96:	f108 0801 	add.w	r8, r8, #1
 8005b9a:	e7ec      	b.n	8005b76 <_printf_float+0x33e>
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	47b8      	blx	r7
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d1c2      	bne.n	8005b2e <_printf_float+0x2f6>
 8005ba8:	e6a1      	b.n	80058ee <_printf_float+0xb6>
 8005baa:	2301      	movs	r3, #1
 8005bac:	4631      	mov	r1, r6
 8005bae:	4628      	mov	r0, r5
 8005bb0:	920a      	str	r2, [sp, #40]	@ 0x28
 8005bb2:	47b8      	blx	r7
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f43f ae9a 	beq.w	80058ee <_printf_float+0xb6>
 8005bba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005bbc:	f10b 0b01 	add.w	fp, fp, #1
 8005bc0:	e7bb      	b.n	8005b3a <_printf_float+0x302>
 8005bc2:	4631      	mov	r1, r6
 8005bc4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005bc8:	4628      	mov	r0, r5
 8005bca:	47b8      	blx	r7
 8005bcc:	3001      	adds	r0, #1
 8005bce:	d1c0      	bne.n	8005b52 <_printf_float+0x31a>
 8005bd0:	e68d      	b.n	80058ee <_printf_float+0xb6>
 8005bd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005bd4:	464b      	mov	r3, r9
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	4628      	mov	r0, r5
 8005bda:	4442      	add	r2, r8
 8005bdc:	47b8      	blx	r7
 8005bde:	3001      	adds	r0, #1
 8005be0:	d1c3      	bne.n	8005b6a <_printf_float+0x332>
 8005be2:	e684      	b.n	80058ee <_printf_float+0xb6>
 8005be4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005be8:	f1ba 0f01 	cmp.w	sl, #1
 8005bec:	dc01      	bgt.n	8005bf2 <_printf_float+0x3ba>
 8005bee:	07db      	lsls	r3, r3, #31
 8005bf0:	d536      	bpl.n	8005c60 <_printf_float+0x428>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	47b8      	blx	r7
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	f43f ae76 	beq.w	80058ee <_printf_float+0xb6>
 8005c02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c06:	4631      	mov	r1, r6
 8005c08:	4628      	mov	r0, r5
 8005c0a:	47b8      	blx	r7
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	f43f ae6e 	beq.w	80058ee <_printf_float+0xb6>
 8005c12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c16:	2200      	movs	r2, #0
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c1e:	f7fa fec3 	bl	80009a8 <__aeabi_dcmpeq>
 8005c22:	b9c0      	cbnz	r0, 8005c56 <_printf_float+0x41e>
 8005c24:	4653      	mov	r3, sl
 8005c26:	f108 0201 	add.w	r2, r8, #1
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	47b8      	blx	r7
 8005c30:	3001      	adds	r0, #1
 8005c32:	d10c      	bne.n	8005c4e <_printf_float+0x416>
 8005c34:	e65b      	b.n	80058ee <_printf_float+0xb6>
 8005c36:	2301      	movs	r3, #1
 8005c38:	465a      	mov	r2, fp
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	47b8      	blx	r7
 8005c40:	3001      	adds	r0, #1
 8005c42:	f43f ae54 	beq.w	80058ee <_printf_float+0xb6>
 8005c46:	f108 0801 	add.w	r8, r8, #1
 8005c4a:	45d0      	cmp	r8, sl
 8005c4c:	dbf3      	blt.n	8005c36 <_printf_float+0x3fe>
 8005c4e:	464b      	mov	r3, r9
 8005c50:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c54:	e6e0      	b.n	8005a18 <_printf_float+0x1e0>
 8005c56:	f04f 0800 	mov.w	r8, #0
 8005c5a:	f104 0b1a 	add.w	fp, r4, #26
 8005c5e:	e7f4      	b.n	8005c4a <_printf_float+0x412>
 8005c60:	2301      	movs	r3, #1
 8005c62:	4642      	mov	r2, r8
 8005c64:	e7e1      	b.n	8005c2a <_printf_float+0x3f2>
 8005c66:	2301      	movs	r3, #1
 8005c68:	464a      	mov	r2, r9
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	47b8      	blx	r7
 8005c70:	3001      	adds	r0, #1
 8005c72:	f43f ae3c 	beq.w	80058ee <_printf_float+0xb6>
 8005c76:	f108 0801 	add.w	r8, r8, #1
 8005c7a:	68e3      	ldr	r3, [r4, #12]
 8005c7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005c7e:	1a5b      	subs	r3, r3, r1
 8005c80:	4543      	cmp	r3, r8
 8005c82:	dcf0      	bgt.n	8005c66 <_printf_float+0x42e>
 8005c84:	e6fd      	b.n	8005a82 <_printf_float+0x24a>
 8005c86:	f04f 0800 	mov.w	r8, #0
 8005c8a:	f104 0919 	add.w	r9, r4, #25
 8005c8e:	e7f4      	b.n	8005c7a <_printf_float+0x442>

08005c90 <_printf_common>:
 8005c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c94:	4616      	mov	r6, r2
 8005c96:	4698      	mov	r8, r3
 8005c98:	688a      	ldr	r2, [r1, #8]
 8005c9a:	690b      	ldr	r3, [r1, #16]
 8005c9c:	4607      	mov	r7, r0
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	bfb8      	it	lt
 8005ca2:	4613      	movlt	r3, r2
 8005ca4:	6033      	str	r3, [r6, #0]
 8005ca6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005caa:	460c      	mov	r4, r1
 8005cac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cb0:	b10a      	cbz	r2, 8005cb6 <_printf_common+0x26>
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	6033      	str	r3, [r6, #0]
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	0699      	lsls	r1, r3, #26
 8005cba:	bf42      	ittt	mi
 8005cbc:	6833      	ldrmi	r3, [r6, #0]
 8005cbe:	3302      	addmi	r3, #2
 8005cc0:	6033      	strmi	r3, [r6, #0]
 8005cc2:	6825      	ldr	r5, [r4, #0]
 8005cc4:	f015 0506 	ands.w	r5, r5, #6
 8005cc8:	d106      	bne.n	8005cd8 <_printf_common+0x48>
 8005cca:	f104 0a19 	add.w	sl, r4, #25
 8005cce:	68e3      	ldr	r3, [r4, #12]
 8005cd0:	6832      	ldr	r2, [r6, #0]
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	42ab      	cmp	r3, r5
 8005cd6:	dc2b      	bgt.n	8005d30 <_printf_common+0xa0>
 8005cd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cdc:	6822      	ldr	r2, [r4, #0]
 8005cde:	3b00      	subs	r3, #0
 8005ce0:	bf18      	it	ne
 8005ce2:	2301      	movne	r3, #1
 8005ce4:	0692      	lsls	r2, r2, #26
 8005ce6:	d430      	bmi.n	8005d4a <_printf_common+0xba>
 8005ce8:	4641      	mov	r1, r8
 8005cea:	4638      	mov	r0, r7
 8005cec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cf0:	47c8      	blx	r9
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d023      	beq.n	8005d3e <_printf_common+0xae>
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	6922      	ldr	r2, [r4, #16]
 8005cfa:	f003 0306 	and.w	r3, r3, #6
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	bf14      	ite	ne
 8005d02:	2500      	movne	r5, #0
 8005d04:	6833      	ldreq	r3, [r6, #0]
 8005d06:	f04f 0600 	mov.w	r6, #0
 8005d0a:	bf08      	it	eq
 8005d0c:	68e5      	ldreq	r5, [r4, #12]
 8005d0e:	f104 041a 	add.w	r4, r4, #26
 8005d12:	bf08      	it	eq
 8005d14:	1aed      	subeq	r5, r5, r3
 8005d16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d1a:	bf08      	it	eq
 8005d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d20:	4293      	cmp	r3, r2
 8005d22:	bfc4      	itt	gt
 8005d24:	1a9b      	subgt	r3, r3, r2
 8005d26:	18ed      	addgt	r5, r5, r3
 8005d28:	42b5      	cmp	r5, r6
 8005d2a:	d11a      	bne.n	8005d62 <_printf_common+0xd2>
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	e008      	b.n	8005d42 <_printf_common+0xb2>
 8005d30:	2301      	movs	r3, #1
 8005d32:	4652      	mov	r2, sl
 8005d34:	4641      	mov	r1, r8
 8005d36:	4638      	mov	r0, r7
 8005d38:	47c8      	blx	r9
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	d103      	bne.n	8005d46 <_printf_common+0xb6>
 8005d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d46:	3501      	adds	r5, #1
 8005d48:	e7c1      	b.n	8005cce <_printf_common+0x3e>
 8005d4a:	2030      	movs	r0, #48	@ 0x30
 8005d4c:	18e1      	adds	r1, r4, r3
 8005d4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d58:	4422      	add	r2, r4
 8005d5a:	3302      	adds	r3, #2
 8005d5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d60:	e7c2      	b.n	8005ce8 <_printf_common+0x58>
 8005d62:	2301      	movs	r3, #1
 8005d64:	4622      	mov	r2, r4
 8005d66:	4641      	mov	r1, r8
 8005d68:	4638      	mov	r0, r7
 8005d6a:	47c8      	blx	r9
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d0e6      	beq.n	8005d3e <_printf_common+0xae>
 8005d70:	3601      	adds	r6, #1
 8005d72:	e7d9      	b.n	8005d28 <_printf_common+0x98>

08005d74 <_printf_i>:
 8005d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d78:	7e0f      	ldrb	r7, [r1, #24]
 8005d7a:	4691      	mov	r9, r2
 8005d7c:	2f78      	cmp	r7, #120	@ 0x78
 8005d7e:	4680      	mov	r8, r0
 8005d80:	460c      	mov	r4, r1
 8005d82:	469a      	mov	sl, r3
 8005d84:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d8a:	d807      	bhi.n	8005d9c <_printf_i+0x28>
 8005d8c:	2f62      	cmp	r7, #98	@ 0x62
 8005d8e:	d80a      	bhi.n	8005da6 <_printf_i+0x32>
 8005d90:	2f00      	cmp	r7, #0
 8005d92:	f000 80d3 	beq.w	8005f3c <_printf_i+0x1c8>
 8005d96:	2f58      	cmp	r7, #88	@ 0x58
 8005d98:	f000 80ba 	beq.w	8005f10 <_printf_i+0x19c>
 8005d9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005da0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005da4:	e03a      	b.n	8005e1c <_printf_i+0xa8>
 8005da6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005daa:	2b15      	cmp	r3, #21
 8005dac:	d8f6      	bhi.n	8005d9c <_printf_i+0x28>
 8005dae:	a101      	add	r1, pc, #4	@ (adr r1, 8005db4 <_printf_i+0x40>)
 8005db0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005db4:	08005e0d 	.word	0x08005e0d
 8005db8:	08005e21 	.word	0x08005e21
 8005dbc:	08005d9d 	.word	0x08005d9d
 8005dc0:	08005d9d 	.word	0x08005d9d
 8005dc4:	08005d9d 	.word	0x08005d9d
 8005dc8:	08005d9d 	.word	0x08005d9d
 8005dcc:	08005e21 	.word	0x08005e21
 8005dd0:	08005d9d 	.word	0x08005d9d
 8005dd4:	08005d9d 	.word	0x08005d9d
 8005dd8:	08005d9d 	.word	0x08005d9d
 8005ddc:	08005d9d 	.word	0x08005d9d
 8005de0:	08005f23 	.word	0x08005f23
 8005de4:	08005e4b 	.word	0x08005e4b
 8005de8:	08005edd 	.word	0x08005edd
 8005dec:	08005d9d 	.word	0x08005d9d
 8005df0:	08005d9d 	.word	0x08005d9d
 8005df4:	08005f45 	.word	0x08005f45
 8005df8:	08005d9d 	.word	0x08005d9d
 8005dfc:	08005e4b 	.word	0x08005e4b
 8005e00:	08005d9d 	.word	0x08005d9d
 8005e04:	08005d9d 	.word	0x08005d9d
 8005e08:	08005ee5 	.word	0x08005ee5
 8005e0c:	6833      	ldr	r3, [r6, #0]
 8005e0e:	1d1a      	adds	r2, r3, #4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6032      	str	r2, [r6, #0]
 8005e14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e09e      	b.n	8005f5e <_printf_i+0x1ea>
 8005e20:	6833      	ldr	r3, [r6, #0]
 8005e22:	6820      	ldr	r0, [r4, #0]
 8005e24:	1d19      	adds	r1, r3, #4
 8005e26:	6031      	str	r1, [r6, #0]
 8005e28:	0606      	lsls	r6, r0, #24
 8005e2a:	d501      	bpl.n	8005e30 <_printf_i+0xbc>
 8005e2c:	681d      	ldr	r5, [r3, #0]
 8005e2e:	e003      	b.n	8005e38 <_printf_i+0xc4>
 8005e30:	0645      	lsls	r5, r0, #25
 8005e32:	d5fb      	bpl.n	8005e2c <_printf_i+0xb8>
 8005e34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e38:	2d00      	cmp	r5, #0
 8005e3a:	da03      	bge.n	8005e44 <_printf_i+0xd0>
 8005e3c:	232d      	movs	r3, #45	@ 0x2d
 8005e3e:	426d      	negs	r5, r5
 8005e40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e44:	230a      	movs	r3, #10
 8005e46:	4859      	ldr	r0, [pc, #356]	@ (8005fac <_printf_i+0x238>)
 8005e48:	e011      	b.n	8005e6e <_printf_i+0xfa>
 8005e4a:	6821      	ldr	r1, [r4, #0]
 8005e4c:	6833      	ldr	r3, [r6, #0]
 8005e4e:	0608      	lsls	r0, r1, #24
 8005e50:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e54:	d402      	bmi.n	8005e5c <_printf_i+0xe8>
 8005e56:	0649      	lsls	r1, r1, #25
 8005e58:	bf48      	it	mi
 8005e5a:	b2ad      	uxthmi	r5, r5
 8005e5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e5e:	6033      	str	r3, [r6, #0]
 8005e60:	bf14      	ite	ne
 8005e62:	230a      	movne	r3, #10
 8005e64:	2308      	moveq	r3, #8
 8005e66:	4851      	ldr	r0, [pc, #324]	@ (8005fac <_printf_i+0x238>)
 8005e68:	2100      	movs	r1, #0
 8005e6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e6e:	6866      	ldr	r6, [r4, #4]
 8005e70:	2e00      	cmp	r6, #0
 8005e72:	bfa8      	it	ge
 8005e74:	6821      	ldrge	r1, [r4, #0]
 8005e76:	60a6      	str	r6, [r4, #8]
 8005e78:	bfa4      	itt	ge
 8005e7a:	f021 0104 	bicge.w	r1, r1, #4
 8005e7e:	6021      	strge	r1, [r4, #0]
 8005e80:	b90d      	cbnz	r5, 8005e86 <_printf_i+0x112>
 8005e82:	2e00      	cmp	r6, #0
 8005e84:	d04b      	beq.n	8005f1e <_printf_i+0x1aa>
 8005e86:	4616      	mov	r6, r2
 8005e88:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e8c:	fb03 5711 	mls	r7, r3, r1, r5
 8005e90:	5dc7      	ldrb	r7, [r0, r7]
 8005e92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e96:	462f      	mov	r7, r5
 8005e98:	42bb      	cmp	r3, r7
 8005e9a:	460d      	mov	r5, r1
 8005e9c:	d9f4      	bls.n	8005e88 <_printf_i+0x114>
 8005e9e:	2b08      	cmp	r3, #8
 8005ea0:	d10b      	bne.n	8005eba <_printf_i+0x146>
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	07df      	lsls	r7, r3, #31
 8005ea6:	d508      	bpl.n	8005eba <_printf_i+0x146>
 8005ea8:	6923      	ldr	r3, [r4, #16]
 8005eaa:	6861      	ldr	r1, [r4, #4]
 8005eac:	4299      	cmp	r1, r3
 8005eae:	bfde      	ittt	le
 8005eb0:	2330      	movle	r3, #48	@ 0x30
 8005eb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005eb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005eba:	1b92      	subs	r2, r2, r6
 8005ebc:	6122      	str	r2, [r4, #16]
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	f8cd a000 	str.w	sl, [sp]
 8005ec8:	aa03      	add	r2, sp, #12
 8005eca:	f7ff fee1 	bl	8005c90 <_printf_common>
 8005ece:	3001      	adds	r0, #1
 8005ed0:	d14a      	bne.n	8005f68 <_printf_i+0x1f4>
 8005ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed6:	b004      	add	sp, #16
 8005ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	f043 0320 	orr.w	r3, r3, #32
 8005ee2:	6023      	str	r3, [r4, #0]
 8005ee4:	2778      	movs	r7, #120	@ 0x78
 8005ee6:	4832      	ldr	r0, [pc, #200]	@ (8005fb0 <_printf_i+0x23c>)
 8005ee8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	6831      	ldr	r1, [r6, #0]
 8005ef0:	061f      	lsls	r7, r3, #24
 8005ef2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ef6:	d402      	bmi.n	8005efe <_printf_i+0x18a>
 8005ef8:	065f      	lsls	r7, r3, #25
 8005efa:	bf48      	it	mi
 8005efc:	b2ad      	uxthmi	r5, r5
 8005efe:	6031      	str	r1, [r6, #0]
 8005f00:	07d9      	lsls	r1, r3, #31
 8005f02:	bf44      	itt	mi
 8005f04:	f043 0320 	orrmi.w	r3, r3, #32
 8005f08:	6023      	strmi	r3, [r4, #0]
 8005f0a:	b11d      	cbz	r5, 8005f14 <_printf_i+0x1a0>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	e7ab      	b.n	8005e68 <_printf_i+0xf4>
 8005f10:	4826      	ldr	r0, [pc, #152]	@ (8005fac <_printf_i+0x238>)
 8005f12:	e7e9      	b.n	8005ee8 <_printf_i+0x174>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	f023 0320 	bic.w	r3, r3, #32
 8005f1a:	6023      	str	r3, [r4, #0]
 8005f1c:	e7f6      	b.n	8005f0c <_printf_i+0x198>
 8005f1e:	4616      	mov	r6, r2
 8005f20:	e7bd      	b.n	8005e9e <_printf_i+0x12a>
 8005f22:	6833      	ldr	r3, [r6, #0]
 8005f24:	6825      	ldr	r5, [r4, #0]
 8005f26:	1d18      	adds	r0, r3, #4
 8005f28:	6961      	ldr	r1, [r4, #20]
 8005f2a:	6030      	str	r0, [r6, #0]
 8005f2c:	062e      	lsls	r6, r5, #24
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	d501      	bpl.n	8005f36 <_printf_i+0x1c2>
 8005f32:	6019      	str	r1, [r3, #0]
 8005f34:	e002      	b.n	8005f3c <_printf_i+0x1c8>
 8005f36:	0668      	lsls	r0, r5, #25
 8005f38:	d5fb      	bpl.n	8005f32 <_printf_i+0x1be>
 8005f3a:	8019      	strh	r1, [r3, #0]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	4616      	mov	r6, r2
 8005f40:	6123      	str	r3, [r4, #16]
 8005f42:	e7bc      	b.n	8005ebe <_printf_i+0x14a>
 8005f44:	6833      	ldr	r3, [r6, #0]
 8005f46:	2100      	movs	r1, #0
 8005f48:	1d1a      	adds	r2, r3, #4
 8005f4a:	6032      	str	r2, [r6, #0]
 8005f4c:	681e      	ldr	r6, [r3, #0]
 8005f4e:	6862      	ldr	r2, [r4, #4]
 8005f50:	4630      	mov	r0, r6
 8005f52:	f000 f9fa 	bl	800634a <memchr>
 8005f56:	b108      	cbz	r0, 8005f5c <_printf_i+0x1e8>
 8005f58:	1b80      	subs	r0, r0, r6
 8005f5a:	6060      	str	r0, [r4, #4]
 8005f5c:	6863      	ldr	r3, [r4, #4]
 8005f5e:	6123      	str	r3, [r4, #16]
 8005f60:	2300      	movs	r3, #0
 8005f62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f66:	e7aa      	b.n	8005ebe <_printf_i+0x14a>
 8005f68:	4632      	mov	r2, r6
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	4640      	mov	r0, r8
 8005f6e:	6923      	ldr	r3, [r4, #16]
 8005f70:	47d0      	blx	sl
 8005f72:	3001      	adds	r0, #1
 8005f74:	d0ad      	beq.n	8005ed2 <_printf_i+0x15e>
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	079b      	lsls	r3, r3, #30
 8005f7a:	d413      	bmi.n	8005fa4 <_printf_i+0x230>
 8005f7c:	68e0      	ldr	r0, [r4, #12]
 8005f7e:	9b03      	ldr	r3, [sp, #12]
 8005f80:	4298      	cmp	r0, r3
 8005f82:	bfb8      	it	lt
 8005f84:	4618      	movlt	r0, r3
 8005f86:	e7a6      	b.n	8005ed6 <_printf_i+0x162>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	4632      	mov	r2, r6
 8005f8c:	4649      	mov	r1, r9
 8005f8e:	4640      	mov	r0, r8
 8005f90:	47d0      	blx	sl
 8005f92:	3001      	adds	r0, #1
 8005f94:	d09d      	beq.n	8005ed2 <_printf_i+0x15e>
 8005f96:	3501      	adds	r5, #1
 8005f98:	68e3      	ldr	r3, [r4, #12]
 8005f9a:	9903      	ldr	r1, [sp, #12]
 8005f9c:	1a5b      	subs	r3, r3, r1
 8005f9e:	42ab      	cmp	r3, r5
 8005fa0:	dcf2      	bgt.n	8005f88 <_printf_i+0x214>
 8005fa2:	e7eb      	b.n	8005f7c <_printf_i+0x208>
 8005fa4:	2500      	movs	r5, #0
 8005fa6:	f104 0619 	add.w	r6, r4, #25
 8005faa:	e7f5      	b.n	8005f98 <_printf_i+0x224>
 8005fac:	0800851c 	.word	0x0800851c
 8005fb0:	0800852d 	.word	0x0800852d

08005fb4 <std>:
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	b510      	push	{r4, lr}
 8005fb8:	4604      	mov	r4, r0
 8005fba:	e9c0 3300 	strd	r3, r3, [r0]
 8005fbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fc2:	6083      	str	r3, [r0, #8]
 8005fc4:	8181      	strh	r1, [r0, #12]
 8005fc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005fc8:	81c2      	strh	r2, [r0, #14]
 8005fca:	6183      	str	r3, [r0, #24]
 8005fcc:	4619      	mov	r1, r3
 8005fce:	2208      	movs	r2, #8
 8005fd0:	305c      	adds	r0, #92	@ 0x5c
 8005fd2:	f000 f93a 	bl	800624a <memset>
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800600c <std+0x58>)
 8005fd8:	6224      	str	r4, [r4, #32]
 8005fda:	6263      	str	r3, [r4, #36]	@ 0x24
 8005fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8006010 <std+0x5c>)
 8005fde:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8006014 <std+0x60>)
 8005fe2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8006018 <std+0x64>)
 8005fe6:	6323      	str	r3, [r4, #48]	@ 0x30
 8005fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800601c <std+0x68>)
 8005fea:	429c      	cmp	r4, r3
 8005fec:	d006      	beq.n	8005ffc <std+0x48>
 8005fee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ff2:	4294      	cmp	r4, r2
 8005ff4:	d002      	beq.n	8005ffc <std+0x48>
 8005ff6:	33d0      	adds	r3, #208	@ 0xd0
 8005ff8:	429c      	cmp	r4, r3
 8005ffa:	d105      	bne.n	8006008 <std+0x54>
 8005ffc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006004:	f000 b99e 	b.w	8006344 <__retarget_lock_init_recursive>
 8006008:	bd10      	pop	{r4, pc}
 800600a:	bf00      	nop
 800600c:	080061c5 	.word	0x080061c5
 8006010:	080061e7 	.word	0x080061e7
 8006014:	0800621f 	.word	0x0800621f
 8006018:	08006243 	.word	0x08006243
 800601c:	2000037c 	.word	0x2000037c

08006020 <stdio_exit_handler>:
 8006020:	4a02      	ldr	r2, [pc, #8]	@ (800602c <stdio_exit_handler+0xc>)
 8006022:	4903      	ldr	r1, [pc, #12]	@ (8006030 <stdio_exit_handler+0x10>)
 8006024:	4803      	ldr	r0, [pc, #12]	@ (8006034 <stdio_exit_handler+0x14>)
 8006026:	f000 b869 	b.w	80060fc <_fwalk_sglue>
 800602a:	bf00      	nop
 800602c:	2000000c 	.word	0x2000000c
 8006030:	08007f55 	.word	0x08007f55
 8006034:	2000001c 	.word	0x2000001c

08006038 <cleanup_stdio>:
 8006038:	6841      	ldr	r1, [r0, #4]
 800603a:	4b0c      	ldr	r3, [pc, #48]	@ (800606c <cleanup_stdio+0x34>)
 800603c:	b510      	push	{r4, lr}
 800603e:	4299      	cmp	r1, r3
 8006040:	4604      	mov	r4, r0
 8006042:	d001      	beq.n	8006048 <cleanup_stdio+0x10>
 8006044:	f001 ff86 	bl	8007f54 <_fflush_r>
 8006048:	68a1      	ldr	r1, [r4, #8]
 800604a:	4b09      	ldr	r3, [pc, #36]	@ (8006070 <cleanup_stdio+0x38>)
 800604c:	4299      	cmp	r1, r3
 800604e:	d002      	beq.n	8006056 <cleanup_stdio+0x1e>
 8006050:	4620      	mov	r0, r4
 8006052:	f001 ff7f 	bl	8007f54 <_fflush_r>
 8006056:	68e1      	ldr	r1, [r4, #12]
 8006058:	4b06      	ldr	r3, [pc, #24]	@ (8006074 <cleanup_stdio+0x3c>)
 800605a:	4299      	cmp	r1, r3
 800605c:	d004      	beq.n	8006068 <cleanup_stdio+0x30>
 800605e:	4620      	mov	r0, r4
 8006060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006064:	f001 bf76 	b.w	8007f54 <_fflush_r>
 8006068:	bd10      	pop	{r4, pc}
 800606a:	bf00      	nop
 800606c:	2000037c 	.word	0x2000037c
 8006070:	200003e4 	.word	0x200003e4
 8006074:	2000044c 	.word	0x2000044c

08006078 <global_stdio_init.part.0>:
 8006078:	b510      	push	{r4, lr}
 800607a:	4b0b      	ldr	r3, [pc, #44]	@ (80060a8 <global_stdio_init.part.0+0x30>)
 800607c:	4c0b      	ldr	r4, [pc, #44]	@ (80060ac <global_stdio_init.part.0+0x34>)
 800607e:	4a0c      	ldr	r2, [pc, #48]	@ (80060b0 <global_stdio_init.part.0+0x38>)
 8006080:	4620      	mov	r0, r4
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	2104      	movs	r1, #4
 8006086:	2200      	movs	r2, #0
 8006088:	f7ff ff94 	bl	8005fb4 <std>
 800608c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006090:	2201      	movs	r2, #1
 8006092:	2109      	movs	r1, #9
 8006094:	f7ff ff8e 	bl	8005fb4 <std>
 8006098:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800609c:	2202      	movs	r2, #2
 800609e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a2:	2112      	movs	r1, #18
 80060a4:	f7ff bf86 	b.w	8005fb4 <std>
 80060a8:	200004b4 	.word	0x200004b4
 80060ac:	2000037c 	.word	0x2000037c
 80060b0:	08006021 	.word	0x08006021

080060b4 <__sfp_lock_acquire>:
 80060b4:	4801      	ldr	r0, [pc, #4]	@ (80060bc <__sfp_lock_acquire+0x8>)
 80060b6:	f000 b946 	b.w	8006346 <__retarget_lock_acquire_recursive>
 80060ba:	bf00      	nop
 80060bc:	200004bd 	.word	0x200004bd

080060c0 <__sfp_lock_release>:
 80060c0:	4801      	ldr	r0, [pc, #4]	@ (80060c8 <__sfp_lock_release+0x8>)
 80060c2:	f000 b941 	b.w	8006348 <__retarget_lock_release_recursive>
 80060c6:	bf00      	nop
 80060c8:	200004bd 	.word	0x200004bd

080060cc <__sinit>:
 80060cc:	b510      	push	{r4, lr}
 80060ce:	4604      	mov	r4, r0
 80060d0:	f7ff fff0 	bl	80060b4 <__sfp_lock_acquire>
 80060d4:	6a23      	ldr	r3, [r4, #32]
 80060d6:	b11b      	cbz	r3, 80060e0 <__sinit+0x14>
 80060d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060dc:	f7ff bff0 	b.w	80060c0 <__sfp_lock_release>
 80060e0:	4b04      	ldr	r3, [pc, #16]	@ (80060f4 <__sinit+0x28>)
 80060e2:	6223      	str	r3, [r4, #32]
 80060e4:	4b04      	ldr	r3, [pc, #16]	@ (80060f8 <__sinit+0x2c>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1f5      	bne.n	80060d8 <__sinit+0xc>
 80060ec:	f7ff ffc4 	bl	8006078 <global_stdio_init.part.0>
 80060f0:	e7f2      	b.n	80060d8 <__sinit+0xc>
 80060f2:	bf00      	nop
 80060f4:	08006039 	.word	0x08006039
 80060f8:	200004b4 	.word	0x200004b4

080060fc <_fwalk_sglue>:
 80060fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006100:	4607      	mov	r7, r0
 8006102:	4688      	mov	r8, r1
 8006104:	4614      	mov	r4, r2
 8006106:	2600      	movs	r6, #0
 8006108:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800610c:	f1b9 0901 	subs.w	r9, r9, #1
 8006110:	d505      	bpl.n	800611e <_fwalk_sglue+0x22>
 8006112:	6824      	ldr	r4, [r4, #0]
 8006114:	2c00      	cmp	r4, #0
 8006116:	d1f7      	bne.n	8006108 <_fwalk_sglue+0xc>
 8006118:	4630      	mov	r0, r6
 800611a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800611e:	89ab      	ldrh	r3, [r5, #12]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d907      	bls.n	8006134 <_fwalk_sglue+0x38>
 8006124:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006128:	3301      	adds	r3, #1
 800612a:	d003      	beq.n	8006134 <_fwalk_sglue+0x38>
 800612c:	4629      	mov	r1, r5
 800612e:	4638      	mov	r0, r7
 8006130:	47c0      	blx	r8
 8006132:	4306      	orrs	r6, r0
 8006134:	3568      	adds	r5, #104	@ 0x68
 8006136:	e7e9      	b.n	800610c <_fwalk_sglue+0x10>

08006138 <iprintf>:
 8006138:	b40f      	push	{r0, r1, r2, r3}
 800613a:	b507      	push	{r0, r1, r2, lr}
 800613c:	4906      	ldr	r1, [pc, #24]	@ (8006158 <iprintf+0x20>)
 800613e:	ab04      	add	r3, sp, #16
 8006140:	6808      	ldr	r0, [r1, #0]
 8006142:	f853 2b04 	ldr.w	r2, [r3], #4
 8006146:	6881      	ldr	r1, [r0, #8]
 8006148:	9301      	str	r3, [sp, #4]
 800614a:	f001 fd6b 	bl	8007c24 <_vfiprintf_r>
 800614e:	b003      	add	sp, #12
 8006150:	f85d eb04 	ldr.w	lr, [sp], #4
 8006154:	b004      	add	sp, #16
 8006156:	4770      	bx	lr
 8006158:	20000018 	.word	0x20000018

0800615c <sniprintf>:
 800615c:	b40c      	push	{r2, r3}
 800615e:	b530      	push	{r4, r5, lr}
 8006160:	4b17      	ldr	r3, [pc, #92]	@ (80061c0 <sniprintf+0x64>)
 8006162:	1e0c      	subs	r4, r1, #0
 8006164:	681d      	ldr	r5, [r3, #0]
 8006166:	b09d      	sub	sp, #116	@ 0x74
 8006168:	da08      	bge.n	800617c <sniprintf+0x20>
 800616a:	238b      	movs	r3, #139	@ 0x8b
 800616c:	f04f 30ff 	mov.w	r0, #4294967295
 8006170:	602b      	str	r3, [r5, #0]
 8006172:	b01d      	add	sp, #116	@ 0x74
 8006174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006178:	b002      	add	sp, #8
 800617a:	4770      	bx	lr
 800617c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006180:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006184:	bf0c      	ite	eq
 8006186:	4623      	moveq	r3, r4
 8006188:	f104 33ff 	addne.w	r3, r4, #4294967295
 800618c:	9304      	str	r3, [sp, #16]
 800618e:	9307      	str	r3, [sp, #28]
 8006190:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006194:	9002      	str	r0, [sp, #8]
 8006196:	9006      	str	r0, [sp, #24]
 8006198:	f8ad 3016 	strh.w	r3, [sp, #22]
 800619c:	4628      	mov	r0, r5
 800619e:	ab21      	add	r3, sp, #132	@ 0x84
 80061a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80061a2:	a902      	add	r1, sp, #8
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	f001 fc19 	bl	80079dc <_svfiprintf_r>
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	bfbc      	itt	lt
 80061ae:	238b      	movlt	r3, #139	@ 0x8b
 80061b0:	602b      	strlt	r3, [r5, #0]
 80061b2:	2c00      	cmp	r4, #0
 80061b4:	d0dd      	beq.n	8006172 <sniprintf+0x16>
 80061b6:	2200      	movs	r2, #0
 80061b8:	9b02      	ldr	r3, [sp, #8]
 80061ba:	701a      	strb	r2, [r3, #0]
 80061bc:	e7d9      	b.n	8006172 <sniprintf+0x16>
 80061be:	bf00      	nop
 80061c0:	20000018 	.word	0x20000018

080061c4 <__sread>:
 80061c4:	b510      	push	{r4, lr}
 80061c6:	460c      	mov	r4, r1
 80061c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061cc:	f000 f86c 	bl	80062a8 <_read_r>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	bfab      	itete	ge
 80061d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80061d6:	89a3      	ldrhlt	r3, [r4, #12]
 80061d8:	181b      	addge	r3, r3, r0
 80061da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80061de:	bfac      	ite	ge
 80061e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80061e2:	81a3      	strhlt	r3, [r4, #12]
 80061e4:	bd10      	pop	{r4, pc}

080061e6 <__swrite>:
 80061e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ea:	461f      	mov	r7, r3
 80061ec:	898b      	ldrh	r3, [r1, #12]
 80061ee:	4605      	mov	r5, r0
 80061f0:	05db      	lsls	r3, r3, #23
 80061f2:	460c      	mov	r4, r1
 80061f4:	4616      	mov	r6, r2
 80061f6:	d505      	bpl.n	8006204 <__swrite+0x1e>
 80061f8:	2302      	movs	r3, #2
 80061fa:	2200      	movs	r2, #0
 80061fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006200:	f000 f840 	bl	8006284 <_lseek_r>
 8006204:	89a3      	ldrh	r3, [r4, #12]
 8006206:	4632      	mov	r2, r6
 8006208:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800620c:	81a3      	strh	r3, [r4, #12]
 800620e:	4628      	mov	r0, r5
 8006210:	463b      	mov	r3, r7
 8006212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800621a:	f000 b857 	b.w	80062cc <_write_r>

0800621e <__sseek>:
 800621e:	b510      	push	{r4, lr}
 8006220:	460c      	mov	r4, r1
 8006222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006226:	f000 f82d 	bl	8006284 <_lseek_r>
 800622a:	1c43      	adds	r3, r0, #1
 800622c:	89a3      	ldrh	r3, [r4, #12]
 800622e:	bf15      	itete	ne
 8006230:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006232:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006236:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800623a:	81a3      	strheq	r3, [r4, #12]
 800623c:	bf18      	it	ne
 800623e:	81a3      	strhne	r3, [r4, #12]
 8006240:	bd10      	pop	{r4, pc}

08006242 <__sclose>:
 8006242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006246:	f000 b80d 	b.w	8006264 <_close_r>

0800624a <memset>:
 800624a:	4603      	mov	r3, r0
 800624c:	4402      	add	r2, r0
 800624e:	4293      	cmp	r3, r2
 8006250:	d100      	bne.n	8006254 <memset+0xa>
 8006252:	4770      	bx	lr
 8006254:	f803 1b01 	strb.w	r1, [r3], #1
 8006258:	e7f9      	b.n	800624e <memset+0x4>
	...

0800625c <_localeconv_r>:
 800625c:	4800      	ldr	r0, [pc, #0]	@ (8006260 <_localeconv_r+0x4>)
 800625e:	4770      	bx	lr
 8006260:	20000158 	.word	0x20000158

08006264 <_close_r>:
 8006264:	b538      	push	{r3, r4, r5, lr}
 8006266:	2300      	movs	r3, #0
 8006268:	4d05      	ldr	r5, [pc, #20]	@ (8006280 <_close_r+0x1c>)
 800626a:	4604      	mov	r4, r0
 800626c:	4608      	mov	r0, r1
 800626e:	602b      	str	r3, [r5, #0]
 8006270:	f7fb fd36 	bl	8001ce0 <_close>
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	d102      	bne.n	800627e <_close_r+0x1a>
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	b103      	cbz	r3, 800627e <_close_r+0x1a>
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	bd38      	pop	{r3, r4, r5, pc}
 8006280:	200004b8 	.word	0x200004b8

08006284 <_lseek_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4604      	mov	r4, r0
 8006288:	4608      	mov	r0, r1
 800628a:	4611      	mov	r1, r2
 800628c:	2200      	movs	r2, #0
 800628e:	4d05      	ldr	r5, [pc, #20]	@ (80062a4 <_lseek_r+0x20>)
 8006290:	602a      	str	r2, [r5, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	f7fb fd48 	bl	8001d28 <_lseek>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d102      	bne.n	80062a2 <_lseek_r+0x1e>
 800629c:	682b      	ldr	r3, [r5, #0]
 800629e:	b103      	cbz	r3, 80062a2 <_lseek_r+0x1e>
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	bd38      	pop	{r3, r4, r5, pc}
 80062a4:	200004b8 	.word	0x200004b8

080062a8 <_read_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	4604      	mov	r4, r0
 80062ac:	4608      	mov	r0, r1
 80062ae:	4611      	mov	r1, r2
 80062b0:	2200      	movs	r2, #0
 80062b2:	4d05      	ldr	r5, [pc, #20]	@ (80062c8 <_read_r+0x20>)
 80062b4:	602a      	str	r2, [r5, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	f7fb fcd9 	bl	8001c6e <_read>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d102      	bne.n	80062c6 <_read_r+0x1e>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	b103      	cbz	r3, 80062c6 <_read_r+0x1e>
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	200004b8 	.word	0x200004b8

080062cc <_write_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4604      	mov	r4, r0
 80062d0:	4608      	mov	r0, r1
 80062d2:	4611      	mov	r1, r2
 80062d4:	2200      	movs	r2, #0
 80062d6:	4d05      	ldr	r5, [pc, #20]	@ (80062ec <_write_r+0x20>)
 80062d8:	602a      	str	r2, [r5, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	f7fb fce4 	bl	8001ca8 <_write>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d102      	bne.n	80062ea <_write_r+0x1e>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	b103      	cbz	r3, 80062ea <_write_r+0x1e>
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	200004b8 	.word	0x200004b8

080062f0 <__errno>:
 80062f0:	4b01      	ldr	r3, [pc, #4]	@ (80062f8 <__errno+0x8>)
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	20000018 	.word	0x20000018

080062fc <__libc_init_array>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	2600      	movs	r6, #0
 8006300:	4d0c      	ldr	r5, [pc, #48]	@ (8006334 <__libc_init_array+0x38>)
 8006302:	4c0d      	ldr	r4, [pc, #52]	@ (8006338 <__libc_init_array+0x3c>)
 8006304:	1b64      	subs	r4, r4, r5
 8006306:	10a4      	asrs	r4, r4, #2
 8006308:	42a6      	cmp	r6, r4
 800630a:	d109      	bne.n	8006320 <__libc_init_array+0x24>
 800630c:	f002 f872 	bl	80083f4 <_init>
 8006310:	2600      	movs	r6, #0
 8006312:	4d0a      	ldr	r5, [pc, #40]	@ (800633c <__libc_init_array+0x40>)
 8006314:	4c0a      	ldr	r4, [pc, #40]	@ (8006340 <__libc_init_array+0x44>)
 8006316:	1b64      	subs	r4, r4, r5
 8006318:	10a4      	asrs	r4, r4, #2
 800631a:	42a6      	cmp	r6, r4
 800631c:	d105      	bne.n	800632a <__libc_init_array+0x2e>
 800631e:	bd70      	pop	{r4, r5, r6, pc}
 8006320:	f855 3b04 	ldr.w	r3, [r5], #4
 8006324:	4798      	blx	r3
 8006326:	3601      	adds	r6, #1
 8006328:	e7ee      	b.n	8006308 <__libc_init_array+0xc>
 800632a:	f855 3b04 	ldr.w	r3, [r5], #4
 800632e:	4798      	blx	r3
 8006330:	3601      	adds	r6, #1
 8006332:	e7f2      	b.n	800631a <__libc_init_array+0x1e>
 8006334:	08008880 	.word	0x08008880
 8006338:	08008880 	.word	0x08008880
 800633c:	08008880 	.word	0x08008880
 8006340:	08008884 	.word	0x08008884

08006344 <__retarget_lock_init_recursive>:
 8006344:	4770      	bx	lr

08006346 <__retarget_lock_acquire_recursive>:
 8006346:	4770      	bx	lr

08006348 <__retarget_lock_release_recursive>:
 8006348:	4770      	bx	lr

0800634a <memchr>:
 800634a:	4603      	mov	r3, r0
 800634c:	b510      	push	{r4, lr}
 800634e:	b2c9      	uxtb	r1, r1
 8006350:	4402      	add	r2, r0
 8006352:	4293      	cmp	r3, r2
 8006354:	4618      	mov	r0, r3
 8006356:	d101      	bne.n	800635c <memchr+0x12>
 8006358:	2000      	movs	r0, #0
 800635a:	e003      	b.n	8006364 <memchr+0x1a>
 800635c:	7804      	ldrb	r4, [r0, #0]
 800635e:	3301      	adds	r3, #1
 8006360:	428c      	cmp	r4, r1
 8006362:	d1f6      	bne.n	8006352 <memchr+0x8>
 8006364:	bd10      	pop	{r4, pc}

08006366 <memcpy>:
 8006366:	440a      	add	r2, r1
 8006368:	4291      	cmp	r1, r2
 800636a:	f100 33ff 	add.w	r3, r0, #4294967295
 800636e:	d100      	bne.n	8006372 <memcpy+0xc>
 8006370:	4770      	bx	lr
 8006372:	b510      	push	{r4, lr}
 8006374:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006378:	4291      	cmp	r1, r2
 800637a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800637e:	d1f9      	bne.n	8006374 <memcpy+0xe>
 8006380:	bd10      	pop	{r4, pc}

08006382 <quorem>:
 8006382:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006386:	6903      	ldr	r3, [r0, #16]
 8006388:	690c      	ldr	r4, [r1, #16]
 800638a:	4607      	mov	r7, r0
 800638c:	42a3      	cmp	r3, r4
 800638e:	db7e      	blt.n	800648e <quorem+0x10c>
 8006390:	3c01      	subs	r4, #1
 8006392:	00a3      	lsls	r3, r4, #2
 8006394:	f100 0514 	add.w	r5, r0, #20
 8006398:	f101 0814 	add.w	r8, r1, #20
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063a2:	9301      	str	r3, [sp, #4]
 80063a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063ac:	3301      	adds	r3, #1
 80063ae:	429a      	cmp	r2, r3
 80063b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80063b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063b8:	d32e      	bcc.n	8006418 <quorem+0x96>
 80063ba:	f04f 0a00 	mov.w	sl, #0
 80063be:	46c4      	mov	ip, r8
 80063c0:	46ae      	mov	lr, r5
 80063c2:	46d3      	mov	fp, sl
 80063c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063c8:	b298      	uxth	r0, r3
 80063ca:	fb06 a000 	mla	r0, r6, r0, sl
 80063ce:	0c1b      	lsrs	r3, r3, #16
 80063d0:	0c02      	lsrs	r2, r0, #16
 80063d2:	fb06 2303 	mla	r3, r6, r3, r2
 80063d6:	f8de 2000 	ldr.w	r2, [lr]
 80063da:	b280      	uxth	r0, r0
 80063dc:	b292      	uxth	r2, r2
 80063de:	1a12      	subs	r2, r2, r0
 80063e0:	445a      	add	r2, fp
 80063e2:	f8de 0000 	ldr.w	r0, [lr]
 80063e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80063f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80063f4:	b292      	uxth	r2, r2
 80063f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80063fa:	45e1      	cmp	r9, ip
 80063fc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006400:	f84e 2b04 	str.w	r2, [lr], #4
 8006404:	d2de      	bcs.n	80063c4 <quorem+0x42>
 8006406:	9b00      	ldr	r3, [sp, #0]
 8006408:	58eb      	ldr	r3, [r5, r3]
 800640a:	b92b      	cbnz	r3, 8006418 <quorem+0x96>
 800640c:	9b01      	ldr	r3, [sp, #4]
 800640e:	3b04      	subs	r3, #4
 8006410:	429d      	cmp	r5, r3
 8006412:	461a      	mov	r2, r3
 8006414:	d32f      	bcc.n	8006476 <quorem+0xf4>
 8006416:	613c      	str	r4, [r7, #16]
 8006418:	4638      	mov	r0, r7
 800641a:	f001 f97b 	bl	8007714 <__mcmp>
 800641e:	2800      	cmp	r0, #0
 8006420:	db25      	blt.n	800646e <quorem+0xec>
 8006422:	4629      	mov	r1, r5
 8006424:	2000      	movs	r0, #0
 8006426:	f858 2b04 	ldr.w	r2, [r8], #4
 800642a:	f8d1 c000 	ldr.w	ip, [r1]
 800642e:	fa1f fe82 	uxth.w	lr, r2
 8006432:	fa1f f38c 	uxth.w	r3, ip
 8006436:	eba3 030e 	sub.w	r3, r3, lr
 800643a:	4403      	add	r3, r0
 800643c:	0c12      	lsrs	r2, r2, #16
 800643e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006442:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006446:	b29b      	uxth	r3, r3
 8006448:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800644c:	45c1      	cmp	r9, r8
 800644e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006452:	f841 3b04 	str.w	r3, [r1], #4
 8006456:	d2e6      	bcs.n	8006426 <quorem+0xa4>
 8006458:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800645c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006460:	b922      	cbnz	r2, 800646c <quorem+0xea>
 8006462:	3b04      	subs	r3, #4
 8006464:	429d      	cmp	r5, r3
 8006466:	461a      	mov	r2, r3
 8006468:	d30b      	bcc.n	8006482 <quorem+0x100>
 800646a:	613c      	str	r4, [r7, #16]
 800646c:	3601      	adds	r6, #1
 800646e:	4630      	mov	r0, r6
 8006470:	b003      	add	sp, #12
 8006472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	3b04      	subs	r3, #4
 800647a:	2a00      	cmp	r2, #0
 800647c:	d1cb      	bne.n	8006416 <quorem+0x94>
 800647e:	3c01      	subs	r4, #1
 8006480:	e7c6      	b.n	8006410 <quorem+0x8e>
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	3b04      	subs	r3, #4
 8006486:	2a00      	cmp	r2, #0
 8006488:	d1ef      	bne.n	800646a <quorem+0xe8>
 800648a:	3c01      	subs	r4, #1
 800648c:	e7ea      	b.n	8006464 <quorem+0xe2>
 800648e:	2000      	movs	r0, #0
 8006490:	e7ee      	b.n	8006470 <quorem+0xee>
 8006492:	0000      	movs	r0, r0
 8006494:	0000      	movs	r0, r0
	...

08006498 <_dtoa_r>:
 8006498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	4614      	mov	r4, r2
 800649e:	461d      	mov	r5, r3
 80064a0:	69c7      	ldr	r7, [r0, #28]
 80064a2:	b097      	sub	sp, #92	@ 0x5c
 80064a4:	4683      	mov	fp, r0
 80064a6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80064aa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80064ac:	b97f      	cbnz	r7, 80064ce <_dtoa_r+0x36>
 80064ae:	2010      	movs	r0, #16
 80064b0:	f000 fe02 	bl	80070b8 <malloc>
 80064b4:	4602      	mov	r2, r0
 80064b6:	f8cb 001c 	str.w	r0, [fp, #28]
 80064ba:	b920      	cbnz	r0, 80064c6 <_dtoa_r+0x2e>
 80064bc:	21ef      	movs	r1, #239	@ 0xef
 80064be:	4ba8      	ldr	r3, [pc, #672]	@ (8006760 <_dtoa_r+0x2c8>)
 80064c0:	48a8      	ldr	r0, [pc, #672]	@ (8006764 <_dtoa_r+0x2cc>)
 80064c2:	f001 fe2d 	bl	8008120 <__assert_func>
 80064c6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80064ca:	6007      	str	r7, [r0, #0]
 80064cc:	60c7      	str	r7, [r0, #12]
 80064ce:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064d2:	6819      	ldr	r1, [r3, #0]
 80064d4:	b159      	cbz	r1, 80064ee <_dtoa_r+0x56>
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	2301      	movs	r3, #1
 80064da:	4093      	lsls	r3, r2
 80064dc:	604a      	str	r2, [r1, #4]
 80064de:	608b      	str	r3, [r1, #8]
 80064e0:	4658      	mov	r0, fp
 80064e2:	f000 fedf 	bl	80072a4 <_Bfree>
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	1e2b      	subs	r3, r5, #0
 80064f0:	bfaf      	iteee	ge
 80064f2:	2300      	movge	r3, #0
 80064f4:	2201      	movlt	r2, #1
 80064f6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80064fa:	9303      	strlt	r3, [sp, #12]
 80064fc:	bfa8      	it	ge
 80064fe:	6033      	strge	r3, [r6, #0]
 8006500:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006504:	4b98      	ldr	r3, [pc, #608]	@ (8006768 <_dtoa_r+0x2d0>)
 8006506:	bfb8      	it	lt
 8006508:	6032      	strlt	r2, [r6, #0]
 800650a:	ea33 0308 	bics.w	r3, r3, r8
 800650e:	d112      	bne.n	8006536 <_dtoa_r+0x9e>
 8006510:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006514:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800651c:	4323      	orrs	r3, r4
 800651e:	f000 8550 	beq.w	8006fc2 <_dtoa_r+0xb2a>
 8006522:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006524:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800676c <_dtoa_r+0x2d4>
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 8552 	beq.w	8006fd2 <_dtoa_r+0xb3a>
 800652e:	f10a 0303 	add.w	r3, sl, #3
 8006532:	f000 bd4c 	b.w	8006fce <_dtoa_r+0xb36>
 8006536:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800653a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800653e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006542:	2200      	movs	r2, #0
 8006544:	2300      	movs	r3, #0
 8006546:	f7fa fa2f 	bl	80009a8 <__aeabi_dcmpeq>
 800654a:	4607      	mov	r7, r0
 800654c:	b158      	cbz	r0, 8006566 <_dtoa_r+0xce>
 800654e:	2301      	movs	r3, #1
 8006550:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006556:	b113      	cbz	r3, 800655e <_dtoa_r+0xc6>
 8006558:	4b85      	ldr	r3, [pc, #532]	@ (8006770 <_dtoa_r+0x2d8>)
 800655a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006774 <_dtoa_r+0x2dc>
 8006562:	f000 bd36 	b.w	8006fd2 <_dtoa_r+0xb3a>
 8006566:	ab14      	add	r3, sp, #80	@ 0x50
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	ab15      	add	r3, sp, #84	@ 0x54
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	4658      	mov	r0, fp
 8006570:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006574:	f001 f97e 	bl	8007874 <__d2b>
 8006578:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800657c:	4681      	mov	r9, r0
 800657e:	2e00      	cmp	r6, #0
 8006580:	d077      	beq.n	8006672 <_dtoa_r+0x1da>
 8006582:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006586:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006588:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800658c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006590:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006594:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006598:	9712      	str	r7, [sp, #72]	@ 0x48
 800659a:	4619      	mov	r1, r3
 800659c:	2200      	movs	r2, #0
 800659e:	4b76      	ldr	r3, [pc, #472]	@ (8006778 <_dtoa_r+0x2e0>)
 80065a0:	f7f9 fde2 	bl	8000168 <__aeabi_dsub>
 80065a4:	a368      	add	r3, pc, #416	@ (adr r3, 8006748 <_dtoa_r+0x2b0>)
 80065a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065aa:	f7f9 ff95 	bl	80004d8 <__aeabi_dmul>
 80065ae:	a368      	add	r3, pc, #416	@ (adr r3, 8006750 <_dtoa_r+0x2b8>)
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	f7f9 fdda 	bl	800016c <__adddf3>
 80065b8:	4604      	mov	r4, r0
 80065ba:	4630      	mov	r0, r6
 80065bc:	460d      	mov	r5, r1
 80065be:	f7f9 ff21 	bl	8000404 <__aeabi_i2d>
 80065c2:	a365      	add	r3, pc, #404	@ (adr r3, 8006758 <_dtoa_r+0x2c0>)
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	f7f9 ff86 	bl	80004d8 <__aeabi_dmul>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4620      	mov	r0, r4
 80065d2:	4629      	mov	r1, r5
 80065d4:	f7f9 fdca 	bl	800016c <__adddf3>
 80065d8:	4604      	mov	r4, r0
 80065da:	460d      	mov	r5, r1
 80065dc:	f7fa fa2c 	bl	8000a38 <__aeabi_d2iz>
 80065e0:	2200      	movs	r2, #0
 80065e2:	4607      	mov	r7, r0
 80065e4:	2300      	movs	r3, #0
 80065e6:	4620      	mov	r0, r4
 80065e8:	4629      	mov	r1, r5
 80065ea:	f7fa f9e7 	bl	80009bc <__aeabi_dcmplt>
 80065ee:	b140      	cbz	r0, 8006602 <_dtoa_r+0x16a>
 80065f0:	4638      	mov	r0, r7
 80065f2:	f7f9 ff07 	bl	8000404 <__aeabi_i2d>
 80065f6:	4622      	mov	r2, r4
 80065f8:	462b      	mov	r3, r5
 80065fa:	f7fa f9d5 	bl	80009a8 <__aeabi_dcmpeq>
 80065fe:	b900      	cbnz	r0, 8006602 <_dtoa_r+0x16a>
 8006600:	3f01      	subs	r7, #1
 8006602:	2f16      	cmp	r7, #22
 8006604:	d853      	bhi.n	80066ae <_dtoa_r+0x216>
 8006606:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800660a:	4b5c      	ldr	r3, [pc, #368]	@ (800677c <_dtoa_r+0x2e4>)
 800660c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	f7fa f9d2 	bl	80009bc <__aeabi_dcmplt>
 8006618:	2800      	cmp	r0, #0
 800661a:	d04a      	beq.n	80066b2 <_dtoa_r+0x21a>
 800661c:	2300      	movs	r3, #0
 800661e:	3f01      	subs	r7, #1
 8006620:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006622:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006624:	1b9b      	subs	r3, r3, r6
 8006626:	1e5a      	subs	r2, r3, #1
 8006628:	bf46      	itte	mi
 800662a:	f1c3 0801 	rsbmi	r8, r3, #1
 800662e:	2300      	movmi	r3, #0
 8006630:	f04f 0800 	movpl.w	r8, #0
 8006634:	9209      	str	r2, [sp, #36]	@ 0x24
 8006636:	bf48      	it	mi
 8006638:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800663a:	2f00      	cmp	r7, #0
 800663c:	db3b      	blt.n	80066b6 <_dtoa_r+0x21e>
 800663e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006640:	970e      	str	r7, [sp, #56]	@ 0x38
 8006642:	443b      	add	r3, r7
 8006644:	9309      	str	r3, [sp, #36]	@ 0x24
 8006646:	2300      	movs	r3, #0
 8006648:	930a      	str	r3, [sp, #40]	@ 0x28
 800664a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800664c:	2b09      	cmp	r3, #9
 800664e:	d866      	bhi.n	800671e <_dtoa_r+0x286>
 8006650:	2b05      	cmp	r3, #5
 8006652:	bfc4      	itt	gt
 8006654:	3b04      	subgt	r3, #4
 8006656:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006658:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800665a:	bfc8      	it	gt
 800665c:	2400      	movgt	r4, #0
 800665e:	f1a3 0302 	sub.w	r3, r3, #2
 8006662:	bfd8      	it	le
 8006664:	2401      	movle	r4, #1
 8006666:	2b03      	cmp	r3, #3
 8006668:	d864      	bhi.n	8006734 <_dtoa_r+0x29c>
 800666a:	e8df f003 	tbb	[pc, r3]
 800666e:	382b      	.short	0x382b
 8006670:	5636      	.short	0x5636
 8006672:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006676:	441e      	add	r6, r3
 8006678:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800667c:	2b20      	cmp	r3, #32
 800667e:	bfc1      	itttt	gt
 8006680:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006684:	fa08 f803 	lslgt.w	r8, r8, r3
 8006688:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800668c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006690:	bfd6      	itet	le
 8006692:	f1c3 0320 	rsble	r3, r3, #32
 8006696:	ea48 0003 	orrgt.w	r0, r8, r3
 800669a:	fa04 f003 	lslle.w	r0, r4, r3
 800669e:	f7f9 fea1 	bl	80003e4 <__aeabi_ui2d>
 80066a2:	2201      	movs	r2, #1
 80066a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80066a8:	3e01      	subs	r6, #1
 80066aa:	9212      	str	r2, [sp, #72]	@ 0x48
 80066ac:	e775      	b.n	800659a <_dtoa_r+0x102>
 80066ae:	2301      	movs	r3, #1
 80066b0:	e7b6      	b.n	8006620 <_dtoa_r+0x188>
 80066b2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80066b4:	e7b5      	b.n	8006622 <_dtoa_r+0x18a>
 80066b6:	427b      	negs	r3, r7
 80066b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80066ba:	2300      	movs	r3, #0
 80066bc:	eba8 0807 	sub.w	r8, r8, r7
 80066c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80066c2:	e7c2      	b.n	800664a <_dtoa_r+0x1b2>
 80066c4:	2300      	movs	r3, #0
 80066c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	dc35      	bgt.n	800673a <_dtoa_r+0x2a2>
 80066ce:	2301      	movs	r3, #1
 80066d0:	461a      	mov	r2, r3
 80066d2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80066d6:	9221      	str	r2, [sp, #132]	@ 0x84
 80066d8:	e00b      	b.n	80066f2 <_dtoa_r+0x25a>
 80066da:	2301      	movs	r3, #1
 80066dc:	e7f3      	b.n	80066c6 <_dtoa_r+0x22e>
 80066de:	2300      	movs	r3, #0
 80066e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80066e4:	18fb      	adds	r3, r7, r3
 80066e6:	9308      	str	r3, [sp, #32]
 80066e8:	3301      	adds	r3, #1
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	9307      	str	r3, [sp, #28]
 80066ee:	bfb8      	it	lt
 80066f0:	2301      	movlt	r3, #1
 80066f2:	2100      	movs	r1, #0
 80066f4:	2204      	movs	r2, #4
 80066f6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80066fa:	f102 0514 	add.w	r5, r2, #20
 80066fe:	429d      	cmp	r5, r3
 8006700:	d91f      	bls.n	8006742 <_dtoa_r+0x2aa>
 8006702:	6041      	str	r1, [r0, #4]
 8006704:	4658      	mov	r0, fp
 8006706:	f000 fd8d 	bl	8007224 <_Balloc>
 800670a:	4682      	mov	sl, r0
 800670c:	2800      	cmp	r0, #0
 800670e:	d139      	bne.n	8006784 <_dtoa_r+0x2ec>
 8006710:	4602      	mov	r2, r0
 8006712:	f240 11af 	movw	r1, #431	@ 0x1af
 8006716:	4b1a      	ldr	r3, [pc, #104]	@ (8006780 <_dtoa_r+0x2e8>)
 8006718:	e6d2      	b.n	80064c0 <_dtoa_r+0x28>
 800671a:	2301      	movs	r3, #1
 800671c:	e7e0      	b.n	80066e0 <_dtoa_r+0x248>
 800671e:	2401      	movs	r4, #1
 8006720:	2300      	movs	r3, #0
 8006722:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006724:	9320      	str	r3, [sp, #128]	@ 0x80
 8006726:	f04f 33ff 	mov.w	r3, #4294967295
 800672a:	2200      	movs	r2, #0
 800672c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006730:	2312      	movs	r3, #18
 8006732:	e7d0      	b.n	80066d6 <_dtoa_r+0x23e>
 8006734:	2301      	movs	r3, #1
 8006736:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006738:	e7f5      	b.n	8006726 <_dtoa_r+0x28e>
 800673a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800673c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006740:	e7d7      	b.n	80066f2 <_dtoa_r+0x25a>
 8006742:	3101      	adds	r1, #1
 8006744:	0052      	lsls	r2, r2, #1
 8006746:	e7d8      	b.n	80066fa <_dtoa_r+0x262>
 8006748:	636f4361 	.word	0x636f4361
 800674c:	3fd287a7 	.word	0x3fd287a7
 8006750:	8b60c8b3 	.word	0x8b60c8b3
 8006754:	3fc68a28 	.word	0x3fc68a28
 8006758:	509f79fb 	.word	0x509f79fb
 800675c:	3fd34413 	.word	0x3fd34413
 8006760:	0800854b 	.word	0x0800854b
 8006764:	08008562 	.word	0x08008562
 8006768:	7ff00000 	.word	0x7ff00000
 800676c:	08008547 	.word	0x08008547
 8006770:	0800851b 	.word	0x0800851b
 8006774:	0800851a 	.word	0x0800851a
 8006778:	3ff80000 	.word	0x3ff80000
 800677c:	08008658 	.word	0x08008658
 8006780:	080085ba 	.word	0x080085ba
 8006784:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006788:	6018      	str	r0, [r3, #0]
 800678a:	9b07      	ldr	r3, [sp, #28]
 800678c:	2b0e      	cmp	r3, #14
 800678e:	f200 80a4 	bhi.w	80068da <_dtoa_r+0x442>
 8006792:	2c00      	cmp	r4, #0
 8006794:	f000 80a1 	beq.w	80068da <_dtoa_r+0x442>
 8006798:	2f00      	cmp	r7, #0
 800679a:	dd33      	ble.n	8006804 <_dtoa_r+0x36c>
 800679c:	4b86      	ldr	r3, [pc, #536]	@ (80069b8 <_dtoa_r+0x520>)
 800679e:	f007 020f 	and.w	r2, r7, #15
 80067a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067a6:	05f8      	lsls	r0, r7, #23
 80067a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80067ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80067b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80067b4:	d516      	bpl.n	80067e4 <_dtoa_r+0x34c>
 80067b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067ba:	4b80      	ldr	r3, [pc, #512]	@ (80069bc <_dtoa_r+0x524>)
 80067bc:	2603      	movs	r6, #3
 80067be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067c2:	f7f9 ffb3 	bl	800072c <__aeabi_ddiv>
 80067c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067ca:	f004 040f 	and.w	r4, r4, #15
 80067ce:	4d7b      	ldr	r5, [pc, #492]	@ (80069bc <_dtoa_r+0x524>)
 80067d0:	b954      	cbnz	r4, 80067e8 <_dtoa_r+0x350>
 80067d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067da:	f7f9 ffa7 	bl	800072c <__aeabi_ddiv>
 80067de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067e2:	e028      	b.n	8006836 <_dtoa_r+0x39e>
 80067e4:	2602      	movs	r6, #2
 80067e6:	e7f2      	b.n	80067ce <_dtoa_r+0x336>
 80067e8:	07e1      	lsls	r1, r4, #31
 80067ea:	d508      	bpl.n	80067fe <_dtoa_r+0x366>
 80067ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80067f4:	f7f9 fe70 	bl	80004d8 <__aeabi_dmul>
 80067f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067fc:	3601      	adds	r6, #1
 80067fe:	1064      	asrs	r4, r4, #1
 8006800:	3508      	adds	r5, #8
 8006802:	e7e5      	b.n	80067d0 <_dtoa_r+0x338>
 8006804:	f000 80d2 	beq.w	80069ac <_dtoa_r+0x514>
 8006808:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800680c:	427c      	negs	r4, r7
 800680e:	4b6a      	ldr	r3, [pc, #424]	@ (80069b8 <_dtoa_r+0x520>)
 8006810:	f004 020f 	and.w	r2, r4, #15
 8006814:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681c:	f7f9 fe5c 	bl	80004d8 <__aeabi_dmul>
 8006820:	2602      	movs	r6, #2
 8006822:	2300      	movs	r3, #0
 8006824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006828:	4d64      	ldr	r5, [pc, #400]	@ (80069bc <_dtoa_r+0x524>)
 800682a:	1124      	asrs	r4, r4, #4
 800682c:	2c00      	cmp	r4, #0
 800682e:	f040 80b2 	bne.w	8006996 <_dtoa_r+0x4fe>
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1d3      	bne.n	80067de <_dtoa_r+0x346>
 8006836:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800683a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 80b7 	beq.w	80069b0 <_dtoa_r+0x518>
 8006842:	2200      	movs	r2, #0
 8006844:	4620      	mov	r0, r4
 8006846:	4629      	mov	r1, r5
 8006848:	4b5d      	ldr	r3, [pc, #372]	@ (80069c0 <_dtoa_r+0x528>)
 800684a:	f7fa f8b7 	bl	80009bc <__aeabi_dcmplt>
 800684e:	2800      	cmp	r0, #0
 8006850:	f000 80ae 	beq.w	80069b0 <_dtoa_r+0x518>
 8006854:	9b07      	ldr	r3, [sp, #28]
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 80aa 	beq.w	80069b0 <_dtoa_r+0x518>
 800685c:	9b08      	ldr	r3, [sp, #32]
 800685e:	2b00      	cmp	r3, #0
 8006860:	dd37      	ble.n	80068d2 <_dtoa_r+0x43a>
 8006862:	1e7b      	subs	r3, r7, #1
 8006864:	4620      	mov	r0, r4
 8006866:	9304      	str	r3, [sp, #16]
 8006868:	2200      	movs	r2, #0
 800686a:	4629      	mov	r1, r5
 800686c:	4b55      	ldr	r3, [pc, #340]	@ (80069c4 <_dtoa_r+0x52c>)
 800686e:	f7f9 fe33 	bl	80004d8 <__aeabi_dmul>
 8006872:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006876:	9c08      	ldr	r4, [sp, #32]
 8006878:	3601      	adds	r6, #1
 800687a:	4630      	mov	r0, r6
 800687c:	f7f9 fdc2 	bl	8000404 <__aeabi_i2d>
 8006880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006884:	f7f9 fe28 	bl	80004d8 <__aeabi_dmul>
 8006888:	2200      	movs	r2, #0
 800688a:	4b4f      	ldr	r3, [pc, #316]	@ (80069c8 <_dtoa_r+0x530>)
 800688c:	f7f9 fc6e 	bl	800016c <__adddf3>
 8006890:	4605      	mov	r5, r0
 8006892:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006896:	2c00      	cmp	r4, #0
 8006898:	f040 809a 	bne.w	80069d0 <_dtoa_r+0x538>
 800689c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068a0:	2200      	movs	r2, #0
 80068a2:	4b4a      	ldr	r3, [pc, #296]	@ (80069cc <_dtoa_r+0x534>)
 80068a4:	f7f9 fc60 	bl	8000168 <__aeabi_dsub>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80068b0:	462a      	mov	r2, r5
 80068b2:	4633      	mov	r3, r6
 80068b4:	f7fa f8a0 	bl	80009f8 <__aeabi_dcmpgt>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	f040 828e 	bne.w	8006dda <_dtoa_r+0x942>
 80068be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068c2:	462a      	mov	r2, r5
 80068c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80068c8:	f7fa f878 	bl	80009bc <__aeabi_dcmplt>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	f040 8127 	bne.w	8006b20 <_dtoa_r+0x688>
 80068d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80068d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80068da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f2c0 8163 	blt.w	8006ba8 <_dtoa_r+0x710>
 80068e2:	2f0e      	cmp	r7, #14
 80068e4:	f300 8160 	bgt.w	8006ba8 <_dtoa_r+0x710>
 80068e8:	4b33      	ldr	r3, [pc, #204]	@ (80069b8 <_dtoa_r+0x520>)
 80068ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80068f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	da03      	bge.n	8006904 <_dtoa_r+0x46c>
 80068fc:	9b07      	ldr	r3, [sp, #28]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f340 8100 	ble.w	8006b04 <_dtoa_r+0x66c>
 8006904:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006908:	4656      	mov	r6, sl
 800690a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800690e:	4620      	mov	r0, r4
 8006910:	4629      	mov	r1, r5
 8006912:	f7f9 ff0b 	bl	800072c <__aeabi_ddiv>
 8006916:	f7fa f88f 	bl	8000a38 <__aeabi_d2iz>
 800691a:	4680      	mov	r8, r0
 800691c:	f7f9 fd72 	bl	8000404 <__aeabi_i2d>
 8006920:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006924:	f7f9 fdd8 	bl	80004d8 <__aeabi_dmul>
 8006928:	4602      	mov	r2, r0
 800692a:	460b      	mov	r3, r1
 800692c:	4620      	mov	r0, r4
 800692e:	4629      	mov	r1, r5
 8006930:	f7f9 fc1a 	bl	8000168 <__aeabi_dsub>
 8006934:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006938:	9d07      	ldr	r5, [sp, #28]
 800693a:	f806 4b01 	strb.w	r4, [r6], #1
 800693e:	eba6 040a 	sub.w	r4, r6, sl
 8006942:	42a5      	cmp	r5, r4
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	f040 8116 	bne.w	8006b78 <_dtoa_r+0x6e0>
 800694c:	f7f9 fc0e 	bl	800016c <__adddf3>
 8006950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006954:	4604      	mov	r4, r0
 8006956:	460d      	mov	r5, r1
 8006958:	f7fa f84e 	bl	80009f8 <__aeabi_dcmpgt>
 800695c:	2800      	cmp	r0, #0
 800695e:	f040 80f8 	bne.w	8006b52 <_dtoa_r+0x6ba>
 8006962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006966:	4620      	mov	r0, r4
 8006968:	4629      	mov	r1, r5
 800696a:	f7fa f81d 	bl	80009a8 <__aeabi_dcmpeq>
 800696e:	b118      	cbz	r0, 8006978 <_dtoa_r+0x4e0>
 8006970:	f018 0f01 	tst.w	r8, #1
 8006974:	f040 80ed 	bne.w	8006b52 <_dtoa_r+0x6ba>
 8006978:	4649      	mov	r1, r9
 800697a:	4658      	mov	r0, fp
 800697c:	f000 fc92 	bl	80072a4 <_Bfree>
 8006980:	2300      	movs	r3, #0
 8006982:	7033      	strb	r3, [r6, #0]
 8006984:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006986:	3701      	adds	r7, #1
 8006988:	601f      	str	r7, [r3, #0]
 800698a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 8320 	beq.w	8006fd2 <_dtoa_r+0xb3a>
 8006992:	601e      	str	r6, [r3, #0]
 8006994:	e31d      	b.n	8006fd2 <_dtoa_r+0xb3a>
 8006996:	07e2      	lsls	r2, r4, #31
 8006998:	d505      	bpl.n	80069a6 <_dtoa_r+0x50e>
 800699a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800699e:	f7f9 fd9b 	bl	80004d8 <__aeabi_dmul>
 80069a2:	2301      	movs	r3, #1
 80069a4:	3601      	adds	r6, #1
 80069a6:	1064      	asrs	r4, r4, #1
 80069a8:	3508      	adds	r5, #8
 80069aa:	e73f      	b.n	800682c <_dtoa_r+0x394>
 80069ac:	2602      	movs	r6, #2
 80069ae:	e742      	b.n	8006836 <_dtoa_r+0x39e>
 80069b0:	9c07      	ldr	r4, [sp, #28]
 80069b2:	9704      	str	r7, [sp, #16]
 80069b4:	e761      	b.n	800687a <_dtoa_r+0x3e2>
 80069b6:	bf00      	nop
 80069b8:	08008658 	.word	0x08008658
 80069bc:	08008630 	.word	0x08008630
 80069c0:	3ff00000 	.word	0x3ff00000
 80069c4:	40240000 	.word	0x40240000
 80069c8:	401c0000 	.word	0x401c0000
 80069cc:	40140000 	.word	0x40140000
 80069d0:	4b70      	ldr	r3, [pc, #448]	@ (8006b94 <_dtoa_r+0x6fc>)
 80069d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069dc:	4454      	add	r4, sl
 80069de:	2900      	cmp	r1, #0
 80069e0:	d045      	beq.n	8006a6e <_dtoa_r+0x5d6>
 80069e2:	2000      	movs	r0, #0
 80069e4:	496c      	ldr	r1, [pc, #432]	@ (8006b98 <_dtoa_r+0x700>)
 80069e6:	f7f9 fea1 	bl	800072c <__aeabi_ddiv>
 80069ea:	4633      	mov	r3, r6
 80069ec:	462a      	mov	r2, r5
 80069ee:	f7f9 fbbb 	bl	8000168 <__aeabi_dsub>
 80069f2:	4656      	mov	r6, sl
 80069f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80069f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069fc:	f7fa f81c 	bl	8000a38 <__aeabi_d2iz>
 8006a00:	4605      	mov	r5, r0
 8006a02:	f7f9 fcff 	bl	8000404 <__aeabi_i2d>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a0e:	f7f9 fbab 	bl	8000168 <__aeabi_dsub>
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	3530      	adds	r5, #48	@ 0x30
 8006a18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a20:	f806 5b01 	strb.w	r5, [r6], #1
 8006a24:	f7f9 ffca 	bl	80009bc <__aeabi_dcmplt>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d163      	bne.n	8006af4 <_dtoa_r+0x65c>
 8006a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a30:	2000      	movs	r0, #0
 8006a32:	495a      	ldr	r1, [pc, #360]	@ (8006b9c <_dtoa_r+0x704>)
 8006a34:	f7f9 fb98 	bl	8000168 <__aeabi_dsub>
 8006a38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a3c:	f7f9 ffbe 	bl	80009bc <__aeabi_dcmplt>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	f040 8087 	bne.w	8006b54 <_dtoa_r+0x6bc>
 8006a46:	42a6      	cmp	r6, r4
 8006a48:	f43f af43 	beq.w	80068d2 <_dtoa_r+0x43a>
 8006a4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a50:	2200      	movs	r2, #0
 8006a52:	4b53      	ldr	r3, [pc, #332]	@ (8006ba0 <_dtoa_r+0x708>)
 8006a54:	f7f9 fd40 	bl	80004d8 <__aeabi_dmul>
 8006a58:	2200      	movs	r2, #0
 8006a5a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a62:	4b4f      	ldr	r3, [pc, #316]	@ (8006ba0 <_dtoa_r+0x708>)
 8006a64:	f7f9 fd38 	bl	80004d8 <__aeabi_dmul>
 8006a68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a6c:	e7c4      	b.n	80069f8 <_dtoa_r+0x560>
 8006a6e:	4631      	mov	r1, r6
 8006a70:	4628      	mov	r0, r5
 8006a72:	f7f9 fd31 	bl	80004d8 <__aeabi_dmul>
 8006a76:	4656      	mov	r6, sl
 8006a78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a7c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006a7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a82:	f7f9 ffd9 	bl	8000a38 <__aeabi_d2iz>
 8006a86:	4605      	mov	r5, r0
 8006a88:	f7f9 fcbc 	bl	8000404 <__aeabi_i2d>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a94:	f7f9 fb68 	bl	8000168 <__aeabi_dsub>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	3530      	adds	r5, #48	@ 0x30
 8006a9e:	f806 5b01 	strb.w	r5, [r6], #1
 8006aa2:	42a6      	cmp	r6, r4
 8006aa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	d124      	bne.n	8006af8 <_dtoa_r+0x660>
 8006aae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ab2:	4b39      	ldr	r3, [pc, #228]	@ (8006b98 <_dtoa_r+0x700>)
 8006ab4:	f7f9 fb5a 	bl	800016c <__adddf3>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ac0:	f7f9 ff9a 	bl	80009f8 <__aeabi_dcmpgt>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d145      	bne.n	8006b54 <_dtoa_r+0x6bc>
 8006ac8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006acc:	2000      	movs	r0, #0
 8006ace:	4932      	ldr	r1, [pc, #200]	@ (8006b98 <_dtoa_r+0x700>)
 8006ad0:	f7f9 fb4a 	bl	8000168 <__aeabi_dsub>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006adc:	f7f9 ff6e 	bl	80009bc <__aeabi_dcmplt>
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	f43f aef6 	beq.w	80068d2 <_dtoa_r+0x43a>
 8006ae6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006ae8:	1e73      	subs	r3, r6, #1
 8006aea:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006aec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006af0:	2b30      	cmp	r3, #48	@ 0x30
 8006af2:	d0f8      	beq.n	8006ae6 <_dtoa_r+0x64e>
 8006af4:	9f04      	ldr	r7, [sp, #16]
 8006af6:	e73f      	b.n	8006978 <_dtoa_r+0x4e0>
 8006af8:	4b29      	ldr	r3, [pc, #164]	@ (8006ba0 <_dtoa_r+0x708>)
 8006afa:	f7f9 fced 	bl	80004d8 <__aeabi_dmul>
 8006afe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b02:	e7bc      	b.n	8006a7e <_dtoa_r+0x5e6>
 8006b04:	d10c      	bne.n	8006b20 <_dtoa_r+0x688>
 8006b06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	4b25      	ldr	r3, [pc, #148]	@ (8006ba4 <_dtoa_r+0x70c>)
 8006b0e:	f7f9 fce3 	bl	80004d8 <__aeabi_dmul>
 8006b12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b16:	f7f9 ff65 	bl	80009e4 <__aeabi_dcmpge>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	f000 815b 	beq.w	8006dd6 <_dtoa_r+0x93e>
 8006b20:	2400      	movs	r4, #0
 8006b22:	4625      	mov	r5, r4
 8006b24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b26:	4656      	mov	r6, sl
 8006b28:	43db      	mvns	r3, r3
 8006b2a:	9304      	str	r3, [sp, #16]
 8006b2c:	2700      	movs	r7, #0
 8006b2e:	4621      	mov	r1, r4
 8006b30:	4658      	mov	r0, fp
 8006b32:	f000 fbb7 	bl	80072a4 <_Bfree>
 8006b36:	2d00      	cmp	r5, #0
 8006b38:	d0dc      	beq.n	8006af4 <_dtoa_r+0x65c>
 8006b3a:	b12f      	cbz	r7, 8006b48 <_dtoa_r+0x6b0>
 8006b3c:	42af      	cmp	r7, r5
 8006b3e:	d003      	beq.n	8006b48 <_dtoa_r+0x6b0>
 8006b40:	4639      	mov	r1, r7
 8006b42:	4658      	mov	r0, fp
 8006b44:	f000 fbae 	bl	80072a4 <_Bfree>
 8006b48:	4629      	mov	r1, r5
 8006b4a:	4658      	mov	r0, fp
 8006b4c:	f000 fbaa 	bl	80072a4 <_Bfree>
 8006b50:	e7d0      	b.n	8006af4 <_dtoa_r+0x65c>
 8006b52:	9704      	str	r7, [sp, #16]
 8006b54:	4633      	mov	r3, r6
 8006b56:	461e      	mov	r6, r3
 8006b58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b5c:	2a39      	cmp	r2, #57	@ 0x39
 8006b5e:	d107      	bne.n	8006b70 <_dtoa_r+0x6d8>
 8006b60:	459a      	cmp	sl, r3
 8006b62:	d1f8      	bne.n	8006b56 <_dtoa_r+0x6be>
 8006b64:	9a04      	ldr	r2, [sp, #16]
 8006b66:	3201      	adds	r2, #1
 8006b68:	9204      	str	r2, [sp, #16]
 8006b6a:	2230      	movs	r2, #48	@ 0x30
 8006b6c:	f88a 2000 	strb.w	r2, [sl]
 8006b70:	781a      	ldrb	r2, [r3, #0]
 8006b72:	3201      	adds	r2, #1
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	e7bd      	b.n	8006af4 <_dtoa_r+0x65c>
 8006b78:	2200      	movs	r2, #0
 8006b7a:	4b09      	ldr	r3, [pc, #36]	@ (8006ba0 <_dtoa_r+0x708>)
 8006b7c:	f7f9 fcac 	bl	80004d8 <__aeabi_dmul>
 8006b80:	2200      	movs	r2, #0
 8006b82:	2300      	movs	r3, #0
 8006b84:	4604      	mov	r4, r0
 8006b86:	460d      	mov	r5, r1
 8006b88:	f7f9 ff0e 	bl	80009a8 <__aeabi_dcmpeq>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	f43f aebc 	beq.w	800690a <_dtoa_r+0x472>
 8006b92:	e6f1      	b.n	8006978 <_dtoa_r+0x4e0>
 8006b94:	08008658 	.word	0x08008658
 8006b98:	3fe00000 	.word	0x3fe00000
 8006b9c:	3ff00000 	.word	0x3ff00000
 8006ba0:	40240000 	.word	0x40240000
 8006ba4:	40140000 	.word	0x40140000
 8006ba8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006baa:	2a00      	cmp	r2, #0
 8006bac:	f000 80db 	beq.w	8006d66 <_dtoa_r+0x8ce>
 8006bb0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006bb2:	2a01      	cmp	r2, #1
 8006bb4:	f300 80bf 	bgt.w	8006d36 <_dtoa_r+0x89e>
 8006bb8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006bba:	2a00      	cmp	r2, #0
 8006bbc:	f000 80b7 	beq.w	8006d2e <_dtoa_r+0x896>
 8006bc0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006bc4:	4646      	mov	r6, r8
 8006bc6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006bc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bca:	2101      	movs	r1, #1
 8006bcc:	441a      	add	r2, r3
 8006bce:	4658      	mov	r0, fp
 8006bd0:	4498      	add	r8, r3
 8006bd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bd4:	f000 fc1a 	bl	800740c <__i2b>
 8006bd8:	4605      	mov	r5, r0
 8006bda:	b15e      	cbz	r6, 8006bf4 <_dtoa_r+0x75c>
 8006bdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	dd08      	ble.n	8006bf4 <_dtoa_r+0x75c>
 8006be2:	42b3      	cmp	r3, r6
 8006be4:	bfa8      	it	ge
 8006be6:	4633      	movge	r3, r6
 8006be8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bea:	eba8 0803 	sub.w	r8, r8, r3
 8006bee:	1af6      	subs	r6, r6, r3
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bf6:	b1f3      	cbz	r3, 8006c36 <_dtoa_r+0x79e>
 8006bf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 80b7 	beq.w	8006d6e <_dtoa_r+0x8d6>
 8006c00:	b18c      	cbz	r4, 8006c26 <_dtoa_r+0x78e>
 8006c02:	4629      	mov	r1, r5
 8006c04:	4622      	mov	r2, r4
 8006c06:	4658      	mov	r0, fp
 8006c08:	f000 fcbe 	bl	8007588 <__pow5mult>
 8006c0c:	464a      	mov	r2, r9
 8006c0e:	4601      	mov	r1, r0
 8006c10:	4605      	mov	r5, r0
 8006c12:	4658      	mov	r0, fp
 8006c14:	f000 fc10 	bl	8007438 <__multiply>
 8006c18:	4649      	mov	r1, r9
 8006c1a:	9004      	str	r0, [sp, #16]
 8006c1c:	4658      	mov	r0, fp
 8006c1e:	f000 fb41 	bl	80072a4 <_Bfree>
 8006c22:	9b04      	ldr	r3, [sp, #16]
 8006c24:	4699      	mov	r9, r3
 8006c26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c28:	1b1a      	subs	r2, r3, r4
 8006c2a:	d004      	beq.n	8006c36 <_dtoa_r+0x79e>
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	4658      	mov	r0, fp
 8006c30:	f000 fcaa 	bl	8007588 <__pow5mult>
 8006c34:	4681      	mov	r9, r0
 8006c36:	2101      	movs	r1, #1
 8006c38:	4658      	mov	r0, fp
 8006c3a:	f000 fbe7 	bl	800740c <__i2b>
 8006c3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c40:	4604      	mov	r4, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 81c9 	beq.w	8006fda <_dtoa_r+0xb42>
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4601      	mov	r1, r0
 8006c4c:	4658      	mov	r0, fp
 8006c4e:	f000 fc9b 	bl	8007588 <__pow5mult>
 8006c52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c54:	4604      	mov	r4, r0
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	f300 808f 	bgt.w	8006d7a <_dtoa_r+0x8e2>
 8006c5c:	9b02      	ldr	r3, [sp, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f040 8087 	bne.w	8006d72 <_dtoa_r+0x8da>
 8006c64:	9b03      	ldr	r3, [sp, #12]
 8006c66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f040 8083 	bne.w	8006d76 <_dtoa_r+0x8de>
 8006c70:	9b03      	ldr	r3, [sp, #12]
 8006c72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c76:	0d1b      	lsrs	r3, r3, #20
 8006c78:	051b      	lsls	r3, r3, #20
 8006c7a:	b12b      	cbz	r3, 8006c88 <_dtoa_r+0x7f0>
 8006c7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c7e:	f108 0801 	add.w	r8, r8, #1
 8006c82:	3301      	adds	r3, #1
 8006c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c86:	2301      	movs	r3, #1
 8006c88:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 81aa 	beq.w	8006fe6 <_dtoa_r+0xb4e>
 8006c92:	6923      	ldr	r3, [r4, #16]
 8006c94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c98:	6918      	ldr	r0, [r3, #16]
 8006c9a:	f000 fb6b 	bl	8007374 <__hi0bits>
 8006c9e:	f1c0 0020 	rsb	r0, r0, #32
 8006ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ca4:	4418      	add	r0, r3
 8006ca6:	f010 001f 	ands.w	r0, r0, #31
 8006caa:	d071      	beq.n	8006d90 <_dtoa_r+0x8f8>
 8006cac:	f1c0 0320 	rsb	r3, r0, #32
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	dd65      	ble.n	8006d80 <_dtoa_r+0x8e8>
 8006cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cb6:	f1c0 001c 	rsb	r0, r0, #28
 8006cba:	4403      	add	r3, r0
 8006cbc:	4480      	add	r8, r0
 8006cbe:	4406      	add	r6, r0
 8006cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cc2:	f1b8 0f00 	cmp.w	r8, #0
 8006cc6:	dd05      	ble.n	8006cd4 <_dtoa_r+0x83c>
 8006cc8:	4649      	mov	r1, r9
 8006cca:	4642      	mov	r2, r8
 8006ccc:	4658      	mov	r0, fp
 8006cce:	f000 fcb5 	bl	800763c <__lshift>
 8006cd2:	4681      	mov	r9, r0
 8006cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	dd05      	ble.n	8006ce6 <_dtoa_r+0x84e>
 8006cda:	4621      	mov	r1, r4
 8006cdc:	461a      	mov	r2, r3
 8006cde:	4658      	mov	r0, fp
 8006ce0:	f000 fcac 	bl	800763c <__lshift>
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d053      	beq.n	8006d94 <_dtoa_r+0x8fc>
 8006cec:	4621      	mov	r1, r4
 8006cee:	4648      	mov	r0, r9
 8006cf0:	f000 fd10 	bl	8007714 <__mcmp>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	da4d      	bge.n	8006d94 <_dtoa_r+0x8fc>
 8006cf8:	1e7b      	subs	r3, r7, #1
 8006cfa:	4649      	mov	r1, r9
 8006cfc:	9304      	str	r3, [sp, #16]
 8006cfe:	220a      	movs	r2, #10
 8006d00:	2300      	movs	r3, #0
 8006d02:	4658      	mov	r0, fp
 8006d04:	f000 faf0 	bl	80072e8 <__multadd>
 8006d08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d0a:	4681      	mov	r9, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 816c 	beq.w	8006fea <_dtoa_r+0xb52>
 8006d12:	2300      	movs	r3, #0
 8006d14:	4629      	mov	r1, r5
 8006d16:	220a      	movs	r2, #10
 8006d18:	4658      	mov	r0, fp
 8006d1a:	f000 fae5 	bl	80072e8 <__multadd>
 8006d1e:	9b08      	ldr	r3, [sp, #32]
 8006d20:	4605      	mov	r5, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	dc61      	bgt.n	8006dea <_dtoa_r+0x952>
 8006d26:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	dc3b      	bgt.n	8006da4 <_dtoa_r+0x90c>
 8006d2c:	e05d      	b.n	8006dea <_dtoa_r+0x952>
 8006d2e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d30:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d34:	e746      	b.n	8006bc4 <_dtoa_r+0x72c>
 8006d36:	9b07      	ldr	r3, [sp, #28]
 8006d38:	1e5c      	subs	r4, r3, #1
 8006d3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	bfbf      	itttt	lt
 8006d40:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006d42:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006d44:	1ae3      	sublt	r3, r4, r3
 8006d46:	18d2      	addlt	r2, r2, r3
 8006d48:	bfa8      	it	ge
 8006d4a:	1b1c      	subge	r4, r3, r4
 8006d4c:	9b07      	ldr	r3, [sp, #28]
 8006d4e:	bfbe      	ittt	lt
 8006d50:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006d52:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006d54:	2400      	movlt	r4, #0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	bfb5      	itete	lt
 8006d5a:	eba8 0603 	sublt.w	r6, r8, r3
 8006d5e:	4646      	movge	r6, r8
 8006d60:	2300      	movlt	r3, #0
 8006d62:	9b07      	ldrge	r3, [sp, #28]
 8006d64:	e730      	b.n	8006bc8 <_dtoa_r+0x730>
 8006d66:	4646      	mov	r6, r8
 8006d68:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d6a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006d6c:	e735      	b.n	8006bda <_dtoa_r+0x742>
 8006d6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d70:	e75c      	b.n	8006c2c <_dtoa_r+0x794>
 8006d72:	2300      	movs	r3, #0
 8006d74:	e788      	b.n	8006c88 <_dtoa_r+0x7f0>
 8006d76:	9b02      	ldr	r3, [sp, #8]
 8006d78:	e786      	b.n	8006c88 <_dtoa_r+0x7f0>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d7e:	e788      	b.n	8006c92 <_dtoa_r+0x7fa>
 8006d80:	d09f      	beq.n	8006cc2 <_dtoa_r+0x82a>
 8006d82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d84:	331c      	adds	r3, #28
 8006d86:	441a      	add	r2, r3
 8006d88:	4498      	add	r8, r3
 8006d8a:	441e      	add	r6, r3
 8006d8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d8e:	e798      	b.n	8006cc2 <_dtoa_r+0x82a>
 8006d90:	4603      	mov	r3, r0
 8006d92:	e7f6      	b.n	8006d82 <_dtoa_r+0x8ea>
 8006d94:	9b07      	ldr	r3, [sp, #28]
 8006d96:	9704      	str	r7, [sp, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	dc20      	bgt.n	8006dde <_dtoa_r+0x946>
 8006d9c:	9308      	str	r3, [sp, #32]
 8006d9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	dd1e      	ble.n	8006de2 <_dtoa_r+0x94a>
 8006da4:	9b08      	ldr	r3, [sp, #32]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f47f aebc 	bne.w	8006b24 <_dtoa_r+0x68c>
 8006dac:	4621      	mov	r1, r4
 8006dae:	2205      	movs	r2, #5
 8006db0:	4658      	mov	r0, fp
 8006db2:	f000 fa99 	bl	80072e8 <__multadd>
 8006db6:	4601      	mov	r1, r0
 8006db8:	4604      	mov	r4, r0
 8006dba:	4648      	mov	r0, r9
 8006dbc:	f000 fcaa 	bl	8007714 <__mcmp>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	f77f aeaf 	ble.w	8006b24 <_dtoa_r+0x68c>
 8006dc6:	2331      	movs	r3, #49	@ 0x31
 8006dc8:	4656      	mov	r6, sl
 8006dca:	f806 3b01 	strb.w	r3, [r6], #1
 8006dce:	9b04      	ldr	r3, [sp, #16]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	9304      	str	r3, [sp, #16]
 8006dd4:	e6aa      	b.n	8006b2c <_dtoa_r+0x694>
 8006dd6:	9c07      	ldr	r4, [sp, #28]
 8006dd8:	9704      	str	r7, [sp, #16]
 8006dda:	4625      	mov	r5, r4
 8006ddc:	e7f3      	b.n	8006dc6 <_dtoa_r+0x92e>
 8006dde:	9b07      	ldr	r3, [sp, #28]
 8006de0:	9308      	str	r3, [sp, #32]
 8006de2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 8104 	beq.w	8006ff2 <_dtoa_r+0xb5a>
 8006dea:	2e00      	cmp	r6, #0
 8006dec:	dd05      	ble.n	8006dfa <_dtoa_r+0x962>
 8006dee:	4629      	mov	r1, r5
 8006df0:	4632      	mov	r2, r6
 8006df2:	4658      	mov	r0, fp
 8006df4:	f000 fc22 	bl	800763c <__lshift>
 8006df8:	4605      	mov	r5, r0
 8006dfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d05a      	beq.n	8006eb6 <_dtoa_r+0xa1e>
 8006e00:	4658      	mov	r0, fp
 8006e02:	6869      	ldr	r1, [r5, #4]
 8006e04:	f000 fa0e 	bl	8007224 <_Balloc>
 8006e08:	4606      	mov	r6, r0
 8006e0a:	b928      	cbnz	r0, 8006e18 <_dtoa_r+0x980>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e12:	4b83      	ldr	r3, [pc, #524]	@ (8007020 <_dtoa_r+0xb88>)
 8006e14:	f7ff bb54 	b.w	80064c0 <_dtoa_r+0x28>
 8006e18:	692a      	ldr	r2, [r5, #16]
 8006e1a:	f105 010c 	add.w	r1, r5, #12
 8006e1e:	3202      	adds	r2, #2
 8006e20:	0092      	lsls	r2, r2, #2
 8006e22:	300c      	adds	r0, #12
 8006e24:	f7ff fa9f 	bl	8006366 <memcpy>
 8006e28:	2201      	movs	r2, #1
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4658      	mov	r0, fp
 8006e2e:	f000 fc05 	bl	800763c <__lshift>
 8006e32:	462f      	mov	r7, r5
 8006e34:	4605      	mov	r5, r0
 8006e36:	f10a 0301 	add.w	r3, sl, #1
 8006e3a:	9307      	str	r3, [sp, #28]
 8006e3c:	9b08      	ldr	r3, [sp, #32]
 8006e3e:	4453      	add	r3, sl
 8006e40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e42:	9b02      	ldr	r3, [sp, #8]
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e4a:	9b07      	ldr	r3, [sp, #28]
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	4648      	mov	r0, r9
 8006e52:	9302      	str	r3, [sp, #8]
 8006e54:	f7ff fa95 	bl	8006382 <quorem>
 8006e58:	4639      	mov	r1, r7
 8006e5a:	9008      	str	r0, [sp, #32]
 8006e5c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006e60:	4648      	mov	r0, r9
 8006e62:	f000 fc57 	bl	8007714 <__mcmp>
 8006e66:	462a      	mov	r2, r5
 8006e68:	9009      	str	r0, [sp, #36]	@ 0x24
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	4658      	mov	r0, fp
 8006e6e:	f000 fc6d 	bl	800774c <__mdiff>
 8006e72:	68c2      	ldr	r2, [r0, #12]
 8006e74:	4606      	mov	r6, r0
 8006e76:	bb02      	cbnz	r2, 8006eba <_dtoa_r+0xa22>
 8006e78:	4601      	mov	r1, r0
 8006e7a:	4648      	mov	r0, r9
 8006e7c:	f000 fc4a 	bl	8007714 <__mcmp>
 8006e80:	4602      	mov	r2, r0
 8006e82:	4631      	mov	r1, r6
 8006e84:	4658      	mov	r0, fp
 8006e86:	920c      	str	r2, [sp, #48]	@ 0x30
 8006e88:	f000 fa0c 	bl	80072a4 <_Bfree>
 8006e8c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006e90:	9e07      	ldr	r6, [sp, #28]
 8006e92:	ea43 0102 	orr.w	r1, r3, r2
 8006e96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e98:	4319      	orrs	r1, r3
 8006e9a:	d110      	bne.n	8006ebe <_dtoa_r+0xa26>
 8006e9c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ea0:	d029      	beq.n	8006ef6 <_dtoa_r+0xa5e>
 8006ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	dd02      	ble.n	8006eae <_dtoa_r+0xa16>
 8006ea8:	9b08      	ldr	r3, [sp, #32]
 8006eaa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006eae:	9b02      	ldr	r3, [sp, #8]
 8006eb0:	f883 8000 	strb.w	r8, [r3]
 8006eb4:	e63b      	b.n	8006b2e <_dtoa_r+0x696>
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	e7bb      	b.n	8006e32 <_dtoa_r+0x99a>
 8006eba:	2201      	movs	r2, #1
 8006ebc:	e7e1      	b.n	8006e82 <_dtoa_r+0x9ea>
 8006ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	db04      	blt.n	8006ece <_dtoa_r+0xa36>
 8006ec4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006ec6:	430b      	orrs	r3, r1
 8006ec8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006eca:	430b      	orrs	r3, r1
 8006ecc:	d120      	bne.n	8006f10 <_dtoa_r+0xa78>
 8006ece:	2a00      	cmp	r2, #0
 8006ed0:	dded      	ble.n	8006eae <_dtoa_r+0xa16>
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	4658      	mov	r0, fp
 8006ed8:	f000 fbb0 	bl	800763c <__lshift>
 8006edc:	4621      	mov	r1, r4
 8006ede:	4681      	mov	r9, r0
 8006ee0:	f000 fc18 	bl	8007714 <__mcmp>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	dc03      	bgt.n	8006ef0 <_dtoa_r+0xa58>
 8006ee8:	d1e1      	bne.n	8006eae <_dtoa_r+0xa16>
 8006eea:	f018 0f01 	tst.w	r8, #1
 8006eee:	d0de      	beq.n	8006eae <_dtoa_r+0xa16>
 8006ef0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ef4:	d1d8      	bne.n	8006ea8 <_dtoa_r+0xa10>
 8006ef6:	2339      	movs	r3, #57	@ 0x39
 8006ef8:	9a02      	ldr	r2, [sp, #8]
 8006efa:	7013      	strb	r3, [r2, #0]
 8006efc:	4633      	mov	r3, r6
 8006efe:	461e      	mov	r6, r3
 8006f00:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f04:	3b01      	subs	r3, #1
 8006f06:	2a39      	cmp	r2, #57	@ 0x39
 8006f08:	d052      	beq.n	8006fb0 <_dtoa_r+0xb18>
 8006f0a:	3201      	adds	r2, #1
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	e60e      	b.n	8006b2e <_dtoa_r+0x696>
 8006f10:	2a00      	cmp	r2, #0
 8006f12:	dd07      	ble.n	8006f24 <_dtoa_r+0xa8c>
 8006f14:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f18:	d0ed      	beq.n	8006ef6 <_dtoa_r+0xa5e>
 8006f1a:	9a02      	ldr	r2, [sp, #8]
 8006f1c:	f108 0301 	add.w	r3, r8, #1
 8006f20:	7013      	strb	r3, [r2, #0]
 8006f22:	e604      	b.n	8006b2e <_dtoa_r+0x696>
 8006f24:	9b07      	ldr	r3, [sp, #28]
 8006f26:	9a07      	ldr	r2, [sp, #28]
 8006f28:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006f2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d028      	beq.n	8006f84 <_dtoa_r+0xaec>
 8006f32:	4649      	mov	r1, r9
 8006f34:	2300      	movs	r3, #0
 8006f36:	220a      	movs	r2, #10
 8006f38:	4658      	mov	r0, fp
 8006f3a:	f000 f9d5 	bl	80072e8 <__multadd>
 8006f3e:	42af      	cmp	r7, r5
 8006f40:	4681      	mov	r9, r0
 8006f42:	f04f 0300 	mov.w	r3, #0
 8006f46:	f04f 020a 	mov.w	r2, #10
 8006f4a:	4639      	mov	r1, r7
 8006f4c:	4658      	mov	r0, fp
 8006f4e:	d107      	bne.n	8006f60 <_dtoa_r+0xac8>
 8006f50:	f000 f9ca 	bl	80072e8 <__multadd>
 8006f54:	4607      	mov	r7, r0
 8006f56:	4605      	mov	r5, r0
 8006f58:	9b07      	ldr	r3, [sp, #28]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	9307      	str	r3, [sp, #28]
 8006f5e:	e774      	b.n	8006e4a <_dtoa_r+0x9b2>
 8006f60:	f000 f9c2 	bl	80072e8 <__multadd>
 8006f64:	4629      	mov	r1, r5
 8006f66:	4607      	mov	r7, r0
 8006f68:	2300      	movs	r3, #0
 8006f6a:	220a      	movs	r2, #10
 8006f6c:	4658      	mov	r0, fp
 8006f6e:	f000 f9bb 	bl	80072e8 <__multadd>
 8006f72:	4605      	mov	r5, r0
 8006f74:	e7f0      	b.n	8006f58 <_dtoa_r+0xac0>
 8006f76:	9b08      	ldr	r3, [sp, #32]
 8006f78:	2700      	movs	r7, #0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	bfcc      	ite	gt
 8006f7e:	461e      	movgt	r6, r3
 8006f80:	2601      	movle	r6, #1
 8006f82:	4456      	add	r6, sl
 8006f84:	4649      	mov	r1, r9
 8006f86:	2201      	movs	r2, #1
 8006f88:	4658      	mov	r0, fp
 8006f8a:	f000 fb57 	bl	800763c <__lshift>
 8006f8e:	4621      	mov	r1, r4
 8006f90:	4681      	mov	r9, r0
 8006f92:	f000 fbbf 	bl	8007714 <__mcmp>
 8006f96:	2800      	cmp	r0, #0
 8006f98:	dcb0      	bgt.n	8006efc <_dtoa_r+0xa64>
 8006f9a:	d102      	bne.n	8006fa2 <_dtoa_r+0xb0a>
 8006f9c:	f018 0f01 	tst.w	r8, #1
 8006fa0:	d1ac      	bne.n	8006efc <_dtoa_r+0xa64>
 8006fa2:	4633      	mov	r3, r6
 8006fa4:	461e      	mov	r6, r3
 8006fa6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006faa:	2a30      	cmp	r2, #48	@ 0x30
 8006fac:	d0fa      	beq.n	8006fa4 <_dtoa_r+0xb0c>
 8006fae:	e5be      	b.n	8006b2e <_dtoa_r+0x696>
 8006fb0:	459a      	cmp	sl, r3
 8006fb2:	d1a4      	bne.n	8006efe <_dtoa_r+0xa66>
 8006fb4:	9b04      	ldr	r3, [sp, #16]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	9304      	str	r3, [sp, #16]
 8006fba:	2331      	movs	r3, #49	@ 0x31
 8006fbc:	f88a 3000 	strb.w	r3, [sl]
 8006fc0:	e5b5      	b.n	8006b2e <_dtoa_r+0x696>
 8006fc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006fc4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007024 <_dtoa_r+0xb8c>
 8006fc8:	b11b      	cbz	r3, 8006fd2 <_dtoa_r+0xb3a>
 8006fca:	f10a 0308 	add.w	r3, sl, #8
 8006fce:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	4650      	mov	r0, sl
 8006fd4:	b017      	add	sp, #92	@ 0x5c
 8006fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fda:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	f77f ae3d 	ble.w	8006c5c <_dtoa_r+0x7c4>
 8006fe2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fe4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fe6:	2001      	movs	r0, #1
 8006fe8:	e65b      	b.n	8006ca2 <_dtoa_r+0x80a>
 8006fea:	9b08      	ldr	r3, [sp, #32]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f77f aed6 	ble.w	8006d9e <_dtoa_r+0x906>
 8006ff2:	4656      	mov	r6, sl
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	4648      	mov	r0, r9
 8006ff8:	f7ff f9c3 	bl	8006382 <quorem>
 8006ffc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007000:	9b08      	ldr	r3, [sp, #32]
 8007002:	f806 8b01 	strb.w	r8, [r6], #1
 8007006:	eba6 020a 	sub.w	r2, r6, sl
 800700a:	4293      	cmp	r3, r2
 800700c:	ddb3      	ble.n	8006f76 <_dtoa_r+0xade>
 800700e:	4649      	mov	r1, r9
 8007010:	2300      	movs	r3, #0
 8007012:	220a      	movs	r2, #10
 8007014:	4658      	mov	r0, fp
 8007016:	f000 f967 	bl	80072e8 <__multadd>
 800701a:	4681      	mov	r9, r0
 800701c:	e7ea      	b.n	8006ff4 <_dtoa_r+0xb5c>
 800701e:	bf00      	nop
 8007020:	080085ba 	.word	0x080085ba
 8007024:	0800853e 	.word	0x0800853e

08007028 <_free_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4605      	mov	r5, r0
 800702c:	2900      	cmp	r1, #0
 800702e:	d040      	beq.n	80070b2 <_free_r+0x8a>
 8007030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007034:	1f0c      	subs	r4, r1, #4
 8007036:	2b00      	cmp	r3, #0
 8007038:	bfb8      	it	lt
 800703a:	18e4      	addlt	r4, r4, r3
 800703c:	f000 f8e6 	bl	800720c <__malloc_lock>
 8007040:	4a1c      	ldr	r2, [pc, #112]	@ (80070b4 <_free_r+0x8c>)
 8007042:	6813      	ldr	r3, [r2, #0]
 8007044:	b933      	cbnz	r3, 8007054 <_free_r+0x2c>
 8007046:	6063      	str	r3, [r4, #4]
 8007048:	6014      	str	r4, [r2, #0]
 800704a:	4628      	mov	r0, r5
 800704c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007050:	f000 b8e2 	b.w	8007218 <__malloc_unlock>
 8007054:	42a3      	cmp	r3, r4
 8007056:	d908      	bls.n	800706a <_free_r+0x42>
 8007058:	6820      	ldr	r0, [r4, #0]
 800705a:	1821      	adds	r1, r4, r0
 800705c:	428b      	cmp	r3, r1
 800705e:	bf01      	itttt	eq
 8007060:	6819      	ldreq	r1, [r3, #0]
 8007062:	685b      	ldreq	r3, [r3, #4]
 8007064:	1809      	addeq	r1, r1, r0
 8007066:	6021      	streq	r1, [r4, #0]
 8007068:	e7ed      	b.n	8007046 <_free_r+0x1e>
 800706a:	461a      	mov	r2, r3
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	b10b      	cbz	r3, 8007074 <_free_r+0x4c>
 8007070:	42a3      	cmp	r3, r4
 8007072:	d9fa      	bls.n	800706a <_free_r+0x42>
 8007074:	6811      	ldr	r1, [r2, #0]
 8007076:	1850      	adds	r0, r2, r1
 8007078:	42a0      	cmp	r0, r4
 800707a:	d10b      	bne.n	8007094 <_free_r+0x6c>
 800707c:	6820      	ldr	r0, [r4, #0]
 800707e:	4401      	add	r1, r0
 8007080:	1850      	adds	r0, r2, r1
 8007082:	4283      	cmp	r3, r0
 8007084:	6011      	str	r1, [r2, #0]
 8007086:	d1e0      	bne.n	800704a <_free_r+0x22>
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	4408      	add	r0, r1
 800708e:	6010      	str	r0, [r2, #0]
 8007090:	6053      	str	r3, [r2, #4]
 8007092:	e7da      	b.n	800704a <_free_r+0x22>
 8007094:	d902      	bls.n	800709c <_free_r+0x74>
 8007096:	230c      	movs	r3, #12
 8007098:	602b      	str	r3, [r5, #0]
 800709a:	e7d6      	b.n	800704a <_free_r+0x22>
 800709c:	6820      	ldr	r0, [r4, #0]
 800709e:	1821      	adds	r1, r4, r0
 80070a0:	428b      	cmp	r3, r1
 80070a2:	bf01      	itttt	eq
 80070a4:	6819      	ldreq	r1, [r3, #0]
 80070a6:	685b      	ldreq	r3, [r3, #4]
 80070a8:	1809      	addeq	r1, r1, r0
 80070aa:	6021      	streq	r1, [r4, #0]
 80070ac:	6063      	str	r3, [r4, #4]
 80070ae:	6054      	str	r4, [r2, #4]
 80070b0:	e7cb      	b.n	800704a <_free_r+0x22>
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	200004c4 	.word	0x200004c4

080070b8 <malloc>:
 80070b8:	4b02      	ldr	r3, [pc, #8]	@ (80070c4 <malloc+0xc>)
 80070ba:	4601      	mov	r1, r0
 80070bc:	6818      	ldr	r0, [r3, #0]
 80070be:	f000 b825 	b.w	800710c <_malloc_r>
 80070c2:	bf00      	nop
 80070c4:	20000018 	.word	0x20000018

080070c8 <sbrk_aligned>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	4e0f      	ldr	r6, [pc, #60]	@ (8007108 <sbrk_aligned+0x40>)
 80070cc:	460c      	mov	r4, r1
 80070ce:	6831      	ldr	r1, [r6, #0]
 80070d0:	4605      	mov	r5, r0
 80070d2:	b911      	cbnz	r1, 80070da <sbrk_aligned+0x12>
 80070d4:	f001 f814 	bl	8008100 <_sbrk_r>
 80070d8:	6030      	str	r0, [r6, #0]
 80070da:	4621      	mov	r1, r4
 80070dc:	4628      	mov	r0, r5
 80070de:	f001 f80f 	bl	8008100 <_sbrk_r>
 80070e2:	1c43      	adds	r3, r0, #1
 80070e4:	d103      	bne.n	80070ee <sbrk_aligned+0x26>
 80070e6:	f04f 34ff 	mov.w	r4, #4294967295
 80070ea:	4620      	mov	r0, r4
 80070ec:	bd70      	pop	{r4, r5, r6, pc}
 80070ee:	1cc4      	adds	r4, r0, #3
 80070f0:	f024 0403 	bic.w	r4, r4, #3
 80070f4:	42a0      	cmp	r0, r4
 80070f6:	d0f8      	beq.n	80070ea <sbrk_aligned+0x22>
 80070f8:	1a21      	subs	r1, r4, r0
 80070fa:	4628      	mov	r0, r5
 80070fc:	f001 f800 	bl	8008100 <_sbrk_r>
 8007100:	3001      	adds	r0, #1
 8007102:	d1f2      	bne.n	80070ea <sbrk_aligned+0x22>
 8007104:	e7ef      	b.n	80070e6 <sbrk_aligned+0x1e>
 8007106:	bf00      	nop
 8007108:	200004c0 	.word	0x200004c0

0800710c <_malloc_r>:
 800710c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007110:	1ccd      	adds	r5, r1, #3
 8007112:	f025 0503 	bic.w	r5, r5, #3
 8007116:	3508      	adds	r5, #8
 8007118:	2d0c      	cmp	r5, #12
 800711a:	bf38      	it	cc
 800711c:	250c      	movcc	r5, #12
 800711e:	2d00      	cmp	r5, #0
 8007120:	4606      	mov	r6, r0
 8007122:	db01      	blt.n	8007128 <_malloc_r+0x1c>
 8007124:	42a9      	cmp	r1, r5
 8007126:	d904      	bls.n	8007132 <_malloc_r+0x26>
 8007128:	230c      	movs	r3, #12
 800712a:	6033      	str	r3, [r6, #0]
 800712c:	2000      	movs	r0, #0
 800712e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007132:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007208 <_malloc_r+0xfc>
 8007136:	f000 f869 	bl	800720c <__malloc_lock>
 800713a:	f8d8 3000 	ldr.w	r3, [r8]
 800713e:	461c      	mov	r4, r3
 8007140:	bb44      	cbnz	r4, 8007194 <_malloc_r+0x88>
 8007142:	4629      	mov	r1, r5
 8007144:	4630      	mov	r0, r6
 8007146:	f7ff ffbf 	bl	80070c8 <sbrk_aligned>
 800714a:	1c43      	adds	r3, r0, #1
 800714c:	4604      	mov	r4, r0
 800714e:	d158      	bne.n	8007202 <_malloc_r+0xf6>
 8007150:	f8d8 4000 	ldr.w	r4, [r8]
 8007154:	4627      	mov	r7, r4
 8007156:	2f00      	cmp	r7, #0
 8007158:	d143      	bne.n	80071e2 <_malloc_r+0xd6>
 800715a:	2c00      	cmp	r4, #0
 800715c:	d04b      	beq.n	80071f6 <_malloc_r+0xea>
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	4639      	mov	r1, r7
 8007162:	4630      	mov	r0, r6
 8007164:	eb04 0903 	add.w	r9, r4, r3
 8007168:	f000 ffca 	bl	8008100 <_sbrk_r>
 800716c:	4581      	cmp	r9, r0
 800716e:	d142      	bne.n	80071f6 <_malloc_r+0xea>
 8007170:	6821      	ldr	r1, [r4, #0]
 8007172:	4630      	mov	r0, r6
 8007174:	1a6d      	subs	r5, r5, r1
 8007176:	4629      	mov	r1, r5
 8007178:	f7ff ffa6 	bl	80070c8 <sbrk_aligned>
 800717c:	3001      	adds	r0, #1
 800717e:	d03a      	beq.n	80071f6 <_malloc_r+0xea>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	442b      	add	r3, r5
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	f8d8 3000 	ldr.w	r3, [r8]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	bb62      	cbnz	r2, 80071e8 <_malloc_r+0xdc>
 800718e:	f8c8 7000 	str.w	r7, [r8]
 8007192:	e00f      	b.n	80071b4 <_malloc_r+0xa8>
 8007194:	6822      	ldr	r2, [r4, #0]
 8007196:	1b52      	subs	r2, r2, r5
 8007198:	d420      	bmi.n	80071dc <_malloc_r+0xd0>
 800719a:	2a0b      	cmp	r2, #11
 800719c:	d917      	bls.n	80071ce <_malloc_r+0xc2>
 800719e:	1961      	adds	r1, r4, r5
 80071a0:	42a3      	cmp	r3, r4
 80071a2:	6025      	str	r5, [r4, #0]
 80071a4:	bf18      	it	ne
 80071a6:	6059      	strne	r1, [r3, #4]
 80071a8:	6863      	ldr	r3, [r4, #4]
 80071aa:	bf08      	it	eq
 80071ac:	f8c8 1000 	streq.w	r1, [r8]
 80071b0:	5162      	str	r2, [r4, r5]
 80071b2:	604b      	str	r3, [r1, #4]
 80071b4:	4630      	mov	r0, r6
 80071b6:	f000 f82f 	bl	8007218 <__malloc_unlock>
 80071ba:	f104 000b 	add.w	r0, r4, #11
 80071be:	1d23      	adds	r3, r4, #4
 80071c0:	f020 0007 	bic.w	r0, r0, #7
 80071c4:	1ac2      	subs	r2, r0, r3
 80071c6:	bf1c      	itt	ne
 80071c8:	1a1b      	subne	r3, r3, r0
 80071ca:	50a3      	strne	r3, [r4, r2]
 80071cc:	e7af      	b.n	800712e <_malloc_r+0x22>
 80071ce:	6862      	ldr	r2, [r4, #4]
 80071d0:	42a3      	cmp	r3, r4
 80071d2:	bf0c      	ite	eq
 80071d4:	f8c8 2000 	streq.w	r2, [r8]
 80071d8:	605a      	strne	r2, [r3, #4]
 80071da:	e7eb      	b.n	80071b4 <_malloc_r+0xa8>
 80071dc:	4623      	mov	r3, r4
 80071de:	6864      	ldr	r4, [r4, #4]
 80071e0:	e7ae      	b.n	8007140 <_malloc_r+0x34>
 80071e2:	463c      	mov	r4, r7
 80071e4:	687f      	ldr	r7, [r7, #4]
 80071e6:	e7b6      	b.n	8007156 <_malloc_r+0x4a>
 80071e8:	461a      	mov	r2, r3
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	42a3      	cmp	r3, r4
 80071ee:	d1fb      	bne.n	80071e8 <_malloc_r+0xdc>
 80071f0:	2300      	movs	r3, #0
 80071f2:	6053      	str	r3, [r2, #4]
 80071f4:	e7de      	b.n	80071b4 <_malloc_r+0xa8>
 80071f6:	230c      	movs	r3, #12
 80071f8:	4630      	mov	r0, r6
 80071fa:	6033      	str	r3, [r6, #0]
 80071fc:	f000 f80c 	bl	8007218 <__malloc_unlock>
 8007200:	e794      	b.n	800712c <_malloc_r+0x20>
 8007202:	6005      	str	r5, [r0, #0]
 8007204:	e7d6      	b.n	80071b4 <_malloc_r+0xa8>
 8007206:	bf00      	nop
 8007208:	200004c4 	.word	0x200004c4

0800720c <__malloc_lock>:
 800720c:	4801      	ldr	r0, [pc, #4]	@ (8007214 <__malloc_lock+0x8>)
 800720e:	f7ff b89a 	b.w	8006346 <__retarget_lock_acquire_recursive>
 8007212:	bf00      	nop
 8007214:	200004bc 	.word	0x200004bc

08007218 <__malloc_unlock>:
 8007218:	4801      	ldr	r0, [pc, #4]	@ (8007220 <__malloc_unlock+0x8>)
 800721a:	f7ff b895 	b.w	8006348 <__retarget_lock_release_recursive>
 800721e:	bf00      	nop
 8007220:	200004bc 	.word	0x200004bc

08007224 <_Balloc>:
 8007224:	b570      	push	{r4, r5, r6, lr}
 8007226:	69c6      	ldr	r6, [r0, #28]
 8007228:	4604      	mov	r4, r0
 800722a:	460d      	mov	r5, r1
 800722c:	b976      	cbnz	r6, 800724c <_Balloc+0x28>
 800722e:	2010      	movs	r0, #16
 8007230:	f7ff ff42 	bl	80070b8 <malloc>
 8007234:	4602      	mov	r2, r0
 8007236:	61e0      	str	r0, [r4, #28]
 8007238:	b920      	cbnz	r0, 8007244 <_Balloc+0x20>
 800723a:	216b      	movs	r1, #107	@ 0x6b
 800723c:	4b17      	ldr	r3, [pc, #92]	@ (800729c <_Balloc+0x78>)
 800723e:	4818      	ldr	r0, [pc, #96]	@ (80072a0 <_Balloc+0x7c>)
 8007240:	f000 ff6e 	bl	8008120 <__assert_func>
 8007244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007248:	6006      	str	r6, [r0, #0]
 800724a:	60c6      	str	r6, [r0, #12]
 800724c:	69e6      	ldr	r6, [r4, #28]
 800724e:	68f3      	ldr	r3, [r6, #12]
 8007250:	b183      	cbz	r3, 8007274 <_Balloc+0x50>
 8007252:	69e3      	ldr	r3, [r4, #28]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800725a:	b9b8      	cbnz	r0, 800728c <_Balloc+0x68>
 800725c:	2101      	movs	r1, #1
 800725e:	fa01 f605 	lsl.w	r6, r1, r5
 8007262:	1d72      	adds	r2, r6, #5
 8007264:	4620      	mov	r0, r4
 8007266:	0092      	lsls	r2, r2, #2
 8007268:	f000 ff78 	bl	800815c <_calloc_r>
 800726c:	b160      	cbz	r0, 8007288 <_Balloc+0x64>
 800726e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007272:	e00e      	b.n	8007292 <_Balloc+0x6e>
 8007274:	2221      	movs	r2, #33	@ 0x21
 8007276:	2104      	movs	r1, #4
 8007278:	4620      	mov	r0, r4
 800727a:	f000 ff6f 	bl	800815c <_calloc_r>
 800727e:	69e3      	ldr	r3, [r4, #28]
 8007280:	60f0      	str	r0, [r6, #12]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1e4      	bne.n	8007252 <_Balloc+0x2e>
 8007288:	2000      	movs	r0, #0
 800728a:	bd70      	pop	{r4, r5, r6, pc}
 800728c:	6802      	ldr	r2, [r0, #0]
 800728e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007292:	2300      	movs	r3, #0
 8007294:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007298:	e7f7      	b.n	800728a <_Balloc+0x66>
 800729a:	bf00      	nop
 800729c:	0800854b 	.word	0x0800854b
 80072a0:	080085cb 	.word	0x080085cb

080072a4 <_Bfree>:
 80072a4:	b570      	push	{r4, r5, r6, lr}
 80072a6:	69c6      	ldr	r6, [r0, #28]
 80072a8:	4605      	mov	r5, r0
 80072aa:	460c      	mov	r4, r1
 80072ac:	b976      	cbnz	r6, 80072cc <_Bfree+0x28>
 80072ae:	2010      	movs	r0, #16
 80072b0:	f7ff ff02 	bl	80070b8 <malloc>
 80072b4:	4602      	mov	r2, r0
 80072b6:	61e8      	str	r0, [r5, #28]
 80072b8:	b920      	cbnz	r0, 80072c4 <_Bfree+0x20>
 80072ba:	218f      	movs	r1, #143	@ 0x8f
 80072bc:	4b08      	ldr	r3, [pc, #32]	@ (80072e0 <_Bfree+0x3c>)
 80072be:	4809      	ldr	r0, [pc, #36]	@ (80072e4 <_Bfree+0x40>)
 80072c0:	f000 ff2e 	bl	8008120 <__assert_func>
 80072c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072c8:	6006      	str	r6, [r0, #0]
 80072ca:	60c6      	str	r6, [r0, #12]
 80072cc:	b13c      	cbz	r4, 80072de <_Bfree+0x3a>
 80072ce:	69eb      	ldr	r3, [r5, #28]
 80072d0:	6862      	ldr	r2, [r4, #4]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072d8:	6021      	str	r1, [r4, #0]
 80072da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072de:	bd70      	pop	{r4, r5, r6, pc}
 80072e0:	0800854b 	.word	0x0800854b
 80072e4:	080085cb 	.word	0x080085cb

080072e8 <__multadd>:
 80072e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ec:	4607      	mov	r7, r0
 80072ee:	460c      	mov	r4, r1
 80072f0:	461e      	mov	r6, r3
 80072f2:	2000      	movs	r0, #0
 80072f4:	690d      	ldr	r5, [r1, #16]
 80072f6:	f101 0c14 	add.w	ip, r1, #20
 80072fa:	f8dc 3000 	ldr.w	r3, [ip]
 80072fe:	3001      	adds	r0, #1
 8007300:	b299      	uxth	r1, r3
 8007302:	fb02 6101 	mla	r1, r2, r1, r6
 8007306:	0c1e      	lsrs	r6, r3, #16
 8007308:	0c0b      	lsrs	r3, r1, #16
 800730a:	fb02 3306 	mla	r3, r2, r6, r3
 800730e:	b289      	uxth	r1, r1
 8007310:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007314:	4285      	cmp	r5, r0
 8007316:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800731a:	f84c 1b04 	str.w	r1, [ip], #4
 800731e:	dcec      	bgt.n	80072fa <__multadd+0x12>
 8007320:	b30e      	cbz	r6, 8007366 <__multadd+0x7e>
 8007322:	68a3      	ldr	r3, [r4, #8]
 8007324:	42ab      	cmp	r3, r5
 8007326:	dc19      	bgt.n	800735c <__multadd+0x74>
 8007328:	6861      	ldr	r1, [r4, #4]
 800732a:	4638      	mov	r0, r7
 800732c:	3101      	adds	r1, #1
 800732e:	f7ff ff79 	bl	8007224 <_Balloc>
 8007332:	4680      	mov	r8, r0
 8007334:	b928      	cbnz	r0, 8007342 <__multadd+0x5a>
 8007336:	4602      	mov	r2, r0
 8007338:	21ba      	movs	r1, #186	@ 0xba
 800733a:	4b0c      	ldr	r3, [pc, #48]	@ (800736c <__multadd+0x84>)
 800733c:	480c      	ldr	r0, [pc, #48]	@ (8007370 <__multadd+0x88>)
 800733e:	f000 feef 	bl	8008120 <__assert_func>
 8007342:	6922      	ldr	r2, [r4, #16]
 8007344:	f104 010c 	add.w	r1, r4, #12
 8007348:	3202      	adds	r2, #2
 800734a:	0092      	lsls	r2, r2, #2
 800734c:	300c      	adds	r0, #12
 800734e:	f7ff f80a 	bl	8006366 <memcpy>
 8007352:	4621      	mov	r1, r4
 8007354:	4638      	mov	r0, r7
 8007356:	f7ff ffa5 	bl	80072a4 <_Bfree>
 800735a:	4644      	mov	r4, r8
 800735c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007360:	3501      	adds	r5, #1
 8007362:	615e      	str	r6, [r3, #20]
 8007364:	6125      	str	r5, [r4, #16]
 8007366:	4620      	mov	r0, r4
 8007368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800736c:	080085ba 	.word	0x080085ba
 8007370:	080085cb 	.word	0x080085cb

08007374 <__hi0bits>:
 8007374:	4603      	mov	r3, r0
 8007376:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800737a:	bf3a      	itte	cc
 800737c:	0403      	lslcc	r3, r0, #16
 800737e:	2010      	movcc	r0, #16
 8007380:	2000      	movcs	r0, #0
 8007382:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007386:	bf3c      	itt	cc
 8007388:	021b      	lslcc	r3, r3, #8
 800738a:	3008      	addcc	r0, #8
 800738c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007390:	bf3c      	itt	cc
 8007392:	011b      	lslcc	r3, r3, #4
 8007394:	3004      	addcc	r0, #4
 8007396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800739a:	bf3c      	itt	cc
 800739c:	009b      	lslcc	r3, r3, #2
 800739e:	3002      	addcc	r0, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	db05      	blt.n	80073b0 <__hi0bits+0x3c>
 80073a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80073a8:	f100 0001 	add.w	r0, r0, #1
 80073ac:	bf08      	it	eq
 80073ae:	2020      	moveq	r0, #32
 80073b0:	4770      	bx	lr

080073b2 <__lo0bits>:
 80073b2:	6803      	ldr	r3, [r0, #0]
 80073b4:	4602      	mov	r2, r0
 80073b6:	f013 0007 	ands.w	r0, r3, #7
 80073ba:	d00b      	beq.n	80073d4 <__lo0bits+0x22>
 80073bc:	07d9      	lsls	r1, r3, #31
 80073be:	d421      	bmi.n	8007404 <__lo0bits+0x52>
 80073c0:	0798      	lsls	r0, r3, #30
 80073c2:	bf49      	itett	mi
 80073c4:	085b      	lsrmi	r3, r3, #1
 80073c6:	089b      	lsrpl	r3, r3, #2
 80073c8:	2001      	movmi	r0, #1
 80073ca:	6013      	strmi	r3, [r2, #0]
 80073cc:	bf5c      	itt	pl
 80073ce:	2002      	movpl	r0, #2
 80073d0:	6013      	strpl	r3, [r2, #0]
 80073d2:	4770      	bx	lr
 80073d4:	b299      	uxth	r1, r3
 80073d6:	b909      	cbnz	r1, 80073dc <__lo0bits+0x2a>
 80073d8:	2010      	movs	r0, #16
 80073da:	0c1b      	lsrs	r3, r3, #16
 80073dc:	b2d9      	uxtb	r1, r3
 80073de:	b909      	cbnz	r1, 80073e4 <__lo0bits+0x32>
 80073e0:	3008      	adds	r0, #8
 80073e2:	0a1b      	lsrs	r3, r3, #8
 80073e4:	0719      	lsls	r1, r3, #28
 80073e6:	bf04      	itt	eq
 80073e8:	091b      	lsreq	r3, r3, #4
 80073ea:	3004      	addeq	r0, #4
 80073ec:	0799      	lsls	r1, r3, #30
 80073ee:	bf04      	itt	eq
 80073f0:	089b      	lsreq	r3, r3, #2
 80073f2:	3002      	addeq	r0, #2
 80073f4:	07d9      	lsls	r1, r3, #31
 80073f6:	d403      	bmi.n	8007400 <__lo0bits+0x4e>
 80073f8:	085b      	lsrs	r3, r3, #1
 80073fa:	f100 0001 	add.w	r0, r0, #1
 80073fe:	d003      	beq.n	8007408 <__lo0bits+0x56>
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	4770      	bx	lr
 8007404:	2000      	movs	r0, #0
 8007406:	4770      	bx	lr
 8007408:	2020      	movs	r0, #32
 800740a:	4770      	bx	lr

0800740c <__i2b>:
 800740c:	b510      	push	{r4, lr}
 800740e:	460c      	mov	r4, r1
 8007410:	2101      	movs	r1, #1
 8007412:	f7ff ff07 	bl	8007224 <_Balloc>
 8007416:	4602      	mov	r2, r0
 8007418:	b928      	cbnz	r0, 8007426 <__i2b+0x1a>
 800741a:	f240 1145 	movw	r1, #325	@ 0x145
 800741e:	4b04      	ldr	r3, [pc, #16]	@ (8007430 <__i2b+0x24>)
 8007420:	4804      	ldr	r0, [pc, #16]	@ (8007434 <__i2b+0x28>)
 8007422:	f000 fe7d 	bl	8008120 <__assert_func>
 8007426:	2301      	movs	r3, #1
 8007428:	6144      	str	r4, [r0, #20]
 800742a:	6103      	str	r3, [r0, #16]
 800742c:	bd10      	pop	{r4, pc}
 800742e:	bf00      	nop
 8007430:	080085ba 	.word	0x080085ba
 8007434:	080085cb 	.word	0x080085cb

08007438 <__multiply>:
 8007438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743c:	4614      	mov	r4, r2
 800743e:	690a      	ldr	r2, [r1, #16]
 8007440:	6923      	ldr	r3, [r4, #16]
 8007442:	460f      	mov	r7, r1
 8007444:	429a      	cmp	r2, r3
 8007446:	bfa2      	ittt	ge
 8007448:	4623      	movge	r3, r4
 800744a:	460c      	movge	r4, r1
 800744c:	461f      	movge	r7, r3
 800744e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007452:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007456:	68a3      	ldr	r3, [r4, #8]
 8007458:	6861      	ldr	r1, [r4, #4]
 800745a:	eb0a 0609 	add.w	r6, sl, r9
 800745e:	42b3      	cmp	r3, r6
 8007460:	b085      	sub	sp, #20
 8007462:	bfb8      	it	lt
 8007464:	3101      	addlt	r1, #1
 8007466:	f7ff fedd 	bl	8007224 <_Balloc>
 800746a:	b930      	cbnz	r0, 800747a <__multiply+0x42>
 800746c:	4602      	mov	r2, r0
 800746e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007472:	4b43      	ldr	r3, [pc, #268]	@ (8007580 <__multiply+0x148>)
 8007474:	4843      	ldr	r0, [pc, #268]	@ (8007584 <__multiply+0x14c>)
 8007476:	f000 fe53 	bl	8008120 <__assert_func>
 800747a:	f100 0514 	add.w	r5, r0, #20
 800747e:	462b      	mov	r3, r5
 8007480:	2200      	movs	r2, #0
 8007482:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007486:	4543      	cmp	r3, r8
 8007488:	d321      	bcc.n	80074ce <__multiply+0x96>
 800748a:	f107 0114 	add.w	r1, r7, #20
 800748e:	f104 0214 	add.w	r2, r4, #20
 8007492:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007496:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800749a:	9302      	str	r3, [sp, #8]
 800749c:	1b13      	subs	r3, r2, r4
 800749e:	3b15      	subs	r3, #21
 80074a0:	f023 0303 	bic.w	r3, r3, #3
 80074a4:	3304      	adds	r3, #4
 80074a6:	f104 0715 	add.w	r7, r4, #21
 80074aa:	42ba      	cmp	r2, r7
 80074ac:	bf38      	it	cc
 80074ae:	2304      	movcc	r3, #4
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	9b02      	ldr	r3, [sp, #8]
 80074b4:	9103      	str	r1, [sp, #12]
 80074b6:	428b      	cmp	r3, r1
 80074b8:	d80c      	bhi.n	80074d4 <__multiply+0x9c>
 80074ba:	2e00      	cmp	r6, #0
 80074bc:	dd03      	ble.n	80074c6 <__multiply+0x8e>
 80074be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d05a      	beq.n	800757c <__multiply+0x144>
 80074c6:	6106      	str	r6, [r0, #16]
 80074c8:	b005      	add	sp, #20
 80074ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ce:	f843 2b04 	str.w	r2, [r3], #4
 80074d2:	e7d8      	b.n	8007486 <__multiply+0x4e>
 80074d4:	f8b1 a000 	ldrh.w	sl, [r1]
 80074d8:	f1ba 0f00 	cmp.w	sl, #0
 80074dc:	d023      	beq.n	8007526 <__multiply+0xee>
 80074de:	46a9      	mov	r9, r5
 80074e0:	f04f 0c00 	mov.w	ip, #0
 80074e4:	f104 0e14 	add.w	lr, r4, #20
 80074e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80074ec:	f8d9 3000 	ldr.w	r3, [r9]
 80074f0:	fa1f fb87 	uxth.w	fp, r7
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	fb0a 330b 	mla	r3, sl, fp, r3
 80074fa:	4463      	add	r3, ip
 80074fc:	f8d9 c000 	ldr.w	ip, [r9]
 8007500:	0c3f      	lsrs	r7, r7, #16
 8007502:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007506:	fb0a c707 	mla	r7, sl, r7, ip
 800750a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800750e:	b29b      	uxth	r3, r3
 8007510:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007514:	4572      	cmp	r2, lr
 8007516:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800751a:	f849 3b04 	str.w	r3, [r9], #4
 800751e:	d8e3      	bhi.n	80074e8 <__multiply+0xb0>
 8007520:	9b01      	ldr	r3, [sp, #4]
 8007522:	f845 c003 	str.w	ip, [r5, r3]
 8007526:	9b03      	ldr	r3, [sp, #12]
 8007528:	3104      	adds	r1, #4
 800752a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800752e:	f1b9 0f00 	cmp.w	r9, #0
 8007532:	d021      	beq.n	8007578 <__multiply+0x140>
 8007534:	46ae      	mov	lr, r5
 8007536:	f04f 0a00 	mov.w	sl, #0
 800753a:	682b      	ldr	r3, [r5, #0]
 800753c:	f104 0c14 	add.w	ip, r4, #20
 8007540:	f8bc b000 	ldrh.w	fp, [ip]
 8007544:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007548:	b29b      	uxth	r3, r3
 800754a:	fb09 770b 	mla	r7, r9, fp, r7
 800754e:	4457      	add	r7, sl
 8007550:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007554:	f84e 3b04 	str.w	r3, [lr], #4
 8007558:	f85c 3b04 	ldr.w	r3, [ip], #4
 800755c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007560:	f8be 3000 	ldrh.w	r3, [lr]
 8007564:	4562      	cmp	r2, ip
 8007566:	fb09 330a 	mla	r3, r9, sl, r3
 800756a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800756e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007572:	d8e5      	bhi.n	8007540 <__multiply+0x108>
 8007574:	9f01      	ldr	r7, [sp, #4]
 8007576:	51eb      	str	r3, [r5, r7]
 8007578:	3504      	adds	r5, #4
 800757a:	e79a      	b.n	80074b2 <__multiply+0x7a>
 800757c:	3e01      	subs	r6, #1
 800757e:	e79c      	b.n	80074ba <__multiply+0x82>
 8007580:	080085ba 	.word	0x080085ba
 8007584:	080085cb 	.word	0x080085cb

08007588 <__pow5mult>:
 8007588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800758c:	4615      	mov	r5, r2
 800758e:	f012 0203 	ands.w	r2, r2, #3
 8007592:	4607      	mov	r7, r0
 8007594:	460e      	mov	r6, r1
 8007596:	d007      	beq.n	80075a8 <__pow5mult+0x20>
 8007598:	4c25      	ldr	r4, [pc, #148]	@ (8007630 <__pow5mult+0xa8>)
 800759a:	3a01      	subs	r2, #1
 800759c:	2300      	movs	r3, #0
 800759e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075a2:	f7ff fea1 	bl	80072e8 <__multadd>
 80075a6:	4606      	mov	r6, r0
 80075a8:	10ad      	asrs	r5, r5, #2
 80075aa:	d03d      	beq.n	8007628 <__pow5mult+0xa0>
 80075ac:	69fc      	ldr	r4, [r7, #28]
 80075ae:	b97c      	cbnz	r4, 80075d0 <__pow5mult+0x48>
 80075b0:	2010      	movs	r0, #16
 80075b2:	f7ff fd81 	bl	80070b8 <malloc>
 80075b6:	4602      	mov	r2, r0
 80075b8:	61f8      	str	r0, [r7, #28]
 80075ba:	b928      	cbnz	r0, 80075c8 <__pow5mult+0x40>
 80075bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80075c0:	4b1c      	ldr	r3, [pc, #112]	@ (8007634 <__pow5mult+0xac>)
 80075c2:	481d      	ldr	r0, [pc, #116]	@ (8007638 <__pow5mult+0xb0>)
 80075c4:	f000 fdac 	bl	8008120 <__assert_func>
 80075c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075cc:	6004      	str	r4, [r0, #0]
 80075ce:	60c4      	str	r4, [r0, #12]
 80075d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80075d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075d8:	b94c      	cbnz	r4, 80075ee <__pow5mult+0x66>
 80075da:	f240 2171 	movw	r1, #625	@ 0x271
 80075de:	4638      	mov	r0, r7
 80075e0:	f7ff ff14 	bl	800740c <__i2b>
 80075e4:	2300      	movs	r3, #0
 80075e6:	4604      	mov	r4, r0
 80075e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80075ec:	6003      	str	r3, [r0, #0]
 80075ee:	f04f 0900 	mov.w	r9, #0
 80075f2:	07eb      	lsls	r3, r5, #31
 80075f4:	d50a      	bpl.n	800760c <__pow5mult+0x84>
 80075f6:	4631      	mov	r1, r6
 80075f8:	4622      	mov	r2, r4
 80075fa:	4638      	mov	r0, r7
 80075fc:	f7ff ff1c 	bl	8007438 <__multiply>
 8007600:	4680      	mov	r8, r0
 8007602:	4631      	mov	r1, r6
 8007604:	4638      	mov	r0, r7
 8007606:	f7ff fe4d 	bl	80072a4 <_Bfree>
 800760a:	4646      	mov	r6, r8
 800760c:	106d      	asrs	r5, r5, #1
 800760e:	d00b      	beq.n	8007628 <__pow5mult+0xa0>
 8007610:	6820      	ldr	r0, [r4, #0]
 8007612:	b938      	cbnz	r0, 8007624 <__pow5mult+0x9c>
 8007614:	4622      	mov	r2, r4
 8007616:	4621      	mov	r1, r4
 8007618:	4638      	mov	r0, r7
 800761a:	f7ff ff0d 	bl	8007438 <__multiply>
 800761e:	6020      	str	r0, [r4, #0]
 8007620:	f8c0 9000 	str.w	r9, [r0]
 8007624:	4604      	mov	r4, r0
 8007626:	e7e4      	b.n	80075f2 <__pow5mult+0x6a>
 8007628:	4630      	mov	r0, r6
 800762a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800762e:	bf00      	nop
 8007630:	08008624 	.word	0x08008624
 8007634:	0800854b 	.word	0x0800854b
 8007638:	080085cb 	.word	0x080085cb

0800763c <__lshift>:
 800763c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007640:	460c      	mov	r4, r1
 8007642:	4607      	mov	r7, r0
 8007644:	4691      	mov	r9, r2
 8007646:	6923      	ldr	r3, [r4, #16]
 8007648:	6849      	ldr	r1, [r1, #4]
 800764a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800764e:	68a3      	ldr	r3, [r4, #8]
 8007650:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007654:	f108 0601 	add.w	r6, r8, #1
 8007658:	42b3      	cmp	r3, r6
 800765a:	db0b      	blt.n	8007674 <__lshift+0x38>
 800765c:	4638      	mov	r0, r7
 800765e:	f7ff fde1 	bl	8007224 <_Balloc>
 8007662:	4605      	mov	r5, r0
 8007664:	b948      	cbnz	r0, 800767a <__lshift+0x3e>
 8007666:	4602      	mov	r2, r0
 8007668:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800766c:	4b27      	ldr	r3, [pc, #156]	@ (800770c <__lshift+0xd0>)
 800766e:	4828      	ldr	r0, [pc, #160]	@ (8007710 <__lshift+0xd4>)
 8007670:	f000 fd56 	bl	8008120 <__assert_func>
 8007674:	3101      	adds	r1, #1
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	e7ee      	b.n	8007658 <__lshift+0x1c>
 800767a:	2300      	movs	r3, #0
 800767c:	f100 0114 	add.w	r1, r0, #20
 8007680:	f100 0210 	add.w	r2, r0, #16
 8007684:	4618      	mov	r0, r3
 8007686:	4553      	cmp	r3, sl
 8007688:	db33      	blt.n	80076f2 <__lshift+0xb6>
 800768a:	6920      	ldr	r0, [r4, #16]
 800768c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007690:	f104 0314 	add.w	r3, r4, #20
 8007694:	f019 091f 	ands.w	r9, r9, #31
 8007698:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800769c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80076a0:	d02b      	beq.n	80076fa <__lshift+0xbe>
 80076a2:	468a      	mov	sl, r1
 80076a4:	2200      	movs	r2, #0
 80076a6:	f1c9 0e20 	rsb	lr, r9, #32
 80076aa:	6818      	ldr	r0, [r3, #0]
 80076ac:	fa00 f009 	lsl.w	r0, r0, r9
 80076b0:	4310      	orrs	r0, r2
 80076b2:	f84a 0b04 	str.w	r0, [sl], #4
 80076b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ba:	459c      	cmp	ip, r3
 80076bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80076c0:	d8f3      	bhi.n	80076aa <__lshift+0x6e>
 80076c2:	ebac 0304 	sub.w	r3, ip, r4
 80076c6:	3b15      	subs	r3, #21
 80076c8:	f023 0303 	bic.w	r3, r3, #3
 80076cc:	3304      	adds	r3, #4
 80076ce:	f104 0015 	add.w	r0, r4, #21
 80076d2:	4584      	cmp	ip, r0
 80076d4:	bf38      	it	cc
 80076d6:	2304      	movcc	r3, #4
 80076d8:	50ca      	str	r2, [r1, r3]
 80076da:	b10a      	cbz	r2, 80076e0 <__lshift+0xa4>
 80076dc:	f108 0602 	add.w	r6, r8, #2
 80076e0:	3e01      	subs	r6, #1
 80076e2:	4638      	mov	r0, r7
 80076e4:	4621      	mov	r1, r4
 80076e6:	612e      	str	r6, [r5, #16]
 80076e8:	f7ff fddc 	bl	80072a4 <_Bfree>
 80076ec:	4628      	mov	r0, r5
 80076ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80076f6:	3301      	adds	r3, #1
 80076f8:	e7c5      	b.n	8007686 <__lshift+0x4a>
 80076fa:	3904      	subs	r1, #4
 80076fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007700:	459c      	cmp	ip, r3
 8007702:	f841 2f04 	str.w	r2, [r1, #4]!
 8007706:	d8f9      	bhi.n	80076fc <__lshift+0xc0>
 8007708:	e7ea      	b.n	80076e0 <__lshift+0xa4>
 800770a:	bf00      	nop
 800770c:	080085ba 	.word	0x080085ba
 8007710:	080085cb 	.word	0x080085cb

08007714 <__mcmp>:
 8007714:	4603      	mov	r3, r0
 8007716:	690a      	ldr	r2, [r1, #16]
 8007718:	6900      	ldr	r0, [r0, #16]
 800771a:	b530      	push	{r4, r5, lr}
 800771c:	1a80      	subs	r0, r0, r2
 800771e:	d10e      	bne.n	800773e <__mcmp+0x2a>
 8007720:	3314      	adds	r3, #20
 8007722:	3114      	adds	r1, #20
 8007724:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007728:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800772c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007730:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007734:	4295      	cmp	r5, r2
 8007736:	d003      	beq.n	8007740 <__mcmp+0x2c>
 8007738:	d205      	bcs.n	8007746 <__mcmp+0x32>
 800773a:	f04f 30ff 	mov.w	r0, #4294967295
 800773e:	bd30      	pop	{r4, r5, pc}
 8007740:	42a3      	cmp	r3, r4
 8007742:	d3f3      	bcc.n	800772c <__mcmp+0x18>
 8007744:	e7fb      	b.n	800773e <__mcmp+0x2a>
 8007746:	2001      	movs	r0, #1
 8007748:	e7f9      	b.n	800773e <__mcmp+0x2a>
	...

0800774c <__mdiff>:
 800774c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007750:	4689      	mov	r9, r1
 8007752:	4606      	mov	r6, r0
 8007754:	4611      	mov	r1, r2
 8007756:	4648      	mov	r0, r9
 8007758:	4614      	mov	r4, r2
 800775a:	f7ff ffdb 	bl	8007714 <__mcmp>
 800775e:	1e05      	subs	r5, r0, #0
 8007760:	d112      	bne.n	8007788 <__mdiff+0x3c>
 8007762:	4629      	mov	r1, r5
 8007764:	4630      	mov	r0, r6
 8007766:	f7ff fd5d 	bl	8007224 <_Balloc>
 800776a:	4602      	mov	r2, r0
 800776c:	b928      	cbnz	r0, 800777a <__mdiff+0x2e>
 800776e:	f240 2137 	movw	r1, #567	@ 0x237
 8007772:	4b3e      	ldr	r3, [pc, #248]	@ (800786c <__mdiff+0x120>)
 8007774:	483e      	ldr	r0, [pc, #248]	@ (8007870 <__mdiff+0x124>)
 8007776:	f000 fcd3 	bl	8008120 <__assert_func>
 800777a:	2301      	movs	r3, #1
 800777c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007780:	4610      	mov	r0, r2
 8007782:	b003      	add	sp, #12
 8007784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007788:	bfbc      	itt	lt
 800778a:	464b      	movlt	r3, r9
 800778c:	46a1      	movlt	r9, r4
 800778e:	4630      	mov	r0, r6
 8007790:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007794:	bfba      	itte	lt
 8007796:	461c      	movlt	r4, r3
 8007798:	2501      	movlt	r5, #1
 800779a:	2500      	movge	r5, #0
 800779c:	f7ff fd42 	bl	8007224 <_Balloc>
 80077a0:	4602      	mov	r2, r0
 80077a2:	b918      	cbnz	r0, 80077ac <__mdiff+0x60>
 80077a4:	f240 2145 	movw	r1, #581	@ 0x245
 80077a8:	4b30      	ldr	r3, [pc, #192]	@ (800786c <__mdiff+0x120>)
 80077aa:	e7e3      	b.n	8007774 <__mdiff+0x28>
 80077ac:	f100 0b14 	add.w	fp, r0, #20
 80077b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80077b4:	f109 0310 	add.w	r3, r9, #16
 80077b8:	60c5      	str	r5, [r0, #12]
 80077ba:	f04f 0c00 	mov.w	ip, #0
 80077be:	f109 0514 	add.w	r5, r9, #20
 80077c2:	46d9      	mov	r9, fp
 80077c4:	6926      	ldr	r6, [r4, #16]
 80077c6:	f104 0e14 	add.w	lr, r4, #20
 80077ca:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80077ce:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80077d2:	9301      	str	r3, [sp, #4]
 80077d4:	9b01      	ldr	r3, [sp, #4]
 80077d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80077da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80077de:	b281      	uxth	r1, r0
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	fa1f f38a 	uxth.w	r3, sl
 80077e6:	1a5b      	subs	r3, r3, r1
 80077e8:	0c00      	lsrs	r0, r0, #16
 80077ea:	4463      	add	r3, ip
 80077ec:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80077f0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80077fa:	4576      	cmp	r6, lr
 80077fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007800:	f849 3b04 	str.w	r3, [r9], #4
 8007804:	d8e6      	bhi.n	80077d4 <__mdiff+0x88>
 8007806:	1b33      	subs	r3, r6, r4
 8007808:	3b15      	subs	r3, #21
 800780a:	f023 0303 	bic.w	r3, r3, #3
 800780e:	3415      	adds	r4, #21
 8007810:	3304      	adds	r3, #4
 8007812:	42a6      	cmp	r6, r4
 8007814:	bf38      	it	cc
 8007816:	2304      	movcc	r3, #4
 8007818:	441d      	add	r5, r3
 800781a:	445b      	add	r3, fp
 800781c:	461e      	mov	r6, r3
 800781e:	462c      	mov	r4, r5
 8007820:	4544      	cmp	r4, r8
 8007822:	d30e      	bcc.n	8007842 <__mdiff+0xf6>
 8007824:	f108 0103 	add.w	r1, r8, #3
 8007828:	1b49      	subs	r1, r1, r5
 800782a:	f021 0103 	bic.w	r1, r1, #3
 800782e:	3d03      	subs	r5, #3
 8007830:	45a8      	cmp	r8, r5
 8007832:	bf38      	it	cc
 8007834:	2100      	movcc	r1, #0
 8007836:	440b      	add	r3, r1
 8007838:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800783c:	b199      	cbz	r1, 8007866 <__mdiff+0x11a>
 800783e:	6117      	str	r7, [r2, #16]
 8007840:	e79e      	b.n	8007780 <__mdiff+0x34>
 8007842:	46e6      	mov	lr, ip
 8007844:	f854 1b04 	ldr.w	r1, [r4], #4
 8007848:	fa1f fc81 	uxth.w	ip, r1
 800784c:	44f4      	add	ip, lr
 800784e:	0c08      	lsrs	r0, r1, #16
 8007850:	4471      	add	r1, lr
 8007852:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007856:	b289      	uxth	r1, r1
 8007858:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800785c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007860:	f846 1b04 	str.w	r1, [r6], #4
 8007864:	e7dc      	b.n	8007820 <__mdiff+0xd4>
 8007866:	3f01      	subs	r7, #1
 8007868:	e7e6      	b.n	8007838 <__mdiff+0xec>
 800786a:	bf00      	nop
 800786c:	080085ba 	.word	0x080085ba
 8007870:	080085cb 	.word	0x080085cb

08007874 <__d2b>:
 8007874:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007878:	2101      	movs	r1, #1
 800787a:	4690      	mov	r8, r2
 800787c:	4699      	mov	r9, r3
 800787e:	9e08      	ldr	r6, [sp, #32]
 8007880:	f7ff fcd0 	bl	8007224 <_Balloc>
 8007884:	4604      	mov	r4, r0
 8007886:	b930      	cbnz	r0, 8007896 <__d2b+0x22>
 8007888:	4602      	mov	r2, r0
 800788a:	f240 310f 	movw	r1, #783	@ 0x30f
 800788e:	4b23      	ldr	r3, [pc, #140]	@ (800791c <__d2b+0xa8>)
 8007890:	4823      	ldr	r0, [pc, #140]	@ (8007920 <__d2b+0xac>)
 8007892:	f000 fc45 	bl	8008120 <__assert_func>
 8007896:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800789a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800789e:	b10d      	cbz	r5, 80078a4 <__d2b+0x30>
 80078a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078a4:	9301      	str	r3, [sp, #4]
 80078a6:	f1b8 0300 	subs.w	r3, r8, #0
 80078aa:	d024      	beq.n	80078f6 <__d2b+0x82>
 80078ac:	4668      	mov	r0, sp
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	f7ff fd7f 	bl	80073b2 <__lo0bits>
 80078b4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80078b8:	b1d8      	cbz	r0, 80078f2 <__d2b+0x7e>
 80078ba:	f1c0 0320 	rsb	r3, r0, #32
 80078be:	fa02 f303 	lsl.w	r3, r2, r3
 80078c2:	430b      	orrs	r3, r1
 80078c4:	40c2      	lsrs	r2, r0
 80078c6:	6163      	str	r3, [r4, #20]
 80078c8:	9201      	str	r2, [sp, #4]
 80078ca:	9b01      	ldr	r3, [sp, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bf0c      	ite	eq
 80078d0:	2201      	moveq	r2, #1
 80078d2:	2202      	movne	r2, #2
 80078d4:	61a3      	str	r3, [r4, #24]
 80078d6:	6122      	str	r2, [r4, #16]
 80078d8:	b1ad      	cbz	r5, 8007906 <__d2b+0x92>
 80078da:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80078de:	4405      	add	r5, r0
 80078e0:	6035      	str	r5, [r6, #0]
 80078e2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80078e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078e8:	6018      	str	r0, [r3, #0]
 80078ea:	4620      	mov	r0, r4
 80078ec:	b002      	add	sp, #8
 80078ee:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80078f2:	6161      	str	r1, [r4, #20]
 80078f4:	e7e9      	b.n	80078ca <__d2b+0x56>
 80078f6:	a801      	add	r0, sp, #4
 80078f8:	f7ff fd5b 	bl	80073b2 <__lo0bits>
 80078fc:	9b01      	ldr	r3, [sp, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	6163      	str	r3, [r4, #20]
 8007902:	3020      	adds	r0, #32
 8007904:	e7e7      	b.n	80078d6 <__d2b+0x62>
 8007906:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800790a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800790e:	6030      	str	r0, [r6, #0]
 8007910:	6918      	ldr	r0, [r3, #16]
 8007912:	f7ff fd2f 	bl	8007374 <__hi0bits>
 8007916:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800791a:	e7e4      	b.n	80078e6 <__d2b+0x72>
 800791c:	080085ba 	.word	0x080085ba
 8007920:	080085cb 	.word	0x080085cb

08007924 <__ssputs_r>:
 8007924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007928:	461f      	mov	r7, r3
 800792a:	688e      	ldr	r6, [r1, #8]
 800792c:	4682      	mov	sl, r0
 800792e:	42be      	cmp	r6, r7
 8007930:	460c      	mov	r4, r1
 8007932:	4690      	mov	r8, r2
 8007934:	680b      	ldr	r3, [r1, #0]
 8007936:	d82d      	bhi.n	8007994 <__ssputs_r+0x70>
 8007938:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800793c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007940:	d026      	beq.n	8007990 <__ssputs_r+0x6c>
 8007942:	6965      	ldr	r5, [r4, #20]
 8007944:	6909      	ldr	r1, [r1, #16]
 8007946:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800794a:	eba3 0901 	sub.w	r9, r3, r1
 800794e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007952:	1c7b      	adds	r3, r7, #1
 8007954:	444b      	add	r3, r9
 8007956:	106d      	asrs	r5, r5, #1
 8007958:	429d      	cmp	r5, r3
 800795a:	bf38      	it	cc
 800795c:	461d      	movcc	r5, r3
 800795e:	0553      	lsls	r3, r2, #21
 8007960:	d527      	bpl.n	80079b2 <__ssputs_r+0x8e>
 8007962:	4629      	mov	r1, r5
 8007964:	f7ff fbd2 	bl	800710c <_malloc_r>
 8007968:	4606      	mov	r6, r0
 800796a:	b360      	cbz	r0, 80079c6 <__ssputs_r+0xa2>
 800796c:	464a      	mov	r2, r9
 800796e:	6921      	ldr	r1, [r4, #16]
 8007970:	f7fe fcf9 	bl	8006366 <memcpy>
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800797a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800797e:	81a3      	strh	r3, [r4, #12]
 8007980:	6126      	str	r6, [r4, #16]
 8007982:	444e      	add	r6, r9
 8007984:	6026      	str	r6, [r4, #0]
 8007986:	463e      	mov	r6, r7
 8007988:	6165      	str	r5, [r4, #20]
 800798a:	eba5 0509 	sub.w	r5, r5, r9
 800798e:	60a5      	str	r5, [r4, #8]
 8007990:	42be      	cmp	r6, r7
 8007992:	d900      	bls.n	8007996 <__ssputs_r+0x72>
 8007994:	463e      	mov	r6, r7
 8007996:	4632      	mov	r2, r6
 8007998:	4641      	mov	r1, r8
 800799a:	6820      	ldr	r0, [r4, #0]
 800799c:	f000 fb96 	bl	80080cc <memmove>
 80079a0:	2000      	movs	r0, #0
 80079a2:	68a3      	ldr	r3, [r4, #8]
 80079a4:	1b9b      	subs	r3, r3, r6
 80079a6:	60a3      	str	r3, [r4, #8]
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	4433      	add	r3, r6
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b2:	462a      	mov	r2, r5
 80079b4:	f000 fbf8 	bl	80081a8 <_realloc_r>
 80079b8:	4606      	mov	r6, r0
 80079ba:	2800      	cmp	r0, #0
 80079bc:	d1e0      	bne.n	8007980 <__ssputs_r+0x5c>
 80079be:	4650      	mov	r0, sl
 80079c0:	6921      	ldr	r1, [r4, #16]
 80079c2:	f7ff fb31 	bl	8007028 <_free_r>
 80079c6:	230c      	movs	r3, #12
 80079c8:	f8ca 3000 	str.w	r3, [sl]
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	f04f 30ff 	mov.w	r0, #4294967295
 80079d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079d6:	81a3      	strh	r3, [r4, #12]
 80079d8:	e7e9      	b.n	80079ae <__ssputs_r+0x8a>
	...

080079dc <_svfiprintf_r>:
 80079dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e0:	4698      	mov	r8, r3
 80079e2:	898b      	ldrh	r3, [r1, #12]
 80079e4:	4607      	mov	r7, r0
 80079e6:	061b      	lsls	r3, r3, #24
 80079e8:	460d      	mov	r5, r1
 80079ea:	4614      	mov	r4, r2
 80079ec:	b09d      	sub	sp, #116	@ 0x74
 80079ee:	d510      	bpl.n	8007a12 <_svfiprintf_r+0x36>
 80079f0:	690b      	ldr	r3, [r1, #16]
 80079f2:	b973      	cbnz	r3, 8007a12 <_svfiprintf_r+0x36>
 80079f4:	2140      	movs	r1, #64	@ 0x40
 80079f6:	f7ff fb89 	bl	800710c <_malloc_r>
 80079fa:	6028      	str	r0, [r5, #0]
 80079fc:	6128      	str	r0, [r5, #16]
 80079fe:	b930      	cbnz	r0, 8007a0e <_svfiprintf_r+0x32>
 8007a00:	230c      	movs	r3, #12
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	f04f 30ff 	mov.w	r0, #4294967295
 8007a08:	b01d      	add	sp, #116	@ 0x74
 8007a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0e:	2340      	movs	r3, #64	@ 0x40
 8007a10:	616b      	str	r3, [r5, #20]
 8007a12:	2300      	movs	r3, #0
 8007a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a16:	2320      	movs	r3, #32
 8007a18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a1c:	2330      	movs	r3, #48	@ 0x30
 8007a1e:	f04f 0901 	mov.w	r9, #1
 8007a22:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a26:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007bc0 <_svfiprintf_r+0x1e4>
 8007a2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a2e:	4623      	mov	r3, r4
 8007a30:	469a      	mov	sl, r3
 8007a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a36:	b10a      	cbz	r2, 8007a3c <_svfiprintf_r+0x60>
 8007a38:	2a25      	cmp	r2, #37	@ 0x25
 8007a3a:	d1f9      	bne.n	8007a30 <_svfiprintf_r+0x54>
 8007a3c:	ebba 0b04 	subs.w	fp, sl, r4
 8007a40:	d00b      	beq.n	8007a5a <_svfiprintf_r+0x7e>
 8007a42:	465b      	mov	r3, fp
 8007a44:	4622      	mov	r2, r4
 8007a46:	4629      	mov	r1, r5
 8007a48:	4638      	mov	r0, r7
 8007a4a:	f7ff ff6b 	bl	8007924 <__ssputs_r>
 8007a4e:	3001      	adds	r0, #1
 8007a50:	f000 80a7 	beq.w	8007ba2 <_svfiprintf_r+0x1c6>
 8007a54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a56:	445a      	add	r2, fp
 8007a58:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 809f 	beq.w	8007ba2 <_svfiprintf_r+0x1c6>
 8007a64:	2300      	movs	r3, #0
 8007a66:	f04f 32ff 	mov.w	r2, #4294967295
 8007a6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a6e:	f10a 0a01 	add.w	sl, sl, #1
 8007a72:	9304      	str	r3, [sp, #16]
 8007a74:	9307      	str	r3, [sp, #28]
 8007a76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a7c:	4654      	mov	r4, sl
 8007a7e:	2205      	movs	r2, #5
 8007a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a84:	484e      	ldr	r0, [pc, #312]	@ (8007bc0 <_svfiprintf_r+0x1e4>)
 8007a86:	f7fe fc60 	bl	800634a <memchr>
 8007a8a:	9a04      	ldr	r2, [sp, #16]
 8007a8c:	b9d8      	cbnz	r0, 8007ac6 <_svfiprintf_r+0xea>
 8007a8e:	06d0      	lsls	r0, r2, #27
 8007a90:	bf44      	itt	mi
 8007a92:	2320      	movmi	r3, #32
 8007a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a98:	0711      	lsls	r1, r2, #28
 8007a9a:	bf44      	itt	mi
 8007a9c:	232b      	movmi	r3, #43	@ 0x2b
 8007a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8007aa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007aa8:	d015      	beq.n	8007ad6 <_svfiprintf_r+0xfa>
 8007aaa:	4654      	mov	r4, sl
 8007aac:	2000      	movs	r0, #0
 8007aae:	f04f 0c0a 	mov.w	ip, #10
 8007ab2:	9a07      	ldr	r2, [sp, #28]
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aba:	3b30      	subs	r3, #48	@ 0x30
 8007abc:	2b09      	cmp	r3, #9
 8007abe:	d94b      	bls.n	8007b58 <_svfiprintf_r+0x17c>
 8007ac0:	b1b0      	cbz	r0, 8007af0 <_svfiprintf_r+0x114>
 8007ac2:	9207      	str	r2, [sp, #28]
 8007ac4:	e014      	b.n	8007af0 <_svfiprintf_r+0x114>
 8007ac6:	eba0 0308 	sub.w	r3, r0, r8
 8007aca:	fa09 f303 	lsl.w	r3, r9, r3
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	46a2      	mov	sl, r4
 8007ad2:	9304      	str	r3, [sp, #16]
 8007ad4:	e7d2      	b.n	8007a7c <_svfiprintf_r+0xa0>
 8007ad6:	9b03      	ldr	r3, [sp, #12]
 8007ad8:	1d19      	adds	r1, r3, #4
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	9103      	str	r1, [sp, #12]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	bfbb      	ittet	lt
 8007ae2:	425b      	neglt	r3, r3
 8007ae4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ae8:	9307      	strge	r3, [sp, #28]
 8007aea:	9307      	strlt	r3, [sp, #28]
 8007aec:	bfb8      	it	lt
 8007aee:	9204      	strlt	r2, [sp, #16]
 8007af0:	7823      	ldrb	r3, [r4, #0]
 8007af2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007af4:	d10a      	bne.n	8007b0c <_svfiprintf_r+0x130>
 8007af6:	7863      	ldrb	r3, [r4, #1]
 8007af8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007afa:	d132      	bne.n	8007b62 <_svfiprintf_r+0x186>
 8007afc:	9b03      	ldr	r3, [sp, #12]
 8007afe:	3402      	adds	r4, #2
 8007b00:	1d1a      	adds	r2, r3, #4
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	9203      	str	r2, [sp, #12]
 8007b06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b0a:	9305      	str	r3, [sp, #20]
 8007b0c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007bc4 <_svfiprintf_r+0x1e8>
 8007b10:	2203      	movs	r2, #3
 8007b12:	4650      	mov	r0, sl
 8007b14:	7821      	ldrb	r1, [r4, #0]
 8007b16:	f7fe fc18 	bl	800634a <memchr>
 8007b1a:	b138      	cbz	r0, 8007b2c <_svfiprintf_r+0x150>
 8007b1c:	2240      	movs	r2, #64	@ 0x40
 8007b1e:	9b04      	ldr	r3, [sp, #16]
 8007b20:	eba0 000a 	sub.w	r0, r0, sl
 8007b24:	4082      	lsls	r2, r0
 8007b26:	4313      	orrs	r3, r2
 8007b28:	3401      	adds	r4, #1
 8007b2a:	9304      	str	r3, [sp, #16]
 8007b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b30:	2206      	movs	r2, #6
 8007b32:	4825      	ldr	r0, [pc, #148]	@ (8007bc8 <_svfiprintf_r+0x1ec>)
 8007b34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b38:	f7fe fc07 	bl	800634a <memchr>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d036      	beq.n	8007bae <_svfiprintf_r+0x1d2>
 8007b40:	4b22      	ldr	r3, [pc, #136]	@ (8007bcc <_svfiprintf_r+0x1f0>)
 8007b42:	bb1b      	cbnz	r3, 8007b8c <_svfiprintf_r+0x1b0>
 8007b44:	9b03      	ldr	r3, [sp, #12]
 8007b46:	3307      	adds	r3, #7
 8007b48:	f023 0307 	bic.w	r3, r3, #7
 8007b4c:	3308      	adds	r3, #8
 8007b4e:	9303      	str	r3, [sp, #12]
 8007b50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b52:	4433      	add	r3, r6
 8007b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b56:	e76a      	b.n	8007a2e <_svfiprintf_r+0x52>
 8007b58:	460c      	mov	r4, r1
 8007b5a:	2001      	movs	r0, #1
 8007b5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b60:	e7a8      	b.n	8007ab4 <_svfiprintf_r+0xd8>
 8007b62:	2300      	movs	r3, #0
 8007b64:	f04f 0c0a 	mov.w	ip, #10
 8007b68:	4619      	mov	r1, r3
 8007b6a:	3401      	adds	r4, #1
 8007b6c:	9305      	str	r3, [sp, #20]
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b74:	3a30      	subs	r2, #48	@ 0x30
 8007b76:	2a09      	cmp	r2, #9
 8007b78:	d903      	bls.n	8007b82 <_svfiprintf_r+0x1a6>
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0c6      	beq.n	8007b0c <_svfiprintf_r+0x130>
 8007b7e:	9105      	str	r1, [sp, #20]
 8007b80:	e7c4      	b.n	8007b0c <_svfiprintf_r+0x130>
 8007b82:	4604      	mov	r4, r0
 8007b84:	2301      	movs	r3, #1
 8007b86:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b8a:	e7f0      	b.n	8007b6e <_svfiprintf_r+0x192>
 8007b8c:	ab03      	add	r3, sp, #12
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	462a      	mov	r2, r5
 8007b92:	4638      	mov	r0, r7
 8007b94:	4b0e      	ldr	r3, [pc, #56]	@ (8007bd0 <_svfiprintf_r+0x1f4>)
 8007b96:	a904      	add	r1, sp, #16
 8007b98:	f7fd fe4e 	bl	8005838 <_printf_float>
 8007b9c:	1c42      	adds	r2, r0, #1
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	d1d6      	bne.n	8007b50 <_svfiprintf_r+0x174>
 8007ba2:	89ab      	ldrh	r3, [r5, #12]
 8007ba4:	065b      	lsls	r3, r3, #25
 8007ba6:	f53f af2d 	bmi.w	8007a04 <_svfiprintf_r+0x28>
 8007baa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bac:	e72c      	b.n	8007a08 <_svfiprintf_r+0x2c>
 8007bae:	ab03      	add	r3, sp, #12
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	462a      	mov	r2, r5
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	4b06      	ldr	r3, [pc, #24]	@ (8007bd0 <_svfiprintf_r+0x1f4>)
 8007bb8:	a904      	add	r1, sp, #16
 8007bba:	f7fe f8db 	bl	8005d74 <_printf_i>
 8007bbe:	e7ed      	b.n	8007b9c <_svfiprintf_r+0x1c0>
 8007bc0:	08008720 	.word	0x08008720
 8007bc4:	08008726 	.word	0x08008726
 8007bc8:	0800872a 	.word	0x0800872a
 8007bcc:	08005839 	.word	0x08005839
 8007bd0:	08007925 	.word	0x08007925

08007bd4 <__sfputc_r>:
 8007bd4:	6893      	ldr	r3, [r2, #8]
 8007bd6:	b410      	push	{r4}
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	6093      	str	r3, [r2, #8]
 8007bde:	da07      	bge.n	8007bf0 <__sfputc_r+0x1c>
 8007be0:	6994      	ldr	r4, [r2, #24]
 8007be2:	42a3      	cmp	r3, r4
 8007be4:	db01      	blt.n	8007bea <__sfputc_r+0x16>
 8007be6:	290a      	cmp	r1, #10
 8007be8:	d102      	bne.n	8007bf0 <__sfputc_r+0x1c>
 8007bea:	bc10      	pop	{r4}
 8007bec:	f000 b9da 	b.w	8007fa4 <__swbuf_r>
 8007bf0:	6813      	ldr	r3, [r2, #0]
 8007bf2:	1c58      	adds	r0, r3, #1
 8007bf4:	6010      	str	r0, [r2, #0]
 8007bf6:	7019      	strb	r1, [r3, #0]
 8007bf8:	4608      	mov	r0, r1
 8007bfa:	bc10      	pop	{r4}
 8007bfc:	4770      	bx	lr

08007bfe <__sfputs_r>:
 8007bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c00:	4606      	mov	r6, r0
 8007c02:	460f      	mov	r7, r1
 8007c04:	4614      	mov	r4, r2
 8007c06:	18d5      	adds	r5, r2, r3
 8007c08:	42ac      	cmp	r4, r5
 8007c0a:	d101      	bne.n	8007c10 <__sfputs_r+0x12>
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	e007      	b.n	8007c20 <__sfputs_r+0x22>
 8007c10:	463a      	mov	r2, r7
 8007c12:	4630      	mov	r0, r6
 8007c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c18:	f7ff ffdc 	bl	8007bd4 <__sfputc_r>
 8007c1c:	1c43      	adds	r3, r0, #1
 8007c1e:	d1f3      	bne.n	8007c08 <__sfputs_r+0xa>
 8007c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c24 <_vfiprintf_r>:
 8007c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c28:	460d      	mov	r5, r1
 8007c2a:	4614      	mov	r4, r2
 8007c2c:	4698      	mov	r8, r3
 8007c2e:	4606      	mov	r6, r0
 8007c30:	b09d      	sub	sp, #116	@ 0x74
 8007c32:	b118      	cbz	r0, 8007c3c <_vfiprintf_r+0x18>
 8007c34:	6a03      	ldr	r3, [r0, #32]
 8007c36:	b90b      	cbnz	r3, 8007c3c <_vfiprintf_r+0x18>
 8007c38:	f7fe fa48 	bl	80060cc <__sinit>
 8007c3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c3e:	07d9      	lsls	r1, r3, #31
 8007c40:	d405      	bmi.n	8007c4e <_vfiprintf_r+0x2a>
 8007c42:	89ab      	ldrh	r3, [r5, #12]
 8007c44:	059a      	lsls	r2, r3, #22
 8007c46:	d402      	bmi.n	8007c4e <_vfiprintf_r+0x2a>
 8007c48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c4a:	f7fe fb7c 	bl	8006346 <__retarget_lock_acquire_recursive>
 8007c4e:	89ab      	ldrh	r3, [r5, #12]
 8007c50:	071b      	lsls	r3, r3, #28
 8007c52:	d501      	bpl.n	8007c58 <_vfiprintf_r+0x34>
 8007c54:	692b      	ldr	r3, [r5, #16]
 8007c56:	b99b      	cbnz	r3, 8007c80 <_vfiprintf_r+0x5c>
 8007c58:	4629      	mov	r1, r5
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	f000 f9e0 	bl	8008020 <__swsetup_r>
 8007c60:	b170      	cbz	r0, 8007c80 <_vfiprintf_r+0x5c>
 8007c62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c64:	07dc      	lsls	r4, r3, #31
 8007c66:	d504      	bpl.n	8007c72 <_vfiprintf_r+0x4e>
 8007c68:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6c:	b01d      	add	sp, #116	@ 0x74
 8007c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c72:	89ab      	ldrh	r3, [r5, #12]
 8007c74:	0598      	lsls	r0, r3, #22
 8007c76:	d4f7      	bmi.n	8007c68 <_vfiprintf_r+0x44>
 8007c78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c7a:	f7fe fb65 	bl	8006348 <__retarget_lock_release_recursive>
 8007c7e:	e7f3      	b.n	8007c68 <_vfiprintf_r+0x44>
 8007c80:	2300      	movs	r3, #0
 8007c82:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c84:	2320      	movs	r3, #32
 8007c86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c8a:	2330      	movs	r3, #48	@ 0x30
 8007c8c:	f04f 0901 	mov.w	r9, #1
 8007c90:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c94:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007e40 <_vfiprintf_r+0x21c>
 8007c98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c9c:	4623      	mov	r3, r4
 8007c9e:	469a      	mov	sl, r3
 8007ca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ca4:	b10a      	cbz	r2, 8007caa <_vfiprintf_r+0x86>
 8007ca6:	2a25      	cmp	r2, #37	@ 0x25
 8007ca8:	d1f9      	bne.n	8007c9e <_vfiprintf_r+0x7a>
 8007caa:	ebba 0b04 	subs.w	fp, sl, r4
 8007cae:	d00b      	beq.n	8007cc8 <_vfiprintf_r+0xa4>
 8007cb0:	465b      	mov	r3, fp
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	f7ff ffa1 	bl	8007bfe <__sfputs_r>
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	f000 80a7 	beq.w	8007e10 <_vfiprintf_r+0x1ec>
 8007cc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cc4:	445a      	add	r2, fp
 8007cc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 809f 	beq.w	8007e10 <_vfiprintf_r+0x1ec>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cdc:	f10a 0a01 	add.w	sl, sl, #1
 8007ce0:	9304      	str	r3, [sp, #16]
 8007ce2:	9307      	str	r3, [sp, #28]
 8007ce4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ce8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cea:	4654      	mov	r4, sl
 8007cec:	2205      	movs	r2, #5
 8007cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cf2:	4853      	ldr	r0, [pc, #332]	@ (8007e40 <_vfiprintf_r+0x21c>)
 8007cf4:	f7fe fb29 	bl	800634a <memchr>
 8007cf8:	9a04      	ldr	r2, [sp, #16]
 8007cfa:	b9d8      	cbnz	r0, 8007d34 <_vfiprintf_r+0x110>
 8007cfc:	06d1      	lsls	r1, r2, #27
 8007cfe:	bf44      	itt	mi
 8007d00:	2320      	movmi	r3, #32
 8007d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d06:	0713      	lsls	r3, r2, #28
 8007d08:	bf44      	itt	mi
 8007d0a:	232b      	movmi	r3, #43	@ 0x2b
 8007d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d10:	f89a 3000 	ldrb.w	r3, [sl]
 8007d14:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d16:	d015      	beq.n	8007d44 <_vfiprintf_r+0x120>
 8007d18:	4654      	mov	r4, sl
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	f04f 0c0a 	mov.w	ip, #10
 8007d20:	9a07      	ldr	r2, [sp, #28]
 8007d22:	4621      	mov	r1, r4
 8007d24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d28:	3b30      	subs	r3, #48	@ 0x30
 8007d2a:	2b09      	cmp	r3, #9
 8007d2c:	d94b      	bls.n	8007dc6 <_vfiprintf_r+0x1a2>
 8007d2e:	b1b0      	cbz	r0, 8007d5e <_vfiprintf_r+0x13a>
 8007d30:	9207      	str	r2, [sp, #28]
 8007d32:	e014      	b.n	8007d5e <_vfiprintf_r+0x13a>
 8007d34:	eba0 0308 	sub.w	r3, r0, r8
 8007d38:	fa09 f303 	lsl.w	r3, r9, r3
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	46a2      	mov	sl, r4
 8007d40:	9304      	str	r3, [sp, #16]
 8007d42:	e7d2      	b.n	8007cea <_vfiprintf_r+0xc6>
 8007d44:	9b03      	ldr	r3, [sp, #12]
 8007d46:	1d19      	adds	r1, r3, #4
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	9103      	str	r1, [sp, #12]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	bfbb      	ittet	lt
 8007d50:	425b      	neglt	r3, r3
 8007d52:	f042 0202 	orrlt.w	r2, r2, #2
 8007d56:	9307      	strge	r3, [sp, #28]
 8007d58:	9307      	strlt	r3, [sp, #28]
 8007d5a:	bfb8      	it	lt
 8007d5c:	9204      	strlt	r2, [sp, #16]
 8007d5e:	7823      	ldrb	r3, [r4, #0]
 8007d60:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d62:	d10a      	bne.n	8007d7a <_vfiprintf_r+0x156>
 8007d64:	7863      	ldrb	r3, [r4, #1]
 8007d66:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d68:	d132      	bne.n	8007dd0 <_vfiprintf_r+0x1ac>
 8007d6a:	9b03      	ldr	r3, [sp, #12]
 8007d6c:	3402      	adds	r4, #2
 8007d6e:	1d1a      	adds	r2, r3, #4
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	9203      	str	r2, [sp, #12]
 8007d74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d78:	9305      	str	r3, [sp, #20]
 8007d7a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007e44 <_vfiprintf_r+0x220>
 8007d7e:	2203      	movs	r2, #3
 8007d80:	4650      	mov	r0, sl
 8007d82:	7821      	ldrb	r1, [r4, #0]
 8007d84:	f7fe fae1 	bl	800634a <memchr>
 8007d88:	b138      	cbz	r0, 8007d9a <_vfiprintf_r+0x176>
 8007d8a:	2240      	movs	r2, #64	@ 0x40
 8007d8c:	9b04      	ldr	r3, [sp, #16]
 8007d8e:	eba0 000a 	sub.w	r0, r0, sl
 8007d92:	4082      	lsls	r2, r0
 8007d94:	4313      	orrs	r3, r2
 8007d96:	3401      	adds	r4, #1
 8007d98:	9304      	str	r3, [sp, #16]
 8007d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d9e:	2206      	movs	r2, #6
 8007da0:	4829      	ldr	r0, [pc, #164]	@ (8007e48 <_vfiprintf_r+0x224>)
 8007da2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007da6:	f7fe fad0 	bl	800634a <memchr>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d03f      	beq.n	8007e2e <_vfiprintf_r+0x20a>
 8007dae:	4b27      	ldr	r3, [pc, #156]	@ (8007e4c <_vfiprintf_r+0x228>)
 8007db0:	bb1b      	cbnz	r3, 8007dfa <_vfiprintf_r+0x1d6>
 8007db2:	9b03      	ldr	r3, [sp, #12]
 8007db4:	3307      	adds	r3, #7
 8007db6:	f023 0307 	bic.w	r3, r3, #7
 8007dba:	3308      	adds	r3, #8
 8007dbc:	9303      	str	r3, [sp, #12]
 8007dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dc0:	443b      	add	r3, r7
 8007dc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dc4:	e76a      	b.n	8007c9c <_vfiprintf_r+0x78>
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	2001      	movs	r0, #1
 8007dca:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dce:	e7a8      	b.n	8007d22 <_vfiprintf_r+0xfe>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	f04f 0c0a 	mov.w	ip, #10
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	3401      	adds	r4, #1
 8007dda:	9305      	str	r3, [sp, #20]
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007de2:	3a30      	subs	r2, #48	@ 0x30
 8007de4:	2a09      	cmp	r2, #9
 8007de6:	d903      	bls.n	8007df0 <_vfiprintf_r+0x1cc>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d0c6      	beq.n	8007d7a <_vfiprintf_r+0x156>
 8007dec:	9105      	str	r1, [sp, #20]
 8007dee:	e7c4      	b.n	8007d7a <_vfiprintf_r+0x156>
 8007df0:	4604      	mov	r4, r0
 8007df2:	2301      	movs	r3, #1
 8007df4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007df8:	e7f0      	b.n	8007ddc <_vfiprintf_r+0x1b8>
 8007dfa:	ab03      	add	r3, sp, #12
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	462a      	mov	r2, r5
 8007e00:	4630      	mov	r0, r6
 8007e02:	4b13      	ldr	r3, [pc, #76]	@ (8007e50 <_vfiprintf_r+0x22c>)
 8007e04:	a904      	add	r1, sp, #16
 8007e06:	f7fd fd17 	bl	8005838 <_printf_float>
 8007e0a:	4607      	mov	r7, r0
 8007e0c:	1c78      	adds	r0, r7, #1
 8007e0e:	d1d6      	bne.n	8007dbe <_vfiprintf_r+0x19a>
 8007e10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e12:	07d9      	lsls	r1, r3, #31
 8007e14:	d405      	bmi.n	8007e22 <_vfiprintf_r+0x1fe>
 8007e16:	89ab      	ldrh	r3, [r5, #12]
 8007e18:	059a      	lsls	r2, r3, #22
 8007e1a:	d402      	bmi.n	8007e22 <_vfiprintf_r+0x1fe>
 8007e1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e1e:	f7fe fa93 	bl	8006348 <__retarget_lock_release_recursive>
 8007e22:	89ab      	ldrh	r3, [r5, #12]
 8007e24:	065b      	lsls	r3, r3, #25
 8007e26:	f53f af1f 	bmi.w	8007c68 <_vfiprintf_r+0x44>
 8007e2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e2c:	e71e      	b.n	8007c6c <_vfiprintf_r+0x48>
 8007e2e:	ab03      	add	r3, sp, #12
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	462a      	mov	r2, r5
 8007e34:	4630      	mov	r0, r6
 8007e36:	4b06      	ldr	r3, [pc, #24]	@ (8007e50 <_vfiprintf_r+0x22c>)
 8007e38:	a904      	add	r1, sp, #16
 8007e3a:	f7fd ff9b 	bl	8005d74 <_printf_i>
 8007e3e:	e7e4      	b.n	8007e0a <_vfiprintf_r+0x1e6>
 8007e40:	08008720 	.word	0x08008720
 8007e44:	08008726 	.word	0x08008726
 8007e48:	0800872a 	.word	0x0800872a
 8007e4c:	08005839 	.word	0x08005839
 8007e50:	08007bff 	.word	0x08007bff

08007e54 <__sflush_r>:
 8007e54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5a:	0716      	lsls	r6, r2, #28
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	460c      	mov	r4, r1
 8007e60:	d454      	bmi.n	8007f0c <__sflush_r+0xb8>
 8007e62:	684b      	ldr	r3, [r1, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	dc02      	bgt.n	8007e6e <__sflush_r+0x1a>
 8007e68:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	dd48      	ble.n	8007f00 <__sflush_r+0xac>
 8007e6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e70:	2e00      	cmp	r6, #0
 8007e72:	d045      	beq.n	8007f00 <__sflush_r+0xac>
 8007e74:	2300      	movs	r3, #0
 8007e76:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e7a:	682f      	ldr	r7, [r5, #0]
 8007e7c:	6a21      	ldr	r1, [r4, #32]
 8007e7e:	602b      	str	r3, [r5, #0]
 8007e80:	d030      	beq.n	8007ee4 <__sflush_r+0x90>
 8007e82:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e84:	89a3      	ldrh	r3, [r4, #12]
 8007e86:	0759      	lsls	r1, r3, #29
 8007e88:	d505      	bpl.n	8007e96 <__sflush_r+0x42>
 8007e8a:	6863      	ldr	r3, [r4, #4]
 8007e8c:	1ad2      	subs	r2, r2, r3
 8007e8e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e90:	b10b      	cbz	r3, 8007e96 <__sflush_r+0x42>
 8007e92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e94:	1ad2      	subs	r2, r2, r3
 8007e96:	2300      	movs	r3, #0
 8007e98:	4628      	mov	r0, r5
 8007e9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e9c:	6a21      	ldr	r1, [r4, #32]
 8007e9e:	47b0      	blx	r6
 8007ea0:	1c43      	adds	r3, r0, #1
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	d106      	bne.n	8007eb4 <__sflush_r+0x60>
 8007ea6:	6829      	ldr	r1, [r5, #0]
 8007ea8:	291d      	cmp	r1, #29
 8007eaa:	d82b      	bhi.n	8007f04 <__sflush_r+0xb0>
 8007eac:	4a28      	ldr	r2, [pc, #160]	@ (8007f50 <__sflush_r+0xfc>)
 8007eae:	410a      	asrs	r2, r1
 8007eb0:	07d6      	lsls	r6, r2, #31
 8007eb2:	d427      	bmi.n	8007f04 <__sflush_r+0xb0>
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	6062      	str	r2, [r4, #4]
 8007eb8:	6922      	ldr	r2, [r4, #16]
 8007eba:	04d9      	lsls	r1, r3, #19
 8007ebc:	6022      	str	r2, [r4, #0]
 8007ebe:	d504      	bpl.n	8007eca <__sflush_r+0x76>
 8007ec0:	1c42      	adds	r2, r0, #1
 8007ec2:	d101      	bne.n	8007ec8 <__sflush_r+0x74>
 8007ec4:	682b      	ldr	r3, [r5, #0]
 8007ec6:	b903      	cbnz	r3, 8007eca <__sflush_r+0x76>
 8007ec8:	6560      	str	r0, [r4, #84]	@ 0x54
 8007eca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ecc:	602f      	str	r7, [r5, #0]
 8007ece:	b1b9      	cbz	r1, 8007f00 <__sflush_r+0xac>
 8007ed0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ed4:	4299      	cmp	r1, r3
 8007ed6:	d002      	beq.n	8007ede <__sflush_r+0x8a>
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f7ff f8a5 	bl	8007028 <_free_r>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ee2:	e00d      	b.n	8007f00 <__sflush_r+0xac>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	47b0      	blx	r6
 8007eea:	4602      	mov	r2, r0
 8007eec:	1c50      	adds	r0, r2, #1
 8007eee:	d1c9      	bne.n	8007e84 <__sflush_r+0x30>
 8007ef0:	682b      	ldr	r3, [r5, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d0c6      	beq.n	8007e84 <__sflush_r+0x30>
 8007ef6:	2b1d      	cmp	r3, #29
 8007ef8:	d001      	beq.n	8007efe <__sflush_r+0xaa>
 8007efa:	2b16      	cmp	r3, #22
 8007efc:	d11d      	bne.n	8007f3a <__sflush_r+0xe6>
 8007efe:	602f      	str	r7, [r5, #0]
 8007f00:	2000      	movs	r0, #0
 8007f02:	e021      	b.n	8007f48 <__sflush_r+0xf4>
 8007f04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f08:	b21b      	sxth	r3, r3
 8007f0a:	e01a      	b.n	8007f42 <__sflush_r+0xee>
 8007f0c:	690f      	ldr	r7, [r1, #16]
 8007f0e:	2f00      	cmp	r7, #0
 8007f10:	d0f6      	beq.n	8007f00 <__sflush_r+0xac>
 8007f12:	0793      	lsls	r3, r2, #30
 8007f14:	bf18      	it	ne
 8007f16:	2300      	movne	r3, #0
 8007f18:	680e      	ldr	r6, [r1, #0]
 8007f1a:	bf08      	it	eq
 8007f1c:	694b      	ldreq	r3, [r1, #20]
 8007f1e:	1bf6      	subs	r6, r6, r7
 8007f20:	600f      	str	r7, [r1, #0]
 8007f22:	608b      	str	r3, [r1, #8]
 8007f24:	2e00      	cmp	r6, #0
 8007f26:	ddeb      	ble.n	8007f00 <__sflush_r+0xac>
 8007f28:	4633      	mov	r3, r6
 8007f2a:	463a      	mov	r2, r7
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	6a21      	ldr	r1, [r4, #32]
 8007f30:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007f34:	47e0      	blx	ip
 8007f36:	2800      	cmp	r0, #0
 8007f38:	dc07      	bgt.n	8007f4a <__sflush_r+0xf6>
 8007f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f42:	f04f 30ff 	mov.w	r0, #4294967295
 8007f46:	81a3      	strh	r3, [r4, #12]
 8007f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f4a:	4407      	add	r7, r0
 8007f4c:	1a36      	subs	r6, r6, r0
 8007f4e:	e7e9      	b.n	8007f24 <__sflush_r+0xd0>
 8007f50:	dfbffffe 	.word	0xdfbffffe

08007f54 <_fflush_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	690b      	ldr	r3, [r1, #16]
 8007f58:	4605      	mov	r5, r0
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	b913      	cbnz	r3, 8007f64 <_fflush_r+0x10>
 8007f5e:	2500      	movs	r5, #0
 8007f60:	4628      	mov	r0, r5
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	b118      	cbz	r0, 8007f6e <_fflush_r+0x1a>
 8007f66:	6a03      	ldr	r3, [r0, #32]
 8007f68:	b90b      	cbnz	r3, 8007f6e <_fflush_r+0x1a>
 8007f6a:	f7fe f8af 	bl	80060cc <__sinit>
 8007f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0f3      	beq.n	8007f5e <_fflush_r+0xa>
 8007f76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f78:	07d0      	lsls	r0, r2, #31
 8007f7a:	d404      	bmi.n	8007f86 <_fflush_r+0x32>
 8007f7c:	0599      	lsls	r1, r3, #22
 8007f7e:	d402      	bmi.n	8007f86 <_fflush_r+0x32>
 8007f80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f82:	f7fe f9e0 	bl	8006346 <__retarget_lock_acquire_recursive>
 8007f86:	4628      	mov	r0, r5
 8007f88:	4621      	mov	r1, r4
 8007f8a:	f7ff ff63 	bl	8007e54 <__sflush_r>
 8007f8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f90:	4605      	mov	r5, r0
 8007f92:	07da      	lsls	r2, r3, #31
 8007f94:	d4e4      	bmi.n	8007f60 <_fflush_r+0xc>
 8007f96:	89a3      	ldrh	r3, [r4, #12]
 8007f98:	059b      	lsls	r3, r3, #22
 8007f9a:	d4e1      	bmi.n	8007f60 <_fflush_r+0xc>
 8007f9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f9e:	f7fe f9d3 	bl	8006348 <__retarget_lock_release_recursive>
 8007fa2:	e7dd      	b.n	8007f60 <_fflush_r+0xc>

08007fa4 <__swbuf_r>:
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	460e      	mov	r6, r1
 8007fa8:	4614      	mov	r4, r2
 8007faa:	4605      	mov	r5, r0
 8007fac:	b118      	cbz	r0, 8007fb6 <__swbuf_r+0x12>
 8007fae:	6a03      	ldr	r3, [r0, #32]
 8007fb0:	b90b      	cbnz	r3, 8007fb6 <__swbuf_r+0x12>
 8007fb2:	f7fe f88b 	bl	80060cc <__sinit>
 8007fb6:	69a3      	ldr	r3, [r4, #24]
 8007fb8:	60a3      	str	r3, [r4, #8]
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	071a      	lsls	r2, r3, #28
 8007fbe:	d501      	bpl.n	8007fc4 <__swbuf_r+0x20>
 8007fc0:	6923      	ldr	r3, [r4, #16]
 8007fc2:	b943      	cbnz	r3, 8007fd6 <__swbuf_r+0x32>
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	f000 f82a 	bl	8008020 <__swsetup_r>
 8007fcc:	b118      	cbz	r0, 8007fd6 <__swbuf_r+0x32>
 8007fce:	f04f 37ff 	mov.w	r7, #4294967295
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	6922      	ldr	r2, [r4, #16]
 8007fda:	b2f6      	uxtb	r6, r6
 8007fdc:	1a98      	subs	r0, r3, r2
 8007fde:	6963      	ldr	r3, [r4, #20]
 8007fe0:	4637      	mov	r7, r6
 8007fe2:	4283      	cmp	r3, r0
 8007fe4:	dc05      	bgt.n	8007ff2 <__swbuf_r+0x4e>
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	4628      	mov	r0, r5
 8007fea:	f7ff ffb3 	bl	8007f54 <_fflush_r>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d1ed      	bne.n	8007fce <__swbuf_r+0x2a>
 8007ff2:	68a3      	ldr	r3, [r4, #8]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	60a3      	str	r3, [r4, #8]
 8007ff8:	6823      	ldr	r3, [r4, #0]
 8007ffa:	1c5a      	adds	r2, r3, #1
 8007ffc:	6022      	str	r2, [r4, #0]
 8007ffe:	701e      	strb	r6, [r3, #0]
 8008000:	6962      	ldr	r2, [r4, #20]
 8008002:	1c43      	adds	r3, r0, #1
 8008004:	429a      	cmp	r2, r3
 8008006:	d004      	beq.n	8008012 <__swbuf_r+0x6e>
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	07db      	lsls	r3, r3, #31
 800800c:	d5e1      	bpl.n	8007fd2 <__swbuf_r+0x2e>
 800800e:	2e0a      	cmp	r6, #10
 8008010:	d1df      	bne.n	8007fd2 <__swbuf_r+0x2e>
 8008012:	4621      	mov	r1, r4
 8008014:	4628      	mov	r0, r5
 8008016:	f7ff ff9d 	bl	8007f54 <_fflush_r>
 800801a:	2800      	cmp	r0, #0
 800801c:	d0d9      	beq.n	8007fd2 <__swbuf_r+0x2e>
 800801e:	e7d6      	b.n	8007fce <__swbuf_r+0x2a>

08008020 <__swsetup_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4b29      	ldr	r3, [pc, #164]	@ (80080c8 <__swsetup_r+0xa8>)
 8008024:	4605      	mov	r5, r0
 8008026:	6818      	ldr	r0, [r3, #0]
 8008028:	460c      	mov	r4, r1
 800802a:	b118      	cbz	r0, 8008034 <__swsetup_r+0x14>
 800802c:	6a03      	ldr	r3, [r0, #32]
 800802e:	b90b      	cbnz	r3, 8008034 <__swsetup_r+0x14>
 8008030:	f7fe f84c 	bl	80060cc <__sinit>
 8008034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008038:	0719      	lsls	r1, r3, #28
 800803a:	d422      	bmi.n	8008082 <__swsetup_r+0x62>
 800803c:	06da      	lsls	r2, r3, #27
 800803e:	d407      	bmi.n	8008050 <__swsetup_r+0x30>
 8008040:	2209      	movs	r2, #9
 8008042:	602a      	str	r2, [r5, #0]
 8008044:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008048:	f04f 30ff 	mov.w	r0, #4294967295
 800804c:	81a3      	strh	r3, [r4, #12]
 800804e:	e033      	b.n	80080b8 <__swsetup_r+0x98>
 8008050:	0758      	lsls	r0, r3, #29
 8008052:	d512      	bpl.n	800807a <__swsetup_r+0x5a>
 8008054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008056:	b141      	cbz	r1, 800806a <__swsetup_r+0x4a>
 8008058:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800805c:	4299      	cmp	r1, r3
 800805e:	d002      	beq.n	8008066 <__swsetup_r+0x46>
 8008060:	4628      	mov	r0, r5
 8008062:	f7fe ffe1 	bl	8007028 <_free_r>
 8008066:	2300      	movs	r3, #0
 8008068:	6363      	str	r3, [r4, #52]	@ 0x34
 800806a:	89a3      	ldrh	r3, [r4, #12]
 800806c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008070:	81a3      	strh	r3, [r4, #12]
 8008072:	2300      	movs	r3, #0
 8008074:	6063      	str	r3, [r4, #4]
 8008076:	6923      	ldr	r3, [r4, #16]
 8008078:	6023      	str	r3, [r4, #0]
 800807a:	89a3      	ldrh	r3, [r4, #12]
 800807c:	f043 0308 	orr.w	r3, r3, #8
 8008080:	81a3      	strh	r3, [r4, #12]
 8008082:	6923      	ldr	r3, [r4, #16]
 8008084:	b94b      	cbnz	r3, 800809a <__swsetup_r+0x7a>
 8008086:	89a3      	ldrh	r3, [r4, #12]
 8008088:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800808c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008090:	d003      	beq.n	800809a <__swsetup_r+0x7a>
 8008092:	4621      	mov	r1, r4
 8008094:	4628      	mov	r0, r5
 8008096:	f000 f8fa 	bl	800828e <__smakebuf_r>
 800809a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800809e:	f013 0201 	ands.w	r2, r3, #1
 80080a2:	d00a      	beq.n	80080ba <__swsetup_r+0x9a>
 80080a4:	2200      	movs	r2, #0
 80080a6:	60a2      	str	r2, [r4, #8]
 80080a8:	6962      	ldr	r2, [r4, #20]
 80080aa:	4252      	negs	r2, r2
 80080ac:	61a2      	str	r2, [r4, #24]
 80080ae:	6922      	ldr	r2, [r4, #16]
 80080b0:	b942      	cbnz	r2, 80080c4 <__swsetup_r+0xa4>
 80080b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80080b6:	d1c5      	bne.n	8008044 <__swsetup_r+0x24>
 80080b8:	bd38      	pop	{r3, r4, r5, pc}
 80080ba:	0799      	lsls	r1, r3, #30
 80080bc:	bf58      	it	pl
 80080be:	6962      	ldrpl	r2, [r4, #20]
 80080c0:	60a2      	str	r2, [r4, #8]
 80080c2:	e7f4      	b.n	80080ae <__swsetup_r+0x8e>
 80080c4:	2000      	movs	r0, #0
 80080c6:	e7f7      	b.n	80080b8 <__swsetup_r+0x98>
 80080c8:	20000018 	.word	0x20000018

080080cc <memmove>:
 80080cc:	4288      	cmp	r0, r1
 80080ce:	b510      	push	{r4, lr}
 80080d0:	eb01 0402 	add.w	r4, r1, r2
 80080d4:	d902      	bls.n	80080dc <memmove+0x10>
 80080d6:	4284      	cmp	r4, r0
 80080d8:	4623      	mov	r3, r4
 80080da:	d807      	bhi.n	80080ec <memmove+0x20>
 80080dc:	1e43      	subs	r3, r0, #1
 80080de:	42a1      	cmp	r1, r4
 80080e0:	d008      	beq.n	80080f4 <memmove+0x28>
 80080e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080ea:	e7f8      	b.n	80080de <memmove+0x12>
 80080ec:	4601      	mov	r1, r0
 80080ee:	4402      	add	r2, r0
 80080f0:	428a      	cmp	r2, r1
 80080f2:	d100      	bne.n	80080f6 <memmove+0x2a>
 80080f4:	bd10      	pop	{r4, pc}
 80080f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080fe:	e7f7      	b.n	80080f0 <memmove+0x24>

08008100 <_sbrk_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	2300      	movs	r3, #0
 8008104:	4d05      	ldr	r5, [pc, #20]	@ (800811c <_sbrk_r+0x1c>)
 8008106:	4604      	mov	r4, r0
 8008108:	4608      	mov	r0, r1
 800810a:	602b      	str	r3, [r5, #0]
 800810c:	f7f9 fe18 	bl	8001d40 <_sbrk>
 8008110:	1c43      	adds	r3, r0, #1
 8008112:	d102      	bne.n	800811a <_sbrk_r+0x1a>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	b103      	cbz	r3, 800811a <_sbrk_r+0x1a>
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	bd38      	pop	{r3, r4, r5, pc}
 800811c:	200004b8 	.word	0x200004b8

08008120 <__assert_func>:
 8008120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008122:	4614      	mov	r4, r2
 8008124:	461a      	mov	r2, r3
 8008126:	4b09      	ldr	r3, [pc, #36]	@ (800814c <__assert_func+0x2c>)
 8008128:	4605      	mov	r5, r0
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68d8      	ldr	r0, [r3, #12]
 800812e:	b954      	cbnz	r4, 8008146 <__assert_func+0x26>
 8008130:	4b07      	ldr	r3, [pc, #28]	@ (8008150 <__assert_func+0x30>)
 8008132:	461c      	mov	r4, r3
 8008134:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008138:	9100      	str	r1, [sp, #0]
 800813a:	462b      	mov	r3, r5
 800813c:	4905      	ldr	r1, [pc, #20]	@ (8008154 <__assert_func+0x34>)
 800813e:	f000 f86f 	bl	8008220 <fiprintf>
 8008142:	f000 f903 	bl	800834c <abort>
 8008146:	4b04      	ldr	r3, [pc, #16]	@ (8008158 <__assert_func+0x38>)
 8008148:	e7f4      	b.n	8008134 <__assert_func+0x14>
 800814a:	bf00      	nop
 800814c:	20000018 	.word	0x20000018
 8008150:	08008776 	.word	0x08008776
 8008154:	08008748 	.word	0x08008748
 8008158:	0800873b 	.word	0x0800873b

0800815c <_calloc_r>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	fba1 5402 	umull	r5, r4, r1, r2
 8008162:	b93c      	cbnz	r4, 8008174 <_calloc_r+0x18>
 8008164:	4629      	mov	r1, r5
 8008166:	f7fe ffd1 	bl	800710c <_malloc_r>
 800816a:	4606      	mov	r6, r0
 800816c:	b928      	cbnz	r0, 800817a <_calloc_r+0x1e>
 800816e:	2600      	movs	r6, #0
 8008170:	4630      	mov	r0, r6
 8008172:	bd70      	pop	{r4, r5, r6, pc}
 8008174:	220c      	movs	r2, #12
 8008176:	6002      	str	r2, [r0, #0]
 8008178:	e7f9      	b.n	800816e <_calloc_r+0x12>
 800817a:	462a      	mov	r2, r5
 800817c:	4621      	mov	r1, r4
 800817e:	f7fe f864 	bl	800624a <memset>
 8008182:	e7f5      	b.n	8008170 <_calloc_r+0x14>

08008184 <__ascii_mbtowc>:
 8008184:	b082      	sub	sp, #8
 8008186:	b901      	cbnz	r1, 800818a <__ascii_mbtowc+0x6>
 8008188:	a901      	add	r1, sp, #4
 800818a:	b142      	cbz	r2, 800819e <__ascii_mbtowc+0x1a>
 800818c:	b14b      	cbz	r3, 80081a2 <__ascii_mbtowc+0x1e>
 800818e:	7813      	ldrb	r3, [r2, #0]
 8008190:	600b      	str	r3, [r1, #0]
 8008192:	7812      	ldrb	r2, [r2, #0]
 8008194:	1e10      	subs	r0, r2, #0
 8008196:	bf18      	it	ne
 8008198:	2001      	movne	r0, #1
 800819a:	b002      	add	sp, #8
 800819c:	4770      	bx	lr
 800819e:	4610      	mov	r0, r2
 80081a0:	e7fb      	b.n	800819a <__ascii_mbtowc+0x16>
 80081a2:	f06f 0001 	mvn.w	r0, #1
 80081a6:	e7f8      	b.n	800819a <__ascii_mbtowc+0x16>

080081a8 <_realloc_r>:
 80081a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ac:	4680      	mov	r8, r0
 80081ae:	4615      	mov	r5, r2
 80081b0:	460c      	mov	r4, r1
 80081b2:	b921      	cbnz	r1, 80081be <_realloc_r+0x16>
 80081b4:	4611      	mov	r1, r2
 80081b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081ba:	f7fe bfa7 	b.w	800710c <_malloc_r>
 80081be:	b92a      	cbnz	r2, 80081cc <_realloc_r+0x24>
 80081c0:	f7fe ff32 	bl	8007028 <_free_r>
 80081c4:	2400      	movs	r4, #0
 80081c6:	4620      	mov	r0, r4
 80081c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081cc:	f000 f8c5 	bl	800835a <_malloc_usable_size_r>
 80081d0:	4285      	cmp	r5, r0
 80081d2:	4606      	mov	r6, r0
 80081d4:	d802      	bhi.n	80081dc <_realloc_r+0x34>
 80081d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80081da:	d8f4      	bhi.n	80081c6 <_realloc_r+0x1e>
 80081dc:	4629      	mov	r1, r5
 80081de:	4640      	mov	r0, r8
 80081e0:	f7fe ff94 	bl	800710c <_malloc_r>
 80081e4:	4607      	mov	r7, r0
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d0ec      	beq.n	80081c4 <_realloc_r+0x1c>
 80081ea:	42b5      	cmp	r5, r6
 80081ec:	462a      	mov	r2, r5
 80081ee:	4621      	mov	r1, r4
 80081f0:	bf28      	it	cs
 80081f2:	4632      	movcs	r2, r6
 80081f4:	f7fe f8b7 	bl	8006366 <memcpy>
 80081f8:	4621      	mov	r1, r4
 80081fa:	4640      	mov	r0, r8
 80081fc:	f7fe ff14 	bl	8007028 <_free_r>
 8008200:	463c      	mov	r4, r7
 8008202:	e7e0      	b.n	80081c6 <_realloc_r+0x1e>

08008204 <__ascii_wctomb>:
 8008204:	4603      	mov	r3, r0
 8008206:	4608      	mov	r0, r1
 8008208:	b141      	cbz	r1, 800821c <__ascii_wctomb+0x18>
 800820a:	2aff      	cmp	r2, #255	@ 0xff
 800820c:	d904      	bls.n	8008218 <__ascii_wctomb+0x14>
 800820e:	228a      	movs	r2, #138	@ 0x8a
 8008210:	f04f 30ff 	mov.w	r0, #4294967295
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	4770      	bx	lr
 8008218:	2001      	movs	r0, #1
 800821a:	700a      	strb	r2, [r1, #0]
 800821c:	4770      	bx	lr
	...

08008220 <fiprintf>:
 8008220:	b40e      	push	{r1, r2, r3}
 8008222:	b503      	push	{r0, r1, lr}
 8008224:	4601      	mov	r1, r0
 8008226:	ab03      	add	r3, sp, #12
 8008228:	4805      	ldr	r0, [pc, #20]	@ (8008240 <fiprintf+0x20>)
 800822a:	f853 2b04 	ldr.w	r2, [r3], #4
 800822e:	6800      	ldr	r0, [r0, #0]
 8008230:	9301      	str	r3, [sp, #4]
 8008232:	f7ff fcf7 	bl	8007c24 <_vfiprintf_r>
 8008236:	b002      	add	sp, #8
 8008238:	f85d eb04 	ldr.w	lr, [sp], #4
 800823c:	b003      	add	sp, #12
 800823e:	4770      	bx	lr
 8008240:	20000018 	.word	0x20000018

08008244 <__swhatbuf_r>:
 8008244:	b570      	push	{r4, r5, r6, lr}
 8008246:	460c      	mov	r4, r1
 8008248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800824c:	4615      	mov	r5, r2
 800824e:	2900      	cmp	r1, #0
 8008250:	461e      	mov	r6, r3
 8008252:	b096      	sub	sp, #88	@ 0x58
 8008254:	da0c      	bge.n	8008270 <__swhatbuf_r+0x2c>
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	2100      	movs	r1, #0
 800825a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800825e:	bf14      	ite	ne
 8008260:	2340      	movne	r3, #64	@ 0x40
 8008262:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008266:	2000      	movs	r0, #0
 8008268:	6031      	str	r1, [r6, #0]
 800826a:	602b      	str	r3, [r5, #0]
 800826c:	b016      	add	sp, #88	@ 0x58
 800826e:	bd70      	pop	{r4, r5, r6, pc}
 8008270:	466a      	mov	r2, sp
 8008272:	f000 f849 	bl	8008308 <_fstat_r>
 8008276:	2800      	cmp	r0, #0
 8008278:	dbed      	blt.n	8008256 <__swhatbuf_r+0x12>
 800827a:	9901      	ldr	r1, [sp, #4]
 800827c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008280:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008284:	4259      	negs	r1, r3
 8008286:	4159      	adcs	r1, r3
 8008288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800828c:	e7eb      	b.n	8008266 <__swhatbuf_r+0x22>

0800828e <__smakebuf_r>:
 800828e:	898b      	ldrh	r3, [r1, #12]
 8008290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008292:	079d      	lsls	r5, r3, #30
 8008294:	4606      	mov	r6, r0
 8008296:	460c      	mov	r4, r1
 8008298:	d507      	bpl.n	80082aa <__smakebuf_r+0x1c>
 800829a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800829e:	6023      	str	r3, [r4, #0]
 80082a0:	6123      	str	r3, [r4, #16]
 80082a2:	2301      	movs	r3, #1
 80082a4:	6163      	str	r3, [r4, #20]
 80082a6:	b003      	add	sp, #12
 80082a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082aa:	466a      	mov	r2, sp
 80082ac:	ab01      	add	r3, sp, #4
 80082ae:	f7ff ffc9 	bl	8008244 <__swhatbuf_r>
 80082b2:	9f00      	ldr	r7, [sp, #0]
 80082b4:	4605      	mov	r5, r0
 80082b6:	4639      	mov	r1, r7
 80082b8:	4630      	mov	r0, r6
 80082ba:	f7fe ff27 	bl	800710c <_malloc_r>
 80082be:	b948      	cbnz	r0, 80082d4 <__smakebuf_r+0x46>
 80082c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082c4:	059a      	lsls	r2, r3, #22
 80082c6:	d4ee      	bmi.n	80082a6 <__smakebuf_r+0x18>
 80082c8:	f023 0303 	bic.w	r3, r3, #3
 80082cc:	f043 0302 	orr.w	r3, r3, #2
 80082d0:	81a3      	strh	r3, [r4, #12]
 80082d2:	e7e2      	b.n	800829a <__smakebuf_r+0xc>
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80082da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082de:	81a3      	strh	r3, [r4, #12]
 80082e0:	9b01      	ldr	r3, [sp, #4]
 80082e2:	6020      	str	r0, [r4, #0]
 80082e4:	b15b      	cbz	r3, 80082fe <__smakebuf_r+0x70>
 80082e6:	4630      	mov	r0, r6
 80082e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ec:	f000 f81e 	bl	800832c <_isatty_r>
 80082f0:	b128      	cbz	r0, 80082fe <__smakebuf_r+0x70>
 80082f2:	89a3      	ldrh	r3, [r4, #12]
 80082f4:	f023 0303 	bic.w	r3, r3, #3
 80082f8:	f043 0301 	orr.w	r3, r3, #1
 80082fc:	81a3      	strh	r3, [r4, #12]
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	431d      	orrs	r5, r3
 8008302:	81a5      	strh	r5, [r4, #12]
 8008304:	e7cf      	b.n	80082a6 <__smakebuf_r+0x18>
	...

08008308 <_fstat_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	2300      	movs	r3, #0
 800830c:	4d06      	ldr	r5, [pc, #24]	@ (8008328 <_fstat_r+0x20>)
 800830e:	4604      	mov	r4, r0
 8008310:	4608      	mov	r0, r1
 8008312:	4611      	mov	r1, r2
 8008314:	602b      	str	r3, [r5, #0]
 8008316:	f7f9 fcee 	bl	8001cf6 <_fstat>
 800831a:	1c43      	adds	r3, r0, #1
 800831c:	d102      	bne.n	8008324 <_fstat_r+0x1c>
 800831e:	682b      	ldr	r3, [r5, #0]
 8008320:	b103      	cbz	r3, 8008324 <_fstat_r+0x1c>
 8008322:	6023      	str	r3, [r4, #0]
 8008324:	bd38      	pop	{r3, r4, r5, pc}
 8008326:	bf00      	nop
 8008328:	200004b8 	.word	0x200004b8

0800832c <_isatty_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	2300      	movs	r3, #0
 8008330:	4d05      	ldr	r5, [pc, #20]	@ (8008348 <_isatty_r+0x1c>)
 8008332:	4604      	mov	r4, r0
 8008334:	4608      	mov	r0, r1
 8008336:	602b      	str	r3, [r5, #0]
 8008338:	f7f9 fcec 	bl	8001d14 <_isatty>
 800833c:	1c43      	adds	r3, r0, #1
 800833e:	d102      	bne.n	8008346 <_isatty_r+0x1a>
 8008340:	682b      	ldr	r3, [r5, #0]
 8008342:	b103      	cbz	r3, 8008346 <_isatty_r+0x1a>
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	200004b8 	.word	0x200004b8

0800834c <abort>:
 800834c:	2006      	movs	r0, #6
 800834e:	b508      	push	{r3, lr}
 8008350:	f000 f834 	bl	80083bc <raise>
 8008354:	2001      	movs	r0, #1
 8008356:	f7f9 fc7f 	bl	8001c58 <_exit>

0800835a <_malloc_usable_size_r>:
 800835a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800835e:	1f18      	subs	r0, r3, #4
 8008360:	2b00      	cmp	r3, #0
 8008362:	bfbc      	itt	lt
 8008364:	580b      	ldrlt	r3, [r1, r0]
 8008366:	18c0      	addlt	r0, r0, r3
 8008368:	4770      	bx	lr

0800836a <_raise_r>:
 800836a:	291f      	cmp	r1, #31
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	4605      	mov	r5, r0
 8008370:	460c      	mov	r4, r1
 8008372:	d904      	bls.n	800837e <_raise_r+0x14>
 8008374:	2316      	movs	r3, #22
 8008376:	6003      	str	r3, [r0, #0]
 8008378:	f04f 30ff 	mov.w	r0, #4294967295
 800837c:	bd38      	pop	{r3, r4, r5, pc}
 800837e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008380:	b112      	cbz	r2, 8008388 <_raise_r+0x1e>
 8008382:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008386:	b94b      	cbnz	r3, 800839c <_raise_r+0x32>
 8008388:	4628      	mov	r0, r5
 800838a:	f000 f831 	bl	80083f0 <_getpid_r>
 800838e:	4622      	mov	r2, r4
 8008390:	4601      	mov	r1, r0
 8008392:	4628      	mov	r0, r5
 8008394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008398:	f000 b818 	b.w	80083cc <_kill_r>
 800839c:	2b01      	cmp	r3, #1
 800839e:	d00a      	beq.n	80083b6 <_raise_r+0x4c>
 80083a0:	1c59      	adds	r1, r3, #1
 80083a2:	d103      	bne.n	80083ac <_raise_r+0x42>
 80083a4:	2316      	movs	r3, #22
 80083a6:	6003      	str	r3, [r0, #0]
 80083a8:	2001      	movs	r0, #1
 80083aa:	e7e7      	b.n	800837c <_raise_r+0x12>
 80083ac:	2100      	movs	r1, #0
 80083ae:	4620      	mov	r0, r4
 80083b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80083b4:	4798      	blx	r3
 80083b6:	2000      	movs	r0, #0
 80083b8:	e7e0      	b.n	800837c <_raise_r+0x12>
	...

080083bc <raise>:
 80083bc:	4b02      	ldr	r3, [pc, #8]	@ (80083c8 <raise+0xc>)
 80083be:	4601      	mov	r1, r0
 80083c0:	6818      	ldr	r0, [r3, #0]
 80083c2:	f7ff bfd2 	b.w	800836a <_raise_r>
 80083c6:	bf00      	nop
 80083c8:	20000018 	.word	0x20000018

080083cc <_kill_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	2300      	movs	r3, #0
 80083d0:	4d06      	ldr	r5, [pc, #24]	@ (80083ec <_kill_r+0x20>)
 80083d2:	4604      	mov	r4, r0
 80083d4:	4608      	mov	r0, r1
 80083d6:	4611      	mov	r1, r2
 80083d8:	602b      	str	r3, [r5, #0]
 80083da:	f7f9 fc2d 	bl	8001c38 <_kill>
 80083de:	1c43      	adds	r3, r0, #1
 80083e0:	d102      	bne.n	80083e8 <_kill_r+0x1c>
 80083e2:	682b      	ldr	r3, [r5, #0]
 80083e4:	b103      	cbz	r3, 80083e8 <_kill_r+0x1c>
 80083e6:	6023      	str	r3, [r4, #0]
 80083e8:	bd38      	pop	{r3, r4, r5, pc}
 80083ea:	bf00      	nop
 80083ec:	200004b8 	.word	0x200004b8

080083f0 <_getpid_r>:
 80083f0:	f7f9 bc1b 	b.w	8001c2a <_getpid>

080083f4 <_init>:
 80083f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f6:	bf00      	nop
 80083f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fa:	bc08      	pop	{r3}
 80083fc:	469e      	mov	lr, r3
 80083fe:	4770      	bx	lr

08008400 <_fini>:
 8008400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008402:	bf00      	nop
 8008404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008406:	bc08      	pop	{r3}
 8008408:	469e      	mov	lr, r3
 800840a:	4770      	bx	lr
